Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - obelisk-0.1.0.0 (lib) (configuration changed)
 - obelisk-0.1.0.0 (exe:rayBench) (configuration changed)
 - obelisk-0.1.0.0 (exe:obelisk-exe) (configuration changed)
Configuring library for obelisk-0.1.0.0..
Preprocessing library for obelisk-0.1.0.0..
Building library for obelisk-0.1.0.0..
[ 9 of 17] Compiling Obelisk.Engine.Ray ( src\Obelisk\Engine\Ray.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Engine\Ray.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 1,601, types: 1,663, coercions: 9, joins: 7/24}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lenPassthrough1 = I# 0#

Rec {
-- RHS size: {terms: 19, types: 9, coercions: 0, joins: 0/0}
$wgo_rK8F
  = \ w_sJIn ww_sJIr ->
      case w_sJIn of {
        [] -> I# ww_sJIr;
        : y_a9mO ys_a9mP ->
          case y_a9mO of {
            __DEFAULT -> $wgo_rK8F ys_a9mP (+# ww_sJIr 1#);
            FW -> I# ww_sJIr
          }
      }
end Rec }

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lenPassthrough = \ x_a9ku -> $wgo_rK8F x_a9ku 0#

-- RHS size: {terms: 44, types: 22, coercions: 1, joins: 0/0}
clipWorld
  = \ ws_aI51 eta_B1 ->
      takeWhile
        (\ v_aI52 ->
           case v_aI52 of { V2 x_aI53 y_aI54 ->
           case y_aI54 of { F# x1_sJX9 ->
           case x_aI53 of { F# x2_sJXc ->
           case ws_aI51 `cast` <Co:1> of { I32# x#_ajEP ->
           case leFloat# x2_sJXc (int2Float# x#_ajEP) of {
             __DEFAULT -> False;
             1# ->
               case leFloat# x1_sJX9 (int2Float# x#_ajEP) of {
                 __DEFAULT -> False;
                 1# ->
                   case geFloat# x2_sJXc 0.0# of {
                     __DEFAULT -> False;
                     1# -> tagToEnum# (geFloat# x1_sJX9 0.0#)
                   }
               }
           }
           }
           }
           }
           })
        eta_B1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
baseSteps = $w$cenumFrom1 0.0#

-- RHS size: {terms: 113, types: 28, coercions: 0, joins: 0/2}
$wdeltaFirst
  = \ ww_sJIA ww1_sJIE ->
      case ltFloat# ww1_sJIE 0.0# of {
        __DEFAULT ->
          case decodeFloat_Int# (negateFloat# ww_sJIA) of
          { (# ipv_aIBy, ipv1_aIBz #) ->
          case <# ipv1_aIBz 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (negateInteger (shiftLInteger (smallInteger ipv_aIBy) ipv1_aIBz))
              of wild_ajPM
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPM) ww_sJIA
              };
            1# ->
              let { s_sIMp = negateInt# ipv1_aIBz } in
              case ># s_sIMp 23# of {
                __DEFAULT ->
                  case doubleFromInteger
                         (negateInteger (smallInteger (uncheckedIShiftRA# ipv_aIBy s_sIMp)))
                  of wild_ajPM
                  { __DEFAULT ->
                  minusFloat# (double2Float# wild_ajPM) ww_sJIA
                  };
                1# ->
                  case <# ipv_aIBy 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJIA;
                    1# -> minusFloat# 1.0# ww_sJIA
                  }
              }
          }
          };
        1# ->
          case decodeFloat_Int# ww_sJIA of { (# ipv_aIBT, ipv1_aIBU #) ->
          case <# ipv1_aIBU 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (shiftLInteger (smallInteger ipv_aIBT) ipv1_aIBU)
              of wild_ajPM
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPM) ww_sJIA
              };
            1# ->
              let { s_sIMr = negateInt# ipv1_aIBU } in
              case ># s_sIMr 23# of {
                __DEFAULT ->
                  minusFloat#
                    (double2Float# (int2Double# (uncheckedIShiftRA# ipv_aIBT s_sIMr)))
                    ww_sJIA;
                1# ->
                  case <# ipv_aIBT 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJIA;
                    1# -> minusFloat# -1.0# ww_sJIA
                  }
              }
          }
          }
      }

-- RHS size: {terms: 15, types: 7, coercions: 0, joins: 0/0}
deltaFirst
  = \ w_sJIw w1_sJIx ->
      case w_sJIw of { F# ww1_sJIA ->
      case w1_sJIx of { F# ww3_sJIE ->
      case $wdeltaFirst ww1_sJIA ww3_sJIE of ww4_sJII { __DEFAULT ->
      F# ww4_sJII
      }
      }
      }

-- RHS size: {terms: 86, types: 60, coercions: 0, joins: 0/3}
xRayGridIntersections
  = \ p_aI3o r_aI3p ->
      let {
        nr_sIMj
          = $wnormalize
              $fFloatingFloat $fMetricV2 $fEpsilonFloat_$cnearZero r_aI3p } in
      let {
        firstStep_sIMi
          = case p_aI3o of { V2 a1_aIzh b_aIzi ->
            case a1_aIzh of { F# ww1_sJXf ->
            case nr_sIMj of { V2 a2_XIAy b1_XIAA ->
            case a2_XIAy of { F# ww3_sJXi ->
            case $wdeltaFirst ww1_sJXf ww3_sJXi of ww4_sJII { __DEFAULT ->
            F# (fabsFloat# ww4_sJII)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case p_aI3o of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJXr ->
                     case b1_aIzE of { F# x1_sJXu ->
                     case nr_sIMj of { V2 a2_XICG b2_XICI ->
                     case a2_XICG of { F# y1_sJXl ->
                     case b2_XICI of { F# y2_sJXo ->
                     case firstStep_sIMi of { F# x2_ajOn ->
                     case y_a9mO of { F# y3_ajOr ->
                     case divideFloat# (plusFloat# x2_ajOn y3_ajOr) (fabsFloat# y1_sJXl)
                     of wild9_aICV
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sJXr (timesFloat# wild9_aICV y1_sJXl)))
                       (F# (plusFloat# x1_sJXu (timesFloat# wild9_aICV y2_sJXo)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI baseSteps

-- RHS size: {terms: 86, types: 60, coercions: 0, joins: 0/3}
yRayGridIntersections
  = \ p_aI4j r_aI4k ->
      let {
        nr_sIMb
          = $wnormalize
              $fFloatingFloat $fMetricV2 $fEpsilonFloat_$cnearZero r_aI4k } in
      let {
        firstStep_sIMa
          = case p_aI4j of { V2 a1_aIAc b_aIAd ->
            case b_aIAd of { F# ww1_sJXx ->
            case nr_sIMb of { V2 a2_XIBu b1_XIBw ->
            case b1_XIBw of { F# ww3_sJXA ->
            case $wdeltaFirst ww1_sJXx ww3_sJXA of ww4_sJII { __DEFAULT ->
            F# (fabsFloat# ww4_sJII)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case p_aI4j of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJXJ ->
                     case b1_aIzE of { F# x1_sJXM ->
                     case nr_sIMb of { V2 a2_XICM b2_XICO ->
                     case a2_XICM of { F# y1_sJXD ->
                     case b2_XICO of { F# y2_sJXG ->
                     case firstStep_sIMa of { F# x2_ajOn ->
                     case y_a9mO of { F# y3_ajOr ->
                     case divideFloat# (plusFloat# x2_ajOn y3_ajOr) (fabsFloat# y2_sJXG)
                     of wild9_aICV
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sJXJ (timesFloat# wild9_aICV y1_sJXD)))
                       (F# (plusFloat# x1_sJXM (timesFloat# wild9_aICV y2_sJXG)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI baseSteps

-- RHS size: {terms: 95, types: 37, coercions: 0, joins: 1/1}
$wepsilonBump
  = \ w_sJJ0 w1_sJJ1 ->
      (# w1_sJJ1,
         case w1_sJJ1 of { V2 a1_aIzh b_aIzi ->
         case a1_aIzh of { F# x_sJXP ->
         case b_aIzi of { F# x1_sJXY ->
         case w_sJJ0 of { V2 a2_aIzD b1_aIzE ->
         case a2_aIzD of { F# x2_sJXS ->
         case b1_aIzE of { F# x3_sJXV ->
         join {
           $w$j_sJIZ ww_sJIX
             = case gtFloat# x3_sJXV 0.0# of {
                 __DEFAULT ->
                   case ltFloat# x3_sJXV 0.0# of {
                     __DEFAULT ->
                       V2
                         (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                         (I#
                            (float2Int# (plusFloat# x1_sJXY (timesFloat# 1.0e-5# x3_sJXV))));
                     1# ->
                       V2
                         (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                         (I# (float2Int# (plusFloat# x1_sJXY -1.0e-5#)))
                   };
                 1# ->
                   V2
                     (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                     (I# (float2Int# (plusFloat# x1_sJXY 1.0e-5#)))
               } } in
         case gtFloat# x2_sJXS 0.0# of {
           __DEFAULT ->
             case ltFloat# x2_sJXS 0.0# of {
               __DEFAULT -> jump $w$j_sJIZ x2_sJXS;
               1# -> jump $w$j_sJIZ -1.0#
             };
           1# -> jump $w$j_sJIZ 1.0#
         }
         }
         }
         }
         }
         }
         } #)

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
epsilonBump
  = \ w_sJJ0 w1_sJJ1 ->
      case $wepsilonBump w_sJJ0 w1_sJJ1 of { (# ww1_sJKH, ww2_sJKI #) ->
      (ww1_sJKH, ww2_sJKI)
      }

Rec {
-- RHS size: {terms: 56, types: 67, coercions: 1, joins: 0/0}
$wsampleWalkRayPaths
  = \ w_sJJ6 w1_sJJ8 w2_sJJ9 ->
      case w2_sJJ9 of {
        [] -> Nothing;
        : step_aI4R path_aI4S ->
          case $wepsilonBump w1_sJJ8 step_aI4R of
          { (# ww1_sJKH, ww2_sJKI #) ->
          case ww2_sJKI of wild1_X2H { V2 x1_aCJs y_aCJt ->
          case x1_aCJs of { I# ww15_sJY7 ->
          case y_aCJt of { I# ww17_sJYa ->
          case w_sJJ6 of ww3_sFtB { WorldTiles ww4_sFtC ww5_sFtS ->
          case ww4_sFtC of { Array ww7_sFtF ww8_sFtK ww9_sFtP ww10_sFtQ ->
          case ww7_sFtF of { I# ww12_sJY1 ->
          case ww8_sFtK of { I# ww20_sJY4 ->
          case ww5_sFtS `cast` <Co:1> of { I32# ww22_sFtV ->
          case $waccessMap
                 ww12_sJY1
                 ww20_sJY4
                 ww9_sFtP
                 ww10_sFtQ
                 ww22_sFtV
                 ww15_sJY7
                 ww17_sJYa
          of {
            __DEFAULT -> $wsampleWalkRayPaths ww3_sFtB w1_sJJ8 path_aI4S;
            FW -> Just (ww1_sJKH, wild1_X2H)
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
sampleWalkRayPaths
  = \ w_sJJ6 _ w2_sJJ8 w3_sJJ9 ->
      $wsampleWalkRayPaths w_sJJ6 w2_sJJ8 w3_sJJ9

Rec {
-- RHS size: {terms: 45, types: 35, coercions: 0, joins: 0/0}
mergeIntersections
  = \ playerpos_aI4B ds_dIuQ ds1_dIuR ->
      case ds_dIuQ of wild_XB {
        [] -> ds1_dIuR;
        : x_aI4C xs_aI4D ->
          case ds1_dIuR of wild1_Xe {
            [] -> wild_XB;
            : y_aI4E ys_aI4F ->
              case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4B x_aI4C
              of
              { F# x1_aIxp ->
              case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4B y_aI4E
              of
              { F# y1_aIxt ->
              case ltFloat# x1_aIxp y1_aIxt of {
                __DEFAULT ->
                  : y_aI4E (mergeIntersections playerpos_aI4B wild_XB ys_aI4F);
                1# -> : x_aI4C (mergeIntersections playerpos_aI4B xs_aI4D wild1_Xe)
              }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 28, types: 16, coercions: 4, joins: 0/0}
shootRay'
  = \ ws_aI4r playerpos_aI4s direction_aI4t ->
      map
        (epsilonBump direction_aI4t)
        (mergeIntersections
           playerpos_aI4s
           (clipWorld
              (case ws_aI4r of { I# x#_ajDu ->
               (I32# (narrow32Int# x#_ajDu)) `cast` <Co:2>
               })
              (xRayGridIntersections playerpos_aI4s direction_aI4t))
           (clipWorld
              (case ws_aI4r of { I# x#_ajDu ->
               (I32# (narrow32Int# x#_ajDu)) `cast` <Co:2>
               })
              (yRayGridIntersections playerpos_aI4s direction_aI4t)))

-- RHS size: {terms: 24, types: 15, coercions: 0, joins: 0/0}
rayCast'
  = \ world_aI4W p_aI4X r_aI4Y ->
      $wsampleWalkRayPaths
        world_aI4W
        r_aI4Y
        (mergeIntersections
           p_aI4X
           (clipWorld
              (case world_aI4W of { WorldTiles ds1_dEkB ds2_dEkC -> ds2_dEkC })
              (xRayGridIntersections p_aI4X r_aI4Y))
           (clipWorld
              (case world_aI4W of { WorldTiles ds1_dEkB ds2_dEkC -> ds2_dEkC })
              (yRayGridIntersections p_aI4X r_aI4Y)))

-- RHS size: {terms: 25, types: 13, coercions: 0, joins: 0/0}
playerPointOrdering
  = \ playerpos_aI4L x_aI4M y_aI4N ->
      case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4L x_aI4M
      of
      { F# x1_aIxp ->
      case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4L y_aI4N
      of
      { F# y1_aIxt ->
      case ltFloat# x1_aIxp y1_aIxt of {
        __DEFAULT -> GT;
        1# -> LT
      }
      }
      }

-- RHS size: {terms: 8, types: 10, coercions: 0, joins: 0/0}
mergeIntersections2
  = \ playerpos_aI4I xs_aI4J ys_aI4K ->
      mergeBy (playerPointOrdering playerpos_aI4I) xs_aI4J ys_aI4K

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Engine.Ray"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

Rec {
-- RHS size: {terms: 74, types: 54, coercions: 1, joins: 0/0}
wallSamples
  = \ gs_aI5A ds_dIm4 ->
      case ds_dIm4 of {
        [] -> [];
        : r_aI5C rs_aI5D ->
          case r_aI5C of { V2 ww1_sFuP ww2_sFuU ->
          case ww1_sFuP of { I# ww4_sJYd ->
          case ww2_sFuU of { I# ww6_sJYg ->
          case >=# ww4_sJYd 0# of {
            __DEFAULT -> [];
            1# ->
              case >=# ww6_sJYg 0# of {
                __DEFAULT -> [];
                1# ->
                  case gs_aI5A of wild1_X1s
                  { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
                  case ds2_dEkk of { WorldTiles ds5_dEkB ds6_dEkC ->
                  case ds6_dEkC `cast` <Co:1> of { I32# x#_ajEP ->
                  case <# ww4_sJYd x#_ajEP of {
                    __DEFAULT -> [];
                    1# ->
                      case <# ww6_sJYg x#_ajEP of {
                        __DEFAULT -> [];
                        1# ->
                          : (case ds5_dEkB of
                             { Array ww8_sFtF ww9_sFtK ww10_sFtP ww11_sFtQ ->
                             case ww8_sFtF of { I# ww13_sJYj ->
                             case ww9_sFtK of { I# ww15_sJYm ->
                             $waccessMap
                               ww13_sJYj ww15_sJYm ww10_sFtP ww11_sFtQ x#_ajEP ww4_sJYd ww6_sJYg
                             }
                             }
                             })
                            (wallSamples wild1_X1s rs_aI5D)
                      }
                  }
                  }
                  }
                  }
              }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep1 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep2 = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep3 = :% cameraPlaneSweep1 cameraPlaneSweep1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep5 = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep4 = :% cameraPlaneSweep5 cameraPlaneSweep1

-- RHS size: {terms: 46, types: 24, coercions: 2, joins: 0/2}
cameraPlaneSweep_$scameraPlaneSweep
  = \ eta_B1 ->
      let {
        lvl_sIQl
          = case eta_B1 `cast` <Co:1> of { I32# x#_ajEP ->
            F# (int2Float# x#_ajEP)
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case y_a9mO of { F# x_aICP ->
                     case lvl_sIQl of { F# y1_aICT ->
                     case divideFloat# x_aICP y1_aICT of wild3_aICV { __DEFAULT ->
                     F# (minusFloat# (plusFloat# wild3_aICV wild3_aICV) 1.0#)
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI
        ($w$cenumFromTo1
           0.0#
           (case eta_B1 `cast` <Co:1> of { I32# x#_ajEP ->
            F# (minusFloat# (int2Float# x#_ajEP) 1.0#)
            }))

-- RHS size: {terms: 56, types: 60, coercions: 0, joins: 0/5}
$wcameraPlaneSweep
  = \ @ a_sJJs @ a1_sJJt w_sJJu w1_sJJv ww_sJJG w2_sJJx ->
      let { lvl_sIQx = fromRational w1_sJJv cameraPlaneSweep4 } in
      let { lvl1_sIQC = fromRational w1_sJJv cameraPlaneSweep3 } in
      let { $dNum_sIMt = $p1Fractional w1_sJJv } in
      let {
        lvl2_sIQy
          = case $dNum_sIMt of
            { C:Num ww2_ajwD ww3_ajwE ww4_ajwF ww5_ajwG ww6_ajwH ww7_ajwI
                    ww8_ajwJ ->
            ww8_ajwJ (toInteger w_sJJu w2_sJJx)
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (- $dNum_sIMt
                       (* $dNum_sIMt lvl_sIQx (/ w1_sJJv y_a9mO lvl2_sIQy))
                       lvl1_sIQC)
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI
        (ww_sJJG
           (fromInteger $dNum_sIMt cameraPlaneSweep2)
           (- $dNum_sIMt
              lvl2_sIQy
              (fromInteger $dNum_sIMt cameraPlaneSweep1)))

-- RHS size: {terms: 14, types: 39, coercions: 0, joins: 0/0}
cameraPlaneSweep
  = \ @ a_sJJs @ a1_sJJt w_sJJu w1_sJJv w2_sJJw w3_sJJx ->
      case w2_sJJw of
      { C:Enum ww1_sJJA ww2_sJJB ww3_sJJC ww4_sJJD ww5_sJJE ww6_sJJF
               ww7_sJJG ww8_sJJH ->
      $wcameraPlaneSweep w_sJJu w1_sJJv ww7_sJJG w3_sJJx
      }

-- RHS size: {terms: 52, types: 44, coercions: 0, joins: 0/1}
rayHeads
  = \ screenWidth_aI5a player_aI5b ->
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case player_aI5b of { PVars ds1_dEkI ds2_dEkJ ds3_dEkK ->
                     case ds2_dEkJ of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJYv ->
                     case b1_aIzE of { F# x1_sJYy ->
                     case ds3_dEkK of { V2 a2_XICW b2_XICY ->
                     case a2_XICW of { F# x2_sJYp ->
                     case b2_XICY of { F# x3_sJYs ->
                     case y_a9mO of { F# y1_ajNn ->
                     V2
                       (F# (plusFloat# x_sJYv (timesFloat# x2_sJYp y1_ajNn)))
                       (F# (plusFloat# x1_sJYy (timesFloat# x3_sJYs y1_ajNn)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI (cameraPlaneSweep_$scameraPlaneSweep screenWidth_aI5a)

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/0}
genRays
  = \ screenWidth_aI55 player_aI56 worldSize_aI57 ->
      map
        (shootRay'
           worldSize_aI57
           (case player_aI56 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
            ds1_dEkE
            }))
        (rayHeads screenWidth_aI55 player_aI56)

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/0}
rayCastScreen
  = \ screenWidth_aI5d player_aI5e world_aI5f ->
      map
        (rayCast'
           world_aI5f
           (case player_aI5e of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
            ds1_dEkE
            }))
        (rayHeads screenWidth_aI5d player_aI5e)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
epsilon = F# 1.0e-5#

Rec {
-- RHS size: {terms: 108, types: 78, coercions: 0, joins: 2/2}
$w$sgo4
  = \ w_sJJN ww_sJJV ww1_sJK0 w1_sJJP ->
      case w1_sJJP of wild_aIOn {
        Bin dt_aIOp y_aIOq l_aIOr r_aIOs ->
          case y_aIOq of wild1_sJYM { V2 b1_sJYN b2_sJYO ->
          case b1_sJYN of { I# y#_sJYR ->
          case b2_sJYO of { I# y#1_sJYU ->
          join {
            $j_sITp
              = case $w$sgo4 w_sJJN ww_sJJV ww1_sJK0 l_aIOr of l'_aIOx
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aIOx l_aIOr of {
                  __DEFAULT -> balanceL wild1_sJYM l'_aIOx r_aIOs;
                  1# -> wild_aIOn
                }
                } } in
          case <# ww_sJJV y#_sJYR of {
            __DEFAULT ->
              join {
                $j1_sITr
                  = case $w$sgo4 w_sJJN ww_sJJV ww1_sJK0 r_aIOs of r'_aIOF
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aIOF r_aIOs of {
                      __DEFAULT -> balanceR wild1_sJYM l_aIOr r'_aIOF;
                      1# -> wild_aIOn
                    }
                    } } in
              case ==# ww_sJJV y#_sJYR of {
                __DEFAULT -> jump $j1_sITr;
                1# ->
                  case <# ww1_sJK0 y#1_sJYU of {
                    __DEFAULT ->
                      case ==# ww1_sJK0 y#1_sJYU of {
                        __DEFAULT -> jump $j1_sITr;
                        1# ->
                          case lazy w_sJJN of wild2_aIOB { V2 ipv_sITf ipv1_sITg ->
                          case reallyUnsafePtrEquality# w_sJJN wild1_sJYM of {
                            __DEFAULT -> Bin dt_aIOp wild2_aIOB l_aIOr r_aIOs;
                            1# -> wild_aIOn
                          }
                          }
                      };
                    1# -> jump $j_sITp
                  }
              };
            1# -> jump $j_sITp
          }
          }
          }
          };
        Tip ->
          case lazy w_sJJN of dt_XIms { V2 ipv_sITD ipv1_sITE ->
          Bin 1# dt_XIms Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 183, types: 328, coercions: 0, joins: 1/1}
$wcreate_rK8G
  = \ ww_sJK8 w_sJK5 ->
      case w_sJK5 of wild6_aInb {
        [] -> (# Tip, [], [] #);
        : ipv8_aIne ipv9_aInf ->
          case ww_sJK8 of wild_X21 {
            __DEFAULT ->
              case $wcreate_rK8G (uncheckedIShiftRA# wild_X21 1#) wild6_aInb of
              { (# ww2_sJKK, ww3_sJKL, ww4_sJKM #) ->
              case ww3_sJKL of wild9_aIsB {
                [] -> (# ww2_sJKK, [], ww4_sJKM #);
                : y_aIsF ds11_aIsG ->
                  case ds11_aIsG of wild10_aIsI {
                    [] -> (# insertMax y_aIsF ww2_sJKK, [], ww4_sJKM #);
                    : ipv10_aIsM ipv11_aIsN ->
                      case y_aIsF of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                      case a1_aIGn of { I# x#_sJZ3 ->
                      case a2_aIGo of { I# x_sJZ9 ->
                      case ipv10_aIsM of { V2 b1_aIGs b2_aIGt ->
                      case b1_aIGs of { I# y#_sJZ6 ->
                      case b2_aIGt of { I# y1_sJZc ->
                      join {
                        $j_sISj
                          = case $wcreate_rK8G (uncheckedIShiftRA# wild_X21 1#) wild10_aIsI
                            of
                            { (# ww6_XJNn, ww7_XJNp, ww8_XJNr #) ->
                            (# link wild1_aIGl ww2_sJKK ww6_XJNn, ww7_XJNp, ww8_XJNr #)
                            } } in
                      case <# x#_sJZ3 y#_sJZ6 of {
                        __DEFAULT ->
                          case ==# x#_sJZ3 y#_sJZ6 of {
                            __DEFAULT -> (# ww2_sJKK, [], wild9_aIsB #);
                            1# ->
                              case <# x_sJZ9 y1_sJZc of {
                                __DEFAULT -> (# ww2_sJKK, [], wild9_aIsB #);
                                1# -> jump $j_sISj
                              }
                          };
                        1# -> jump $j_sISj
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                  }
              }
              };
            1# ->
              case ipv9_aInf of wild8_aIt5 {
                [] ->
                  (# case ipv8_aIne of dt_XIms { V2 ipv_sISo ipv1_sISp ->
                     Bin 1# dt_XIms Tip Tip
                     },
                     [], [] #);
                : y_aIt9 ds8_aIta ->
                  case ipv8_aIne of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                  case a1_aIGn of { I# x#_sJZf ->
                  case a2_aIGo of { I# x_sJZl ->
                  case y_aIt9 of { V2 b1_aIGs b2_aIGt ->
                  case b1_aIGs of { I# y#_sJZi ->
                  case b2_aIGt of { I# y1_sJZo ->
                  case <# x#_sJZf y#_sJZi of {
                    __DEFAULT ->
                      case ==# x#_sJZf y#_sJZi of {
                        __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                        1# ->
                          case <# x_sJZl y1_sJZo of {
                            __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                            1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                          }
                      };
                    1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                  }
                  }
                  }
                  }
                  }
                  }
                  }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go_rK8H
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZV ->
          case ww2_sJJX of { I# ww6_sJZY ->
          go_rK8H ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZV ww6_sJZY eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go1_rK8I
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZH ->
          case ww2_sJJX of { I# ww6_sJZK ->
          go1_rK8I ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZH ww6_sJZK eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go2_rK8J
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZz ->
          case ww2_sJJX of { I# ww6_sJZC ->
          go2_rK8J ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZz ww6_sJZC eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 84, types: 81, coercions: 0, joins: 1/1}
$wgo4
  = \ ww_sJKp w_sJKl w1_sJKm ->
      case w1_sJKm of wild3_aImM {
        [] -> w_sJKl;
        : ipv3_aImQ ipv4_aImR ->
          case ipv4_aImR of wild4_aImT {
            [] -> insertMax ipv3_aImQ w_sJKl;
            : ipv5_aImY ipv6_aImZ ->
              case ipv3_aImQ of wild_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sJZr ->
              case a2_aIGo of { I# x_sJZN ->
              case ipv5_aImY of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sJZu ->
              case b2_aIGt of { I# y_sJZQ ->
              join {
                $j_sISJ
                  = case $wcreate_rK8G ww_sJKp wild4_aImT of
                    { (# ww2_sJKK, ww3_sJKL, ww4_sJKM #) ->
                    case ww4_sJKM of wild8_aItn {
                      [] ->
                        $wgo4
                          (uncheckedIShiftL# ww_sJKp 1#)
                          (link wild_aIGl w_sJKl ww2_sJKK)
                          ww3_sJKL;
                      : ipv7_aItu ipv8_aItv ->
                        go2_rK8J wild8_aItn (link wild_aIGl w_sJKl ww2_sJKK)
                    }
                    } } in
              case <# x#_sJZr y#_sJZu of {
                __DEFAULT ->
                  case ==# x#_sJZr y#_sJZu of {
                    __DEFAULT -> go1_rK8I wild3_aImM w_sJKl;
                    1# ->
                      case <# x_sJZN y_sJZQ of {
                        __DEFAULT -> go_rK8H wild3_aImM w_sJKl;
                        1# -> jump $j_sISJ
                      }
                  };
                1# -> jump $j_sISJ
              }
              }
              }
              }
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
$sfromList_go
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sK09 ->
          case ww2_sJJX of { I# ww6_sK0c ->
          $sfromList_go ys_a9mP ($w$sgo4 ww_sJJR ww4_sK09 ww6_sK0c eta_B1)
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 84, types: 74, coercions: 0, joins: 0/0}
$sfromList
  = \ ds_aImf ->
      case ds_aImf of {
        [] -> Tip;
        : x_aImr ds1_aIms ->
          case ds1_aIms of wild1_aImu {
            [] ->
              case x_aImr of dt_XIms { V2 ipv_sISQ ipv1_sISR ->
              Bin 1# dt_XIms Tip Tip
              };
            : ipv_aImy ipv1_aImz ->
              case x_aImr of wild2_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sK01 ->
              case a2_aIGo of { I# x1_sK0f ->
              case ipv_aImy of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sK04 ->
              case b2_aIGt of { I# y_sK0i ->
              case <# x#_sK01 y#_sK04 of {
                __DEFAULT ->
                  case ==# x#_sK01 y#_sK04 of {
                    __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                    1# ->
                      case <# x1_sK0f y_sK0i of {
                        __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                        1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
                      }
                  };
                1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
              }
              }
              }
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
visitedPositions1 = $sfromList []

-- RHS size: {terms: 44, types: 44, coercions: 0, joins: 2/3}
visitedPositions
  = \ gs_aI5g steps_aI5h ->
      let { rayVisitedIndexes_sIM3 = map snd steps_aI5h } in
      join {
        $j_sJEz y_atEF
          = case <# 0# y_atEF of {
              __DEFAULT -> visitedPositions1;
              1# -> $sfromList ($wunsafeTake y_atEF rayVisitedIndexes_sIM3)
            } } in
      joinrec {
        $wgo1_sJKE w_sJKy ww_sJKC
          = case w_sJKy of {
              [] -> jump $j_sJEz ww_sJKC;
              : y_a9mO ys_a9mP ->
                case y_a9mO of {
                  __DEFAULT -> jump $wgo1_sJKE ys_a9mP (+# ww_sJKC 1#);
                  FW -> jump $j_sJEz ww_sJKC
                }
            }; } in
      jump $wgo1_sJKE (wallSamples gs_aI5g rayVisitedIndexes_sIM3) 0#


------ Local rules for imported ids --------
"SPEC cameraPlaneSweep @ CInt @ Float"
    forall $dEnum_sIMw $dFractional_sIMv $dIntegral_sIMu.
      cameraPlaneSweep $dIntegral_sIMu $dFractional_sIMv $dEnum_sIMw
      = cameraPlaneSweep_$scameraPlaneSweep
"SPEC/Obelisk.Engine.Ray fromList @ (V2 Int)"
    forall $dOrd_sINz. fromList $dOrd_sINz = $sfromList