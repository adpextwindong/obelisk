[ 9 of 17] Compiling Obelisk.Engine.Ray ( src\Obelisk\Engine\Ray.hs, C:\cygwin64\home\takumi\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Engine\Ray.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 1,873, types: 1,815, coercions: 6, joins: 7/46}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lenPassthrough1 = I# 0#

Rec {
-- RHS size: {terms: 19, types: 9, coercions: 0, joins: 0/0}
$wgo_rKm5
  = \ w_sJMx ww_sJMB ->
      case w_sJMx of {
        [] -> I# ww_sJMB;
        : y_a9mw ys_a9mx ->
          case y_a9mw of {
            __DEFAULT -> $wgo_rKm5 ys_a9mx (+# ww_sJMB 1#);
            FW -> I# ww_sJMB
          }
      }
end Rec }

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lenPassthrough = \ x_a9kc -> $wgo_rKm5 x_a9kc 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
baseSteps = $w$cenumFrom1 0.0#

-- RHS size: {terms: 85, types: 25, coercions: 0, joins: 0/5}
$wbaseStepsBounded
  = \ w_sJME ww_sJMJ ww1_sJMN ->
      case gtFloat# ww1_sJMN 0.0# of {
        __DEFAULT ->
          let { n_aIxj = float2Int# ww_sJMJ } in
          case ltFloat# ww_sJMJ (int2Float# n_aIxj) of {
            __DEFAULT ->
              case <# 0# n_aIxj of {
                __DEFAULT -> [];
                1# -> $wunsafeTake n_aIxj baseSteps
              };
            1# ->
              let { y_atDN = -# n_aIxj 1# } in
              case <# 0# y_atDN of {
                __DEFAULT -> [];
                1# -> $wunsafeTake y_atDN baseSteps
              }
          };
        1# ->
          case w_sJME of { I# i_ajT5 ->
          let { x_aIxk = minusFloat# (int2Float# i_ajT5) ww_sJMJ } in
          let { n_sIIf = float2Int# x_aIxk } in
          case ltFloat# x_aIxk (int2Float# n_sIIf) of {
            __DEFAULT ->
              case <# 0# n_sIIf of {
                __DEFAULT -> [];
                1# -> $wunsafeTake n_sIIf baseSteps
              };
            1# ->
              let { y_atDN = -# n_sIIf 1# } in
              case <# 0# y_atDN of {
                __DEFAULT -> [];
                1# -> $wunsafeTake y_atDN baseSteps
              }
          }
          }
      }

-- RHS size: {terms: 13, types: 7, coercions: 0, joins: 0/0}
baseStepsBounded
  = \ w_sJME w1_sJMF w2_sJMG ->
      case w1_sJMF of { F# ww1_sJMJ ->
      case w2_sJMG of { F# ww3_sJMN ->
      $wbaseStepsBounded w_sJME ww1_sJMJ ww3_sJMN
      }
      }

Rec {
-- RHS size: {terms: 90, types: 57, coercions: 0, joins: 0/4}
mergeIntersections
  = \ playerpos_aI1c ds_dIr2 ds1_dIr3 ->
      case ds_dIr2 of wild_XE {
        [] -> ds1_dIr3;
        : x_aI1d xs_aI1e ->
          case ds1_dIr3 of wild1_Xi {
            [] -> wild_XE;
            : y_aI1f ys_aI1g ->
              case playerpos_aI1c of ww8_aIzM { V2 ww9_aIzO ww10_aIzP ->
              case ww9_aIzO of { F# x1_sK6z ->
              case ww10_aIzP of { F# x2_sK6C ->
              case x_aI1d of ww11_aIzR { V2 ww12_aIzT ww13_aIzU ->
              case ww12_aIzT of { F# x3_sK6t ->
              case ww13_aIzU of { F# x4_sK6w ->
              case y_aI1f of ww1_XIDP { V2 ww2_XIDT ww3_XIDV ->
              case ww2_XIDT of { F# x5_sK6F ->
              case ww3_XIDV of { F# x6_sK6I ->
              let { dt2_sIT9 = plusFloat# x1_sK6z (negateFloat# x3_sK6t) } in
              let { dt3_sITb = plusFloat# x2_sK6C (negateFloat# x4_sK6w) } in
              let { dt1_sITh = plusFloat# x1_sK6z (negateFloat# x5_sK6F) } in
              let { dt5_sITi = plusFloat# x2_sK6C (negateFloat# x6_sK6I) } in
              case ltFloat#
                     (plusFloat#
                        (timesFloat# dt2_sIT9 dt2_sIT9) (timesFloat# dt3_sITb dt3_sITb))
                     (plusFloat#
                        (timesFloat# dt1_sITh dt1_sITh) (timesFloat# dt5_sITi dt5_sITi))
              of {
                __DEFAULT ->
                  : ww1_XIDP (mergeIntersections ww8_aIzM wild_XE ys_aI1g);
                1# -> : ww11_aIzR (mergeIntersections ww8_aIzM xs_aI1e wild1_Xi)
              }
              }
              }
              }
              }
              }
              }
              }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 55, types: 15, coercions: 0, joins: 0/3}
upperBound
  = \ w_sJMT w1_sJMU w2_sJMV ->
      case w1_sJMU of { F# ww1_sJMY ->
      case w2_sJMV of { F# ww3_sJN2 ->
      case gtFloat# ww3_sJN2 0.0# of {
        __DEFAULT ->
          let { n_aIxj = float2Int# ww1_sJMY } in
          case ltFloat# ww1_sJMY (int2Float# n_aIxj) of {
            __DEFAULT -> I# n_aIxj;
            1# -> I# (-# n_aIxj 1#)
          };
        1# ->
          case w_sJMT of { I# i_ajT5 ->
          let { x_aIxk = minusFloat# (int2Float# i_ajT5) ww1_sJMY } in
          let { n_sIIu = float2Int# x_aIxk } in
          case ltFloat# x_aIxk (int2Float# n_sIIu) of {
            __DEFAULT -> I# n_sIIu;
            1# -> I# (-# n_sIIu 1#)
          }
          }
      }
      }
      }

-- RHS size: {terms: 113, types: 28, coercions: 0, joins: 0/2}
$wdeltaFirst
  = \ ww_sJNc ww1_sJNg ->
      case ltFloat# ww1_sJNg 0.0# of {
        __DEFAULT ->
          case decodeFloat_Int# (negateFloat# ww_sJNc) of
          { (# ipv_aIwF, ipv1_aIwG #) ->
          case <# ipv1_aIwG 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (negateInteger (shiftLInteger (smallInteger ipv_aIwF) ipv1_aIwG))
              of wild_ajPu
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPu) ww_sJNc
              };
            1# ->
              let { s_sIIw = negateInt# ipv1_aIwG } in
              case ># s_sIIw 23# of {
                __DEFAULT ->
                  case doubleFromInteger
                         (negateInteger (smallInteger (uncheckedIShiftRA# ipv_aIwF s_sIIw)))
                  of wild_ajPu
                  { __DEFAULT ->
                  minusFloat# (double2Float# wild_ajPu) ww_sJNc
                  };
                1# ->
                  case <# ipv_aIwF 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJNc;
                    1# -> minusFloat# 1.0# ww_sJNc
                  }
              }
          }
          };
        1# ->
          case decodeFloat_Int# ww_sJNc of { (# ipv_aIx0, ipv1_aIx1 #) ->
          case <# ipv1_aIx1 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (shiftLInteger (smallInteger ipv_aIx0) ipv1_aIx1)
              of wild_ajPu
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPu) ww_sJNc
              };
            1# ->
              let { s_sIIy = negateInt# ipv1_aIx1 } in
              case ># s_sIIy 23# of {
                __DEFAULT ->
                  minusFloat#
                    (double2Float# (int2Double# (uncheckedIShiftRA# ipv_aIx0 s_sIIy)))
                    ww_sJNc;
                1# ->
                  case <# ipv_aIx0 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJNc;
                    1# -> minusFloat# -1.0# ww_sJNc
                  }
              }
          }
          }
      }

-- RHS size: {terms: 15, types: 7, coercions: 0, joins: 0/0}
deltaFirst
  = \ w_sJN8 w1_sJN9 ->
      case w_sJN8 of { F# ww1_sJNc ->
      case w1_sJN9 of { F# ww3_sJNg ->
      case $wdeltaFirst ww1_sJNc ww3_sJNg of ww4_sJNk { __DEFAULT ->
      F# ww4_sJNk
      }
      }
      }

-- RHS size: {terms: 81, types: 58, coercions: 0, joins: 0/2}
yRayGridIntersections
  = \ p_aI0U nr_aI0V bss_aI0W ->
      let {
        firstStep_sIIo
          = case p_aI0U of { V2 a1_aIv9 b_aIva ->
            case b_aIva of { F# ww1_sK6L ->
            case nr_aI0V of { V2 a2_XIwx b1_XIwz ->
            case b1_XIwz of { F# ww3_sK6O ->
            case $wdeltaFirst ww1_sK6L ww3_sK6O of ww4_sJNk { __DEFAULT ->
            F# (fabsFloat# ww4_sJNk)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mq
          = \ ds_a9mr ->
              case ds_a9mr of {
                [] -> [];
                : y_a9mw ys_a9mx ->
                  : (case p_aI0U of { V2 a1_aIuA b1_aIuB ->
                     case a1_aIuA of { F# x_sK6X ->
                     case b1_aIuB of { F# x1_sK70 ->
                     case nr_aI0V of { V2 a2_XIxG b2_XIxI ->
                     case a2_XIxG of { F# y1_sK6R ->
                     case b2_XIxI of { F# y2_sK6U ->
                     case firstStep_sIIo of { F# x2_ajO5 ->
                     case y_a9mw of { F# y3_ajO9 ->
                     case divideFloat# (plusFloat# x2_ajO5 y3_ajO9) (fabsFloat# y2_sK6U)
                     of wild9_aIxZ
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sK6X (timesFloat# wild9_aIxZ y1_sK6R)))
                       (F# (plusFloat# x1_sK70 (timesFloat# wild9_aIxZ y2_sK6U)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mq ys_a9mx)
              }; } in
      go3_a9mq bss_aI0W

-- RHS size: {terms: 81, types: 58, coercions: 0, joins: 0/2}
xRayGridIntersections
  = \ p_aHZZ nr_aI00 bss_aI01 ->
      let {
        firstStep_sIIi
          = case p_aHZZ of { V2 a1_aIue b_aIuf ->
            case a1_aIue of { F# ww1_sK73 ->
            case nr_aI00 of { V2 a2_XIvD b1_XIvF ->
            case a2_XIvD of { F# ww3_sK76 ->
            case $wdeltaFirst ww1_sK73 ww3_sK76 of ww4_sJNk { __DEFAULT ->
            F# (fabsFloat# ww4_sJNk)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mq
          = \ ds_a9mr ->
              case ds_a9mr of {
                [] -> [];
                : y_a9mw ys_a9mx ->
                  : (case p_aHZZ of { V2 a1_aIuA b1_aIuB ->
                     case a1_aIuA of { F# x_sK7f ->
                     case b1_aIuB of { F# x1_sK7i ->
                     case nr_aI00 of { V2 a2_XIxF b2_XIxH ->
                     case a2_XIxF of { F# y1_sK79 ->
                     case b2_XIxH of { F# y2_sK7c ->
                     case firstStep_sIIi of { F# x2_ajO5 ->
                     case y_a9mw of { F# y3_ajO9 ->
                     case divideFloat# (plusFloat# x2_ajO5 y3_ajO9) (fabsFloat# y1_sK79)
                     of wild9_aIxZ
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sK7f (timesFloat# wild9_aIxZ y1_sK79)))
                       (F# (plusFloat# x1_sK7i (timesFloat# wild9_aIxZ y2_sK7c)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mq ys_a9mx)
              }; } in
      go3_a9mq bss_aI01

-- RHS size: {terms: 95, types: 37, coercions: 0, joins: 1/1}
$wepsilonBump
  = \ w_sJNE w1_sJNF ->
      (# w1_sJNF,
         case w1_sJNF of { V2 a1_aIue b_aIuf ->
         case a1_aIue of { F# x_sK7l ->
         case b_aIuf of { F# x1_sK7u ->
         case w_sJNE of { V2 a2_aIuA b1_aIuB ->
         case a2_aIuA of { F# x2_sK7o ->
         case b1_aIuB of { F# x3_sK7r ->
         join {
           $w$j_sJND ww_sJNB
             = case gtFloat# x3_sK7r 0.0# of {
                 __DEFAULT ->
                   case ltFloat# x3_sK7r 0.0# of {
                     __DEFAULT ->
                       V2
                         (I# (float2Int# (plusFloat# x_sK7l (timesFloat# 1.0e-5# ww_sJNB))))
                         (I#
                            (float2Int# (plusFloat# x1_sK7u (timesFloat# 1.0e-5# x3_sK7r))));
                     1# ->
                       V2
                         (I# (float2Int# (plusFloat# x_sK7l (timesFloat# 1.0e-5# ww_sJNB))))
                         (I# (float2Int# (plusFloat# x1_sK7u -1.0e-5#)))
                   };
                 1# ->
                   V2
                     (I# (float2Int# (plusFloat# x_sK7l (timesFloat# 1.0e-5# ww_sJNB))))
                     (I# (float2Int# (plusFloat# x1_sK7u 1.0e-5#)))
               } } in
         case gtFloat# x2_sK7o 0.0# of {
           __DEFAULT ->
             case ltFloat# x2_sK7o 0.0# of {
               __DEFAULT -> jump $w$j_sJND x2_sK7o;
               1# -> jump $w$j_sJND -1.0#
             };
           1# -> jump $w$j_sJND 1.0#
         }
         }
         }
         }
         }
         }
         } #)

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
epsilonBump
  = \ w_sJNE w1_sJNF ->
      case $wepsilonBump w_sJNE w1_sJNF of { (# ww1_sJQ7, ww2_sJQ8 #) ->
      (ww1_sJQ7, ww2_sJQ8)
      }

-- RHS size: {terms: 51, types: 39, coercions: 0, joins: 0/6}
$wshootRay'
  = \ w_sJNK ww_sJNS ww1_sJNX ww2_sJO5 ww3_sJOa ->
      let { direction_sJS8 = F# ww3_sJOa } in
      let { direction1_sJS7 = F# ww2_sJO5 } in
      let { direction2_aI14 = V2 direction1_sJS7 direction_sJS8 } in
      let { playerpos_sJS6 = F# ww1_sJNX } in
      let { playerpos1_sJS5 = F# ww_sJNS } in
      let { playerpos2_aI13 = V2 playerpos1_sJS5 playerpos_sJS6 } in
      map
        (\ w1_sJNF ->
           case $wepsilonBump direction2_aI14 w1_sJNF of
           { (# ww5_sJQ7, ww6_sJQ8 #) ->
           (ww5_sJQ7, ww6_sJQ8)
           })
        (mergeIntersections
           playerpos2_aI13
           (xRayGridIntersections
              playerpos2_aI13
              direction2_aI14
              ($wbaseStepsBounded w_sJNK ww_sJNS ww2_sJO5))
           (yRayGridIntersections
              playerpos2_aI13
              direction2_aI14
              ($wbaseStepsBounded w_sJNK ww1_sJNX ww3_sJOa)))

-- RHS size: {terms: 27, types: 21, coercions: 0, joins: 0/0}
shootRay'
  = \ w_sJNK w1_sJNL w2_sJNM ->
      case w1_sJNL of { V2 ww1_sJNP ww2_sJNU ->
      case ww1_sJNP of { F# ww4_sK7x ->
      case ww2_sJNU of { F# ww6_sK7A ->
      case w2_sJNM of { V2 ww8_sJO2 ww9_sJO7 ->
      case ww8_sJO2 of { F# ww11_sK7D ->
      case ww9_sJO7 of { F# ww13_sK7G ->
      $wshootRay' w_sJNK ww4_sK7x ww6_sK7A ww11_sK7D ww13_sK7G
      }
      }
      }
      }
      }
      }

Rec {
-- RHS size: {terms: 56, types: 67, coercions: 1, joins: 0/0}
$wsampleWalkRayPaths
  = \ w_sJOe w1_sJOg w2_sJOh ->
      case w2_sJOh of {
        [] -> Nothing;
        : step_aI1m path_aI1n ->
          case $wepsilonBump w1_sJOg step_aI1m of
          { (# ww1_sJQ7, ww2_sJQ8 #) ->
          case ww2_sJQ8 of wild1_X2H { V2 x1_aCHt y_aCHu ->
          case x1_aCHt of { I# ww15_sK7P ->
          case y_aCHu of { I# ww17_sK7S ->
          case w_sJOe of ww3_sFs7 { WorldTiles ww4_sFs8 ww5_sFso ->
          case ww4_sFs8 of { Array ww7_sFsb ww8_sFsg ww9_sFsl ww10_sFsm ->
          case ww7_sFsb of { I# ww12_sK7J ->
          case ww8_sFsg of { I# ww20_sK7M ->
          case ww5_sFso `cast` <Co:1> of { I32# ww22_sFsr ->
          case $waccessMap
                 ww12_sK7J
                 ww20_sK7M
                 ww9_sFsl
                 ww10_sFsm
                 ww22_sFsr
                 ww15_sK7P
                 ww17_sK7S
          of {
            __DEFAULT -> $wsampleWalkRayPaths ww3_sFs7 w1_sJOg path_aI1n;
            FW -> Just (ww1_sJQ7, wild1_X2H)
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
sampleWalkRayPaths
  = \ w_sJOe _ w2_sJOg w3_sJOh ->
      $wsampleWalkRayPaths w_sJOe w2_sJOg w3_sJOh

-- RHS size: {terms: 58, types: 29, coercions: 2, joins: 0/6}
$wrayCast'
  = \ w_sJOj ww_sJOr ww1_sJOw ww2_sJOE ww3_sJOJ ->
      let { r_sJSA = F# ww3_sJOJ } in
      let { r1_sJSz = F# ww2_sJOE } in
      let { r2_aI1t = V2 r1_sJSz r_sJSA } in
      let { p_sJSy = F# ww1_sJOw } in
      let { p1_sJSx = F# ww_sJOr } in
      let { p2_aI1s = V2 p1_sJSx p_sJSy } in
      $wsampleWalkRayPaths
        w_sJOj
        r2_aI1t
        (mergeIntersections
           p2_aI1s
           (xRayGridIntersections
              p2_aI1s
              r2_aI1t
              ($wbaseStepsBounded
                 (case w_sJOj of { WorldTiles ds1_dEj7 ds2_dEj8 ->
                  case ds2_dEj8 `cast` <Co:1> of { I32# x#_ajEx -> I# x#_ajEx }
                  })
                 ww_sJOr
                 ww2_sJOE))
           (yRayGridIntersections
              p2_aI1s
              r2_aI1t
              ($wbaseStepsBounded
                 (case w_sJOj of { WorldTiles ds1_dEj7 ds2_dEj8 ->
                  case ds2_dEj8 `cast` <Co:1> of { I32# x#_ajEx -> I# x#_ajEx }
                  })
                 ww1_sJOw
                 ww3_sJOJ)))

-- RHS size: {terms: 27, types: 21, coercions: 0, joins: 0/0}
rayCast'
  = \ w_sJOj w1_sJOk w2_sJOl ->
      case w1_sJOk of { V2 ww1_sJOo ww2_sJOt ->
      case ww1_sJOo of { F# ww4_sK7V ->
      case ww2_sJOt of { F# ww6_sK7Y ->
      case w2_sJOl of { V2 ww8_sJOB ww9_sJOG ->
      case ww8_sJOB of { F# ww11_sK81 ->
      case ww9_sJOG of { F# ww13_sK84 ->
      $wrayCast' w_sJOj ww4_sK7V ww6_sK7Y ww11_sK81 ww13_sK84
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Engine.Ray"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

Rec {
-- RHS size: {terms: 74, types: 54, coercions: 1, joins: 0/0}
wallSamples
  = \ gs_aI21 ds_dIij ->
      case ds_dIij of {
        [] -> [];
        : r_aI23 rs_aI24 ->
          case r_aI23 of { V2 ww1_sFtl ww2_sFtq ->
          case ww1_sFtl of { I# ww4_sK87 ->
          case ww2_sFtq of { I# ww6_sK8a ->
          case >=# ww4_sK87 0# of {
            __DEFAULT -> [];
            1# ->
              case >=# ww6_sK8a 0# of {
                __DEFAULT -> [];
                1# ->
                  case gs_aI21 of wild1_X1s
                  { Vars ds1_dEiP ds2_dEiQ ds3_dEiR ds4_dEiS ->
                  case ds2_dEiQ of { WorldTiles ds5_dEj7 ds6_dEj8 ->
                  case ds6_dEj8 `cast` <Co:1> of { I32# x#_ajEx ->
                  case <# ww4_sK87 x#_ajEx of {
                    __DEFAULT -> [];
                    1# ->
                      case <# ww6_sK8a x#_ajEx of {
                        __DEFAULT -> [];
                        1# ->
                          : (case ds5_dEj7 of
                             { Array ww8_sFsb ww9_sFsg ww10_sFsl ww11_sFsm ->
                             case ww8_sFsb of { I# ww13_sK8d ->
                             case ww9_sFsg of { I# ww15_sK8g ->
                             $waccessMap
                               ww13_sK8d ww15_sK8g ww10_sFsl ww11_sFsm x#_ajEx ww4_sK87 ww6_sK8a
                             }
                             }
                             })
                            (wallSamples wild1_X1s rs_aI24)
                      }
                  }
                  }
                  }
                  }
              }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep1 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep2 = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep3 = :% cameraPlaneSweep1 cameraPlaneSweep1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep5 = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep4 = :% cameraPlaneSweep5 cameraPlaneSweep1

-- RHS size: {terms: 46, types: 24, coercions: 2, joins: 0/2}
cameraPlaneSweep_$scameraPlaneSweep
  = \ eta_B1 ->
      let {
        lvl_sIM0
          = case eta_B1 `cast` <Co:1> of { I32# x#_ajEx ->
            F# (int2Float# x#_ajEx)
            } } in
      letrec {
        go3_a9mq
          = \ ds_a9mr ->
              case ds_a9mr of {
                [] -> [];
                : y_a9mw ys_a9mx ->
                  : (case y_a9mw of { F# x_aIxT ->
                     case lvl_sIM0 of { F# y1_aIxX ->
                     case divideFloat# x_aIxT y1_aIxX of wild3_aIxZ { __DEFAULT ->
                     F# (minusFloat# (plusFloat# wild3_aIxZ wild3_aIxZ) 1.0#)
                     }
                     }
                     })
                    (go3_a9mq ys_a9mx)
              }; } in
      go3_a9mq
        ($w$cenumFromTo1
           0.0#
           (case eta_B1 `cast` <Co:1> of { I32# x#_ajEx ->
            F# (minusFloat# (int2Float# x#_ajEx) 1.0#)
            }))

-- RHS size: {terms: 56, types: 60, coercions: 0, joins: 0/5}
$wcameraPlaneSweep
  = \ @ a_sJOS @ a1_sJOT w_sJOU w1_sJOV ww_sJP6 w2_sJOX ->
      let { lvl_sIMc = fromRational w1_sJOV cameraPlaneSweep4 } in
      let { lvl1_sIMh = fromRational w1_sJOV cameraPlaneSweep3 } in
      let { $dNum_sIIA = $p1Fractional w1_sJOV } in
      let {
        lvl2_sIMd
          = case $dNum_sIIA of
            { C:Num ww2_ajwl ww3_ajwm ww4_ajwn ww5_ajwo ww6_ajwp ww7_ajwq
                    ww8_ajwr ->
            ww8_ajwr (toInteger w_sJOU w2_sJOX)
            } } in
      letrec {
        go3_a9mq
          = \ ds_a9mr ->
              case ds_a9mr of {
                [] -> [];
                : y_a9mw ys_a9mx ->
                  : (- $dNum_sIIA
                       (* $dNum_sIIA lvl_sIMc (/ w1_sJOV y_a9mw lvl2_sIMd))
                       lvl1_sIMh)
                    (go3_a9mq ys_a9mx)
              }; } in
      go3_a9mq
        (ww_sJP6
           (fromInteger $dNum_sIIA cameraPlaneSweep2)
           (- $dNum_sIIA
              lvl2_sIMd
              (fromInteger $dNum_sIIA cameraPlaneSweep1)))

-- RHS size: {terms: 14, types: 39, coercions: 0, joins: 0/0}
cameraPlaneSweep
  = \ @ a_sJOS @ a1_sJOT w_sJOU w1_sJOV w2_sJOW w3_sJOX ->
      case w2_sJOW of
      { C:Enum ww1_sJP0 ww2_sJP1 ww3_sJP2 ww4_sJP3 ww5_sJP4 ww6_sJP5
               ww7_sJP6 ww8_sJP7 ->
      $wcameraPlaneSweep w_sJOU w1_sJOV ww7_sJP6 w3_sJOX
      }

-- RHS size: {terms: 56, types: 46, coercions: 0, joins: 0/1}
rayHeads
  = \ screenWidth_aI1B player_aI1C ->
      letrec {
        go3_a9mq
          = \ ds_a9mr ->
              case ds_a9mr of {
                [] -> [];
                : y_a9mw ys_a9mx ->
                  : ($wnormalize
                       $fFloatingFloat
                       $fMetricV2
                       $fEpsilonFloat_$cnearZero
                       (case player_aI1C of { PVars ds1_dEje ds2_dEjf ds3_dEjg ->
                        case ds2_dEjf of { V2 a1_aIuA b1_aIuB ->
                        case a1_aIuA of { F# x_sK8p ->
                        case b1_aIuB of { F# x1_sK8s ->
                        case ds3_dEjg of { V2 a2_XIy0 b2_XIy2 ->
                        case a2_XIy0 of { F# x2_sK8j ->
                        case b2_XIy2 of { F# x3_sK8m ->
                        case y_a9mw of { F# y1_ajN5 ->
                        V2
                          (F# (plusFloat# x_sK8p (timesFloat# x2_sK8j y1_ajN5)))
                          (F# (plusFloat# x1_sK8s (timesFloat# x3_sK8m y1_ajN5)))
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                        }))
                    (go3_a9mq ys_a9mx)
              }; } in
      go3_a9mq (cameraPlaneSweep_$scameraPlaneSweep screenWidth_aI1B)

-- RHS size: {terms: 35, types: 36, coercions: 0, joins: 0/0}
genRays
  = \ screenWidth_aI1w player_aI1x worldSize_aI1y ->
      map
        (\ w_sJNM ->
           case player_aI1x of { PVars ds1_dEja ds2_dEjb ds3_dEjc ->
           case ds1_dEja of { V2 ww1_sJNP ww2_sJNU ->
           case ww1_sJNP of { F# ww4_sK8v ->
           case ww2_sJNU of { F# ww6_sK8y ->
           case w_sJNM of { V2 ww8_sJO2 ww9_sJO7 ->
           case ww8_sJO2 of { F# ww11_sK8B ->
           case ww9_sJO7 of { F# ww13_sK8E ->
           $wshootRay' worldSize_aI1y ww4_sK8v ww6_sK8y ww11_sK8B ww13_sK8E
           }
           }
           }
           }
           }
           }
           })
        (rayHeads screenWidth_aI1w player_aI1x)

-- RHS size: {terms: 35, types: 36, coercions: 0, joins: 0/0}
rayCastScreen
  = \ screenWidth_aI1E player_aI1F world_aI1G ->
      map
        (\ w_sJOl ->
           case player_aI1F of { PVars ds1_dEja ds2_dEjb ds3_dEjc ->
           case ds1_dEja of { V2 ww1_sJOo ww2_sJOt ->
           case ww1_sJOo of { F# ww4_sK8H ->
           case ww2_sJOt of { F# ww6_sK8K ->
           case w_sJOl of { V2 ww8_sJOB ww9_sJOG ->
           case ww8_sJOB of { F# ww11_sK8N ->
           case ww9_sJOG of { F# ww13_sK8Q ->
           $wrayCast' world_aI1G ww4_sK8H ww6_sK8K ww11_sK8N ww13_sK8Q
           }
           }
           }
           }
           }
           }
           })
        (rayHeads screenWidth_aI1E player_aI1F)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
epsilon = F# 1.0e-5#

Rec {
-- RHS size: {terms: 108, types: 78, coercions: 0, joins: 2/2}
$w$sgo4
  = \ w_sJPd ww_sJPl ww1_sJPq w1_sJPf ->
      case w1_sJPf of wild_aIKu {
        Bin dt_aIKw y_aIKx l_aIKy r_aIKz ->
          case y_aIKx of wild1_sK94 { V2 b1_sK95 b2_sK96 ->
          case b1_sK95 of { I# y#_sK99 ->
          case b2_sK96 of { I# y#1_sK9c ->
          join {
            $j_sIPi
              = case $w$sgo4 w_sJPd ww_sJPl ww1_sJPq l_aIKy of l'_aIKE
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aIKE l_aIKy of {
                  __DEFAULT -> balanceL wild1_sK94 l'_aIKE r_aIKz;
                  1# -> wild_aIKu
                }
                } } in
          case <# ww_sJPl y#_sK99 of {
            __DEFAULT ->
              join {
                $j1_sIPk
                  = case $w$sgo4 w_sJPd ww_sJPl ww1_sJPq r_aIKz of r'_aIKM
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aIKM r_aIKz of {
                      __DEFAULT -> balanceR wild1_sK94 l_aIKy r'_aIKM;
                      1# -> wild_aIKu
                    }
                    } } in
              case ==# ww_sJPl y#_sK99 of {
                __DEFAULT -> jump $j1_sIPk;
                1# ->
                  case <# ww1_sJPq y#1_sK9c of {
                    __DEFAULT ->
                      case ==# ww1_sJPq y#1_sK9c of {
                        __DEFAULT -> jump $j1_sIPk;
                        1# ->
                          case lazy w_sJPd of wild2_aIKI { V2 ipv_sIP8 ipv1_sIP9 ->
                          case reallyUnsafePtrEquality# w_sJPd wild1_sK94 of {
                            __DEFAULT -> Bin dt_aIKw wild2_aIKI l_aIKy r_aIKz;
                            1# -> wild_aIKu
                          }
                          }
                      };
                    1# -> jump $j_sIPi
                  }
              };
            1# -> jump $j_sIPi
          }
          }
          }
          };
        Tip ->
          case lazy w_sJPd of dt_XIiH { V2 ipv_sIPw ipv1_sIPx ->
          Bin 1# dt_XIiH Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 183, types: 328, coercions: 0, joins: 1/1}
$wcreate_rKm6
  = \ ww_sJPy w_sJPv ->
      case w_sJPv of wild6_aIjq {
        [] -> (# Tip, [], [] #);
        : ipv8_aIjt ipv9_aIju ->
          case ww_sJPy of wild_X22 {
            __DEFAULT ->
              case $wcreate_rKm6 (uncheckedIShiftRA# wild_X22 1#) wild6_aIjq of
              { (# ww2_sJQa, ww3_sJQb, ww4_sJQc #) ->
              case ww3_sJQb of wild9_aIoQ {
                [] -> (# ww2_sJQa, [], ww4_sJQc #);
                : y_aIoU ds11_aIoV ->
                  case ds11_aIoV of wild10_aIoX {
                    [] -> (# insertMax y_aIoU ww2_sJQa, [], ww4_sJQc #);
                    : ipv10_aIp1 ipv11_aIp2 ->
                      case y_aIoU of wild1_aICo { V2 a1_aICq a2_aICr ->
                      case a1_aICq of { I# x#_sK9l ->
                      case a2_aICr of { I# x_sK9r ->
                      case ipv10_aIp1 of { V2 b1_aICv b2_aICw ->
                      case b1_aICv of { I# y#_sK9o ->
                      case b2_aICw of { I# y1_sK9u ->
                      join {
                        $j_sIOc
                          = case $wcreate_rKm6 (uncheckedIShiftRA# wild_X22 1#) wild10_aIoX
                            of
                            { (# ww6_XJSU, ww7_XJSW, ww8_XJSY #) ->
                            (# link wild1_aICo ww2_sJQa ww6_XJSU, ww7_XJSW, ww8_XJSY #)
                            } } in
                      case <# x#_sK9l y#_sK9o of {
                        __DEFAULT ->
                          case ==# x#_sK9l y#_sK9o of {
                            __DEFAULT -> (# ww2_sJQa, [], wild9_aIoQ #);
                            1# ->
                              case <# x_sK9r y1_sK9u of {
                                __DEFAULT -> (# ww2_sJQa, [], wild9_aIoQ #);
                                1# -> jump $j_sIOc
                              }
                          };
                        1# -> jump $j_sIOc
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                  }
              }
              };
            1# ->
              case ipv9_aIju of wild8_aIpk {
                [] ->
                  (# case ipv8_aIjt of dt_XIiH { V2 ipv_sIOh ipv1_sIOi ->
                     Bin 1# dt_XIiH Tip Tip
                     },
                     [], [] #);
                : y_aIpo ds8_aIpp ->
                  case ipv8_aIjt of wild1_aICo { V2 a1_aICq a2_aICr ->
                  case a1_aICq of { I# x#_sK9x ->
                  case a2_aICr of { I# x_sK9D ->
                  case y_aIpo of { V2 b1_aICv b2_aICw ->
                  case b1_aICv of { I# y#_sK9A ->
                  case b2_aICw of { I# y1_sK9G ->
                  case <# x#_sK9x y#_sK9A of {
                    __DEFAULT ->
                      case ==# x#_sK9x y#_sK9A of {
                        __DEFAULT -> (# Bin 1# wild1_aICo Tip Tip, [], wild8_aIpk #);
                        1# ->
                          case <# x_sK9D y1_sK9G of {
                            __DEFAULT -> (# Bin 1# wild1_aICo Tip Tip, [], wild8_aIpk #);
                            1# -> (# Bin 1# wild1_aICo Tip Tip, wild8_aIpk, [] #)
                          }
                      };
                    1# -> (# Bin 1# wild1_aICo Tip Tip, wild8_aIpk, [] #)
                  }
                  }
                  }
                  }
                  }
                  }
                  }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go_rKm7
  = \ ds_a9mr eta_B1 ->
      case ds_a9mr of {
        [] -> eta_B1;
        : y_a9mw ys_a9mx ->
          case y_a9mw of ww_sJPh { V2 ww1_sJPi ww2_sJPn ->
          case ww1_sJPi of { I# ww4_sKad ->
          case ww2_sJPn of { I# ww6_sKag ->
          go_rKm7 ys_a9mx ($w$sgo4 ww_sJPh ww4_sKad ww6_sKag eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go1_rKm8
  = \ ds_a9mr eta_B1 ->
      case ds_a9mr of {
        [] -> eta_B1;
        : y_a9mw ys_a9mx ->
          case y_a9mw of ww_sJPh { V2 ww1_sJPi ww2_sJPn ->
          case ww1_sJPi of { I# ww4_sK9Z ->
          case ww2_sJPn of { I# ww6_sKa2 ->
          go1_rKm8 ys_a9mx ($w$sgo4 ww_sJPh ww4_sK9Z ww6_sKa2 eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go2_rKm9
  = \ ds_a9mr eta_B1 ->
      case ds_a9mr of {
        [] -> eta_B1;
        : y_a9mw ys_a9mx ->
          case y_a9mw of ww_sJPh { V2 ww1_sJPi ww2_sJPn ->
          case ww1_sJPi of { I# ww4_sK9R ->
          case ww2_sJPn of { I# ww6_sK9U ->
          go2_rKm9 ys_a9mx ($w$sgo4 ww_sJPh ww4_sK9R ww6_sK9U eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 84, types: 81, coercions: 0, joins: 1/1}
$wgo4
  = \ ww_sJPP w_sJPL w1_sJPM ->
      case w1_sJPM of wild3_aIj1 {
        [] -> w_sJPL;
        : ipv3_aIj5 ipv4_aIj6 ->
          case ipv4_aIj6 of wild4_aIj8 {
            [] -> insertMax ipv3_aIj5 w_sJPL;
            : ipv5_aIjd ipv6_aIje ->
              case ipv3_aIj5 of wild_aICo { V2 a1_aICq a2_aICr ->
              case a1_aICq of { I# x#_sK9J ->
              case a2_aICr of { I# x_sKa5 ->
              case ipv5_aIjd of { V2 b1_aICv b2_aICw ->
              case b1_aICv of { I# y#_sK9M ->
              case b2_aICw of { I# y_sKa8 ->
              join {
                $j_sIOC
                  = case $wcreate_rKm6 ww_sJPP wild4_aIj8 of
                    { (# ww2_sJQa, ww3_sJQb, ww4_sJQc #) ->
                    case ww4_sJQc of wild8_aIpC {
                      [] ->
                        $wgo4
                          (uncheckedIShiftL# ww_sJPP 1#)
                          (link wild_aICo w_sJPL ww2_sJQa)
                          ww3_sJQb;
                      : ipv7_aIpJ ipv8_aIpK ->
                        go2_rKm9 wild8_aIpC (link wild_aICo w_sJPL ww2_sJQa)
                    }
                    } } in
              case <# x#_sK9J y#_sK9M of {
                __DEFAULT ->
                  case ==# x#_sK9J y#_sK9M of {
                    __DEFAULT -> go1_rKm8 wild3_aIj1 w_sJPL;
                    1# ->
                      case <# x_sKa5 y_sKa8 of {
                        __DEFAULT -> go_rKm7 wild3_aIj1 w_sJPL;
                        1# -> jump $j_sIOC
                      }
                  };
                1# -> jump $j_sIOC
              }
              }
              }
              }
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
$sfromList_go
  = \ ds_a9mr eta_B1 ->
      case ds_a9mr of {
        [] -> eta_B1;
        : y_a9mw ys_a9mx ->
          case y_a9mw of ww_sJPh { V2 ww1_sJPi ww2_sJPn ->
          case ww1_sJPi of { I# ww4_sKar ->
          case ww2_sJPn of { I# ww6_sKau ->
          $sfromList_go ys_a9mx ($w$sgo4 ww_sJPh ww4_sKar ww6_sKau eta_B1)
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 84, types: 74, coercions: 0, joins: 0/0}
$sfromList
  = \ ds_aIiu ->
      case ds_aIiu of {
        [] -> Tip;
        : x_aIiG ds1_aIiH ->
          case ds1_aIiH of wild1_aIiJ {
            [] ->
              case x_aIiG of dt_XIiH { V2 ipv_sIOJ ipv1_sIOK ->
              Bin 1# dt_XIiH Tip Tip
              };
            : ipv_aIiN ipv1_aIiO ->
              case x_aIiG of wild2_aICo { V2 a1_aICq a2_aICr ->
              case a1_aICq of { I# x#_sKaj ->
              case a2_aICr of { I# x1_sKax ->
              case ipv_aIiN of { V2 b1_aICv b2_aICw ->
              case b1_aICv of { I# y#_sKam ->
              case b2_aICw of { I# y_sKaA ->
              case <# x#_sKaj y#_sKam of {
                __DEFAULT ->
                  case ==# x#_sKaj y#_sKam of {
                    __DEFAULT -> $sfromList_go wild1_aIiJ (Bin 1# wild2_aICo Tip Tip);
                    1# ->
                      case <# x1_sKax y_sKaA of {
                        __DEFAULT -> $sfromList_go wild1_aIiJ (Bin 1# wild2_aICo Tip Tip);
                        1# -> $wgo4 1# (Bin 1# wild2_aICo Tip Tip) wild1_aIiJ
                      }
                  };
                1# -> $wgo4 1# (Bin 1# wild2_aICo Tip Tip) wild1_aIiJ
              }
              }
              }
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
visitedPositions1 = $sfromList []

-- RHS size: {terms: 44, types: 44, coercions: 0, joins: 2/3}
visitedPositions
  = \ gs_aI1H steps_aI1I ->
      let { rayVisitedIndexes_sII8 = map snd steps_aI1I } in
      join {
        $j_sJHO y_atDN
          = case <# 0# y_atDN of {
              __DEFAULT -> visitedPositions1;
              1# -> $sfromList ($wunsafeTake y_atDN rayVisitedIndexes_sII8)
            } } in
      joinrec {
        $wgo1_sJQ4 w_sJPY ww_sJQ2
          = case w_sJPY of {
              [] -> jump $j_sJHO ww_sJQ2;
              : y_a9mw ys_a9mx ->
                case y_a9mw of {
                  __DEFAULT -> jump $wgo1_sJQ4 ys_a9mx (+# ww_sJQ2 1#);
                  FW -> jump $j_sJHO ww_sJQ2
                }
            }; } in
      jump $wgo1_sJQ4 (wallSamples gs_aI1H rayVisitedIndexes_sII8) 0#


------ Local rules for imported ids --------
"SPEC cameraPlaneSweep @ CInt @ Float"
    forall $dEnum_sIID $dFractional_sIIC $dIntegral_sIIB.
      cameraPlaneSweep $dIntegral_sIIB $dFractional_sIIC $dEnum_sIID
      = cameraPlaneSweep_$scameraPlaneSweep
"SPEC/Obelisk.Engine.Ray fromList @ (V2 Int)"
    forall $dOrd_sIJG. fromList $dOrd_sIJG = $sfromList
