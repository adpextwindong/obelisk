Resolving dependencies...
Build profile: -w ghc-8.8.4 -O1
In order, the following will be built (use -v for more details):
 - obelisk-0.1.0.0 (lib) (configuration changed)
 - obelisk-0.1.0.0 (exe:rayBench) (configuration changed)
 - obelisk-0.1.0.0 (exe:obelisk-exe) (configuration changed)
Configuring library for obelisk-0.1.0.0..
Preprocessing library for obelisk-0.1.0.0..
Building library for obelisk-0.1.0.0..
[ 1 of 17] Compiling Obelisk.Config   ( src\Obelisk\Config.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Config.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 124, types: 89, coercions: 0, joins: 0/0}

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cFont
  = \ ds_d6uo ->
      case ds_d6uo of
      { Config ds1_d6up ds2_d6uq ds3_d6ur ds4_d6us ds5_d6ut ds6_d6uu ->
      ds6_d6uu
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cScreenHeight
  = \ ds_d6uh ->
      case ds_d6uh of
      { Config ds1_d6ui ds2_d6uj ds3_d6uk ds4_d6ul ds5_d6um ds6_d6un ->
      ds5_d6um
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cScreenWidth
  = \ ds_d6ua ->
      case ds_d6ua of
      { Config ds1_d6ub ds2_d6uc ds3_d6ud ds4_d6ue ds5_d6uf ds6_d6ug ->
      ds4_d6ue
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cSurface
  = \ ds_d6u3 ->
      case ds_d6u3 of
      { Config ds1_d6u4 ds2_d6u5 ds3_d6u6 ds4_d6u7 ds5_d6u8 ds6_d6u9 ->
      ds3_d6u6
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cRenderer
  = \ ds_d6tW ->
      case ds_d6tW of
      { Config ds1_d6tX ds2_d6tY ds3_d6tZ ds4_d6u0 ds5_d6u1 ds6_d6u2 ->
      ds2_d6tY
      }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
cWindow
  = \ ds_d6tP ->
      case ds_d6tP of
      { Config ds1_d6tQ ds2_d6tR ds3_d6tS ds4_d6tT ds5_d6tU ds6_d6tV ->
      ds1_d6tQ
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Config"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r7Dd = KindRepTyConApp $tcFont []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r7Lv = KindRepTyConApp $tcCInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_r7Lw = KindRepTyConApp $tcSurface []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r7Lx = KindRepTyConApp $tcRenderer []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r7Ly = KindRepTyConApp $tcWindow []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcConfig2 = "Config"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcConfig1 = TrNameS $tcConfig2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcConfig
  = TyCon
      14677616440016770449##
      12181909337034691787##
      $trModule
      $tcConfig1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r7Lz = KindRepTyConApp $tcConfig []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_r7LA = KindRepFun $krep_r7Dd $krep5_r7Lz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r7LB = KindRepFun $krep1_r7Lv $krep6_r7LA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_r7LC = KindRepFun $krep1_r7Lv $krep7_r7LB

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_r7LD = KindRepFun $krep2_r7Lw $krep8_r7LC

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r7LE = KindRepFun $krep3_r7Lx $krep9_r7LD

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Config1 = KindRepFun $krep4_r7Ly $krep10_r7LE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Config3 = "'Config"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Config2 = TrNameS $tc'Config3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Config
  = TyCon
      16478008355381631126##
      5963934384545963416##
      $trModule
      $tc'Config2
      0#
      $tc'Config1



[ 2 of 17] Compiling Obelisk.Engine.Input ( src\Obelisk\Engine\Input.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Engine\Input.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 425, types: 227, coercions: 0, joins: 2/4}

-- RHS size: {terms: 62, types: 19, coercions: 0, joins: 2/2}
$w$c==
  = \ ww_s9wh
      ww1_s9wi
      ww2_s9wj
      ww3_s9wk
      ww4_s9wo
      ww5_s9wp
      ww6_s9wq
      ww7_s9wr ->
      join {
        $j_s9sx
          = join {
              $j1_s9st
                = case ww2_s9wj of {
                    False ->
                      case ww6_s9wq of {
                        False -> $fEqBool_$c== ww3_s9wk ww7_s9wr;
                        True -> False
                      };
                    True ->
                      case ww6_s9wq of {
                        False -> False;
                        True -> $fEqBool_$c== ww3_s9wk ww7_s9wr
                      }
                  } } in
            case ww1_s9wi of {
              False ->
                case ww5_s9wp of {
                  False -> jump $j1_s9st;
                  True -> False
                };
              True ->
                case ww5_s9wp of {
                  False -> False;
                  True -> jump $j1_s9st
                }
            } } in
      case ww_s9wh of {
        False ->
          case ww4_s9wo of {
            False -> jump $j_s9sx;
            True -> False
          };
        True ->
          case ww4_s9wo of {
            False -> False;
            True -> jump $j_s9sx
          }
      }

-- RHS size: {terms: 17, types: 12, coercions: 0, joins: 0/0}
$fEqInput_$c==
  = \ w_s9wd w1_s9we ->
      case w_s9wd of { Input ww1_s9wh ww2_s9wi ww3_s9wj ww4_s9wk ->
      case w1_s9we of { Input ww6_s9wo ww7_s9wp ww8_s9wq ww9_s9wr ->
      $w$c==
        ww1_s9wh
        ww2_s9wi
        ww3_s9wj
        ww4_s9wk
        ww6_s9wo
        ww7_s9wp
        ww8_s9wq
        ww9_s9wr
      }
      }

-- RHS size: {terms: 22, types: 13, coercions: 0, joins: 0/0}
$fEqInput_$c/=
  = \ eta_B2 eta1_B1 ->
      case eta_B2 of { Input ww1_s9wh ww2_s9wi ww3_s9wj ww4_s9wk ->
      case eta1_B1 of { Input ww6_s9wo ww7_s9wp ww8_s9wq ww9_s9wr ->
      case $w$c==
             ww1_s9wh
             ww2_s9wi
             ww3_s9wj
             ww4_s9wk
             ww6_s9wo
             ww7_s9wp
             ww8_s9wq
             ww9_s9wr
      of {
        False -> True;
        True -> False
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqInput = C:Eq $fEqInput_$c== $fEqInput_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
f_r9pW = "Input {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
f1_r9zR = unpackCString# f_r9pW

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
g_r9zS = "}"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
g1_r9zT = unpackCString# g_r9zS

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_r9zU = "iLeft = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_r9zV = "iRight = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r9zW = "iQuit = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_r9zX = "iPrintState = "#

-- RHS size: {terms: 147, types: 54, coercions: 0, joins: 0/2}
$w$cshowsPrec
  = \ ww_s9wA ww1_s9wE ww2_s9wF ww3_s9wG ww4_s9wH w_s9wx ->
      let {
        g2_s9rl
          = \ x_X9lT ->
              unpackAppendCString#
                lvl_r9zU
                (let {
                   eta_s9rx
                     = ++
                         showCommaSpace1
                         (unpackAppendCString#
                            lvl1_r9zV
                            (case ww2_s9wF of {
                               False ->
                                 ++
                                   $fShowBool4
                                   (++
                                      showCommaSpace1
                                      (unpackAppendCString#
                                         lvl2_r9zW
                                         (case ww3_s9wG of {
                                            False ->
                                              ++
                                                $fShowBool4
                                                (++
                                                   showCommaSpace1
                                                   (unpackAppendCString#
                                                      lvl3_r9zX
                                                      (case ww4_s9wH of {
                                                         False ->
                                                           ++ $fShowBool4 (++ g1_r9zT x_X9lT);
                                                         True -> ++ $fShowBool2 (++ g1_r9zT x_X9lT)
                                                       })));
                                            True ->
                                              ++
                                                $fShowBool2
                                                (++
                                                   showCommaSpace1
                                                   (unpackAppendCString#
                                                      lvl3_r9zX
                                                      (case ww4_s9wH of {
                                                         False ->
                                                           ++ $fShowBool4 (++ g1_r9zT x_X9lT);
                                                         True -> ++ $fShowBool2 (++ g1_r9zT x_X9lT)
                                                       })))
                                          })));
                               True ->
                                 ++
                                   $fShowBool2
                                   (++
                                      showCommaSpace1
                                      (unpackAppendCString#
                                         lvl2_r9zW
                                         (case ww3_s9wG of {
                                            False ->
                                              ++
                                                $fShowBool4
                                                (++
                                                   showCommaSpace1
                                                   (unpackAppendCString#
                                                      lvl3_r9zX
                                                      (case ww4_s9wH of {
                                                         False ->
                                                           ++ $fShowBool4 (++ g1_r9zT x_X9lT);
                                                         True -> ++ $fShowBool2 (++ g1_r9zT x_X9lT)
                                                       })));
                                            True ->
                                              ++
                                                $fShowBool2
                                                (++
                                                   showCommaSpace1
                                                   (unpackAppendCString#
                                                      lvl3_r9zX
                                                      (case ww4_s9wH of {
                                                         False ->
                                                           ++ $fShowBool4 (++ g1_r9zT x_X9lT);
                                                         True -> ++ $fShowBool2 (++ g1_r9zT x_X9lT)
                                                       })))
                                          })))
                             })) } in
                 case ww1_s9wE of {
                   False -> ++ $fShowBool4 eta_s9rx;
                   True -> ++ $fShowBool2 eta_s9rx
                 }) } in
      case >=# ww_s9wA 11# of {
        __DEFAULT -> ++ f1_r9zR (g2_s9rl w_s9wx);
        1# -> : $fShow(,)4 (++ f1_r9zR (g2_s9rl (: $fShow(,)2 w_s9wx)))
      }

-- RHS size: {terms: 16, types: 10, coercions: 0, joins: 0/0}
$fShowInput_$cshowsPrec
  = \ w_s9wv w1_s9ww w2_s9wx ->
      case w_s9wv of { I# ww1_s9wA ->
      case w1_s9ww of { Input ww3_s9wE ww4_s9wF ww5_s9wG ww6_s9wH ->
      $w$cshowsPrec ww1_s9wA ww3_s9wE ww4_s9wF ww5_s9wG ww6_s9wH w2_s9wx
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowInput2 = I# 0#

-- RHS size: {terms: 11, types: 7, coercions: 0, joins: 0/0}
$fShowInput_$cshow
  = \ x_a9kO ->
      case x_a9kO of { Input ww1_s9wE ww2_s9wF ww3_s9wG ww4_s9wH ->
      $w$cshowsPrec 0# ww1_s9wE ww2_s9wF ww3_s9wG ww4_s9wH []
      }

-- RHS size: {terms: 12, types: 7, coercions: 0, joins: 0/0}
$fShowInput1
  = \ w_s9ww w1_s9wx ->
      case w_s9ww of { Input ww1_s9wE ww2_s9wF ww3_s9wG ww4_s9wH ->
      $w$cshowsPrec 0# ww1_s9wE ww2_s9wF ww3_s9wG ww4_s9wH w1_s9wx
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fShowInput_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowInput1 ls_a9kR s_a9kS

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fShowInput
  = C:Show
      $fShowInput_$cshowsPrec $fShowInput_$cshow $fShowInput_$cshowList

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
iPrintState
  = \ ds_d9k9 ->
      case ds_d9k9 of { Input ds1_d9ka ds2_d9kb ds3_d9kc ds4_d9kd ->
      ds4_d9kd
      }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
iQuit
  = \ ds_d9k4 ->
      case ds_d9k4 of { Input ds1_d9k5 ds2_d9k6 ds3_d9k7 ds4_d9k8 ->
      ds3_d9k7
      }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
iRight
  = \ ds_d9jZ ->
      case ds_d9jZ of { Input ds1_d9k0 ds2_d9k1 ds3_d9k2 ds4_d9k3 ->
      ds2_d9k1
      }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
iLeft
  = \ ds_d9jU ->
      case ds_d9jU of { Input ds1_d9jV ds2_d9jW ds3_d9jX ds4_d9jY ->
      ds1_d9jV
      }

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
initInput = Input False False False False

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Engine.Input"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r9zY = KindRepTyConApp $tcBool []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcInput2 = "Input"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcInput1 = TrNameS $tcInput2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcInput
  = TyCon
      11667681695706572900##
      18034667700330145051##
      $trModule
      $tcInput1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_r9zZ = KindRepTyConApp $tcInput []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r9A0 = KindRepFun $krep_r9zY $krep1_r9zZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep3_r9A1 = KindRepFun $krep_r9zY $krep2_r9A0

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_r9A2 = KindRepFun $krep_r9zY $krep3_r9A1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Input1 = KindRepFun $krep_r9zY $krep4_r9A2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Input3 = "'Input"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Input2 = TrNameS $tc'Input3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Input
  = TyCon
      12262844058157330240##
      4971985937555993599##
      $trModule
      $tc'Input2
      0#
      $tc'Input1



[ 3 of 17] Compiling Obelisk.Math.Homogenous ( src\Obelisk\Math\Homogenous.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Math\Homogenous.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 949, types: 825, coercions: 51, joins: 4/27}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
translate1 = 0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
homoCoords1 = 1

-- RHS size: {terms: 30, types: 32, coercions: 0, joins: 0/0}
zoomT
  = \ @ a_skt0 w_skt1 w1_skt2 ->
      case w_skt1 of
      { C:Num ww1_skt5 ww2_skt6 ww3_skt7 ww4_skt8 ww5_skt9 ww6_skta
              ww7_sktb ->
      case w1_skt2 of dt_XdOz { __DEFAULT ->
      case ww7_sktb translate1 of dt1_XdOB { __DEFAULT ->
      case ww7_sktb homoCoords1 of dt2_XdQw { __DEFAULT ->
      V3
        (V3 dt_XdOz dt1_XdOB dt1_XdOB)
        (V3 dt1_XdOB dt_XdOz dt1_XdOB)
        (V3 dt1_XdOB dt1_XdOB dt2_XdQw)
      }
      }
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m22AffineIdD2 = F# 1.0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
m22AffineIdD3 = F# 0.0#

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
m22AffineIdD1 = V3 m22AffineIdD3 m22AffineIdD3 m22AffineIdD2

-- RHS size: {terms: 34, types: 34, coercions: 0, joins: 0/0}
translate
  = \ @ a_skth w_skti w1_sktj w2_sktk ->
      case w_skti of
      { C:Num ww1_sktn ww2_skto ww3_sktp ww4_sktq ww5_sktr ww6_skts
              ww7_sktt ->
      case ww7_sktt homoCoords1 of dt_XdQr { __DEFAULT ->
      case ww7_sktt translate1 of dt1_XdQw { __DEFAULT ->
      case w1_sktj of dt2_XdQB { __DEFAULT ->
      case w2_sktk of dt3_XdQL { __DEFAULT ->
      V3
        (V3 dt_XdQr dt1_XdQw dt2_XdQB)
        (V3 dt1_XdQw dt_XdQr dt3_XdQL)
        (V3 dt1_XdQw dt1_XdQw dt_XdQr)
      }
      }
      }
      }
      }

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
m22AffineIdD5 = V3 m22AffineIdD2 m22AffineIdD3 m22AffineIdD3

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
m22AffineIdD4 = V3 m22AffineIdD3 m22AffineIdD2 m22AffineIdD3

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
m22AffineIdD = V3 m22AffineIdD5 m22AffineIdD4 m22AffineIdD1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
idv2 = I32# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
idv4 = I32# 0#

-- RHS size: {terms: 4, types: 1, coercions: 6, joins: 0/0}
idv6
  = V3 (idv2 `cast` <Co:2>) (idv4 `cast` <Co:2>) (idv4 `cast` <Co:2>)

-- RHS size: {terms: 4, types: 1, coercions: 6, joins: 0/0}
idv5
  = V3 (idv4 `cast` <Co:2>) (idv2 `cast` <Co:2>) (idv4 `cast` <Co:2>)

-- RHS size: {terms: 4, types: 1, coercions: 6, joins: 0/0}
idv1
  = V3 (idv4 `cast` <Co:2>) (idv4 `cast` <Co:2>) (idv2 `cast` <Co:2>)

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
idv3 = V3 idv6 idv5 idv1

-- RHS size: {terms: 31, types: 45, coercions: 0, joins: 0/3}
transformFloor
  = \ @ a_aefz
      @ b_aefy
      @ r_aefE
      @ f_aefv
      $dRealFrac_ajo6
      $dIntegral_ajo7
      $dFoldable_ajo8
      $dAdditive_ajo9
      $dFunctor_ajoa
      eta_B1 ->
      let { $dNum_sjKQ = $p1RealFrac $dRealFrac_ajo6 } in
      let { $dNum1_sjKP = $p1Real $dNum_sjKQ } in
      let {
        f1_sjKO
          = fmap $dFunctor_ajoa (floor $dRealFrac_ajo6 $dIntegral_ajo7) } in
      \ x_a9ku ->
        f1_sjKO
          (!*
             $dFunctor_ajoa
             $dFoldable_ajo8
             $dAdditive_ajo9
             $dNum1_sjKP
             eta_B1
             x_a9ku)

-- RHS size: {terms: 15, types: 13, coercions: 0, joins: 0/0}
homoCoords
  = \ @ a_aefe $dNum_aefg ds_djw2 ->
      case ds_djw2 of { V2 x_aaBC y_aaBD ->
      case fromInteger $dNum_aefg homoCoords1 of dt_XdRt { __DEFAULT ->
      V3 x_aaBC y_aaBD dt_XdRt
      }
      }

-- RHS size: {terms: 9, types: 12, coercions: 0, joins: 0/0}
dropHomoCoords
  = \ @ a_adOq _ ds_djvf ->
      case ds_djvf of { V3 x_aaBE y_aaBF ds1_djvy -> V2 x_aaBE y_aaBF }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Math.Homogenous"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 194, types: 122, coercions: 21, joins: 2/7}
appDTFloor_$sfloatTransformFloor
  = \ eta_B1 x_X9la ->
      case eta_B1 of { V3 a1_ajzt b1_ajzu c_ajzv ->
      case a1_ajzt of { V3 a2_skOX b2_skOY c1_skOZ ->
      case a2_skOX of { F# x1_skPb ->
      case b2_skOY of { F# x2_skPe ->
      case c1_skOZ of { F# x3_skPh ->
      case b1_ajzu of { V3 a3_skPk b3_skPl c2_skPm ->
      case a3_skPk of { F# x4_skPp ->
      case b3_skPl of { F# x5_skPs ->
      case c2_skPm of { F# x6_skPv ->
      case c_ajzv of { V3 a4_skPy b4_skPz c3_skPA ->
      case a4_skPy of { F# x7_skPD ->
      case b4_skPz of { F# x8_skPG ->
      case c3_skPA of { F# x9_skPJ ->
      case x_X9la of { V3 a5_XjC0 b5_XjC2 c4_XjC4 ->
      case a5_XjC0 `cast` <Co:1> of { I32# x#_skP2 ->
      case b5_XjC2 `cast` <Co:1> of { I32# x#1_skP5 ->
      case c4_XjC4 `cast` <Co:1> of { I32# x#2_skP8 ->
      let { d_sk0q = int2Float# x#_skP2 } in
      let { e_sk0r = int2Float# x#1_skP5 } in
      let { f_sk0s = int2Float# x#2_skP8 } in
      case $w$cproperFraction1
             $fIntegralCInt
             (plusFloat#
                (plusFloat#
                   (timesFloat# x1_skPb d_sk0q) (timesFloat# x2_skPe e_sk0r))
                (timesFloat# x3_skPh f_sk0s))
      of
      { (# ww3_ajIj, ww4_ajIk #) ->
      case ww4_ajIk of { F# x10_ajIo ->
      join {
        $j_skbz ipv_sjUb nt_sjU9
          = case $w$cproperFraction1
                   $fIntegralCInt
                   (plusFloat#
                      (plusFloat#
                         (timesFloat# x4_skPp d_sk0q) (timesFloat# x5_skPs e_sk0r))
                      (timesFloat# x6_skPv f_sk0s))
            of
            { (# ww5_XjMA, ww6_XjMC #) ->
            case ww6_XjMC of { F# x11_XjMK ->
            join {
              $j1_skbu ipv1_sjUf nt1_sjUd
                = case $w$cproperFraction1
                         $fIntegralCInt
                         (plusFloat#
                            (plusFloat#
                               (timesFloat# x7_skPD d_sk0q) (timesFloat# x8_skPG e_sk0r))
                            (timesFloat# x9_skPJ f_sk0s))
                  of
                  { (# ww8_XjMR, ww9_XjMT #) ->
                  case ww9_XjMT of { F# x12_XjN1 ->
                  case ltFloat# x12_XjN1 0.0# of {
                    __DEFAULT ->
                      case ww8_XjMR `cast` <Co:1> of nt2_sjUh { I32# ipv2_sjUj ->
                      V3
                        (nt_sjU9 `cast` <Co:2>)
                        (nt1_sjUd `cast` <Co:2>)
                        (nt2_sjUh `cast` <Co:2>)
                      };
                    1# ->
                      case ww8_XjMR `cast` <Co:1> of { I32# x#3_akbm ->
                      V3
                        (nt_sjU9 `cast` <Co:2>)
                        (nt1_sjUd `cast` <Co:2>)
                        ((I32# (narrow32Int# (-# x#3_akbm 1#))) `cast` <Co:2>)
                      }
                  }
                  }
                  } } in
            case ltFloat# x11_XjMK 0.0# of {
              __DEFAULT ->
                case ww5_XjMA `cast` <Co:1> of nt1_sjUd { I32# ipv1_sjUf ->
                jump $j1_skbu ipv1_sjUf nt1_sjUd
                };
              1# ->
                case ww5_XjMA `cast` <Co:1> of { I32# x#3_akbm ->
                let { ipv1_sjUf = narrow32Int# (-# x#3_akbm 1#) } in
                jump $j1_skbu ipv1_sjUf (I32# ipv1_sjUf)
                }
            }
            }
            } } in
      case ltFloat# x10_ajIo 0.0# of {
        __DEFAULT ->
          case ww3_ajIj `cast` <Co:1> of nt_sjU9 { I32# ipv_sjUb ->
          jump $j_skbz ipv_sjUb nt_sjU9
          };
        1# ->
          case ww3_ajIj `cast` <Co:1> of { I32# x#3_akbm ->
          let { ipv_sjUb = narrow32Int# (-# x#3_akbm 1#) } in
          jump $j_skbz ipv_sjUb (I32# ipv_sjUb)
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 114, types: 96, coercions: 12, joins: 0/4}
floatTransformFloor
  = \ @ a_ajoV $dRealFrac_ajoX eta_B1 ->
      let { $dReal_sjKC = $p1RealFrac $dRealFrac_ajoX } in
      let { $dNum_sjKB = $p1Real $dReal_sjKC } in
      let { f_sjKA = floor $dRealFrac_ajoX $fIntegralCInt } in
      \ x_X9la ->
        case eta_B1 of { V3 a1_ajzt b1_ajzu c_ajzv ->
        case a1_ajzt of { V3 ww1_skPV ww2_skPW ww3_skPX ->
        case b1_ajzu of { V3 ww5_skQ0 ww6_skQ1 ww7_skQ2 ->
        case c_ajzv of { V3 ww9_skQ5 ww10_skQ6 ww11_skQ7 ->
        case x_X9la of { V3 a2_XjC6 b2_XjC8 c1_XjCa ->
        case a2_XjC6 `cast` <Co:1> of { I32# x#_skPM ->
        case b2_XjC8 `cast` <Co:1> of { I32# x#1_skPP ->
        case c1_XjCa `cast` <Co:1> of { I32# x#2_skPS ->
        case $dNum_sjKB of
        { C:Num ww13_ajwD ww14_ajwE ww15_ajwF ww16_ajwG ww17_ajwH ww18_ajwI
                ww19_ajwJ ->
        case ww19_ajwJ (smallInteger x#_skPM) of dt_XdRZ { __DEFAULT ->
        case ww19_ajwJ (smallInteger x#1_skPP) of dt1_XdS4 { __DEFAULT ->
        case ww19_ajwJ (smallInteger x#2_skPS) of dt2_XdS9 { __DEFAULT ->
        let {
          $wf_skvl
            = \ ww20_skvh ww21_skvi ww22_skvj ->
                case ww15_ajwF ww20_skvh dt_XdRZ of dt3_XdSa { __DEFAULT ->
                case ww15_ajwF ww21_skvi dt1_XdS4 of dt4_XdSf { __DEFAULT ->
                case ww15_ajwF ww22_skvj dt2_XdS9 of dt5_XdSk { __DEFAULT ->
                ww13_ajwD (ww13_ajwD dt3_XdSa dt4_XdSf) dt5_XdSk
                }
                }
                } } in
        case $wf_skvl ww1_skPV ww2_skPW ww3_skPX of dt3_XdRP { __DEFAULT ->
        case $wf_skvl ww5_skQ0 ww6_skQ1 ww7_skQ2 of dt4_XdRU { __DEFAULT ->
        case $wf_skvl ww9_skQ5 ww10_skQ6 ww11_skQ7 of dt5_XdVU
        { __DEFAULT ->
        case (f_sjKA dt3_XdRP) `cast` <Co:1> of nt_sjUv { I32# ipv_sjUx ->
        case (f_sjKA dt4_XdRU) `cast` <Co:1> of nt1_sjUz
        { I32# ipv1_sjUB ->
        case (f_sjKA dt5_XdVU) `cast` <Co:1> of nt2_sjUD
        { I32# ipv2_sjUF ->
        V3
          (nt_sjUv `cast` <Co:2>)
          (nt1_sjUz `cast` <Co:2>)
          (nt2_sjUD `cast` <Co:2>)
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }

-- RHS size: {terms: 193, types: 194, coercions: 0, joins: 2/2}
apDT
  = \ @ a_adOC $dIntegral_adOE eta_B2 eta1_B1 ->
      case eta_B2 of { V3 a1_ajzt b1_ajzu c_ajzv ->
      case a1_ajzt of { V3 a2_skQa b2_skQb c1_skQc ->
      case a2_skQa of { F# x_skQf ->
      case b2_skQb of { F# x1_skQl ->
      case c1_skQc of { F# x2_skQr ->
      case b1_ajzu of { V3 a3_skQx b3_skQy c2_skQz ->
      case a3_skQx of { F# x3_skQC ->
      case b3_skQy of { F# x4_skQF ->
      case c2_skQz of { F# x5_skQI ->
      case c_ajzv of { V3 a4_skQL b4_skQM c3_skQN ->
      case a4_skQL of { F# x6_skQQ ->
      case b4_skQM of { F# x7_skQT ->
      case c3_skQN of { F# x8_skQW ->
      case eta1_B1 of { V3 d_ajNQ e_ajNR f_ajNS ->
      case d_ajNQ of { F# y_skQi ->
      case e_ajNR of { F# y1_skQo ->
      case f_ajNS of { F# y2_skQu ->
      case $w$cproperFraction1
             $dIntegral_adOE
             (plusFloat#
                (plusFloat#
                   (timesFloat# x_skQf y_skQi) (timesFloat# x1_skQl y1_skQo))
                (timesFloat# x2_skQr y2_skQu))
      of
      { (# ww3_ajIj, ww4_ajIk #) ->
      case ww4_ajIk of { F# x9_ajIo ->
      join {
        $j_skcA dt_XdYn
          = case $w$cproperFraction1
                   $dIntegral_adOE
                   (plusFloat#
                      (plusFloat#
                         (timesFloat# x3_skQC y_skQi) (timesFloat# x4_skQF y1_skQo))
                      (timesFloat# x5_skQI y2_skQu))
            of
            { (# ww5_XjMC, ww6_XjME #) ->
            case ww6_XjME of { F# x10_XjMM ->
            join {
              $j1_skcy dt1_XdTy
                = case $w$cproperFraction1
                         $dIntegral_adOE
                         (plusFloat#
                            (plusFloat#
                               (timesFloat# x6_skQQ y_skQi) (timesFloat# x7_skQT y1_skQo))
                            (timesFloat# x8_skQW y2_skQu))
                  of
                  { (# ww8_XjMU, ww9_XjMW #) ->
                  case ww9_XjMW of { F# x11_XjN4 ->
                  case ltFloat# x11_XjN4 0.0# of {
                    __DEFAULT -> case ww8_XjMU of { __DEFAULT -> V2 dt_XdYn dt1_XdTy };
                    1# ->
                      case $p1Integral $dIntegral_adOE of
                      { C:Real ww10_skvr ww11_skvC ww12_skvD ->
                      case ww10_skvr of
                      { C:Num ww14_skvu ww15_skvv ww16_skvw ww17_skvx ww18_skvy ww19_skvz
                              ww20_skvA ->
                      case ww15_skvv ww8_XjMU (ww20_skvA homoCoords1) of { __DEFAULT ->
                      V2 dt_XdYn dt1_XdTy
                      }
                      }
                      }
                  }
                  }
                  } } in
            case ltFloat# x10_XjMM 0.0# of {
              __DEFAULT ->
                case ww5_XjMC of dt1_XdTy { __DEFAULT -> jump $j1_skcy dt1_XdTy };
              1# ->
                case $p1Integral $dIntegral_adOE of
                { C:Real ww7_skvT ww8_skw4 ww9_skw5 ->
                case ww7_skvT of
                { C:Num ww11_skvW ww12_skvX ww13_skvY ww14_skvZ ww15_skw0 ww16_skw1
                        ww17_skw2 ->
                case ww12_skvX ww5_XjMC (ww17_skw2 homoCoords1) of dt1_XdTy
                { __DEFAULT ->
                jump $j1_skcy dt1_XdTy
                }
                }
                }
            }
            }
            } } in
      case ltFloat# x9_ajIo 0.0# of {
        __DEFAULT ->
          case ww3_ajIj of dt_XdYn { __DEFAULT -> jump $j_skcA dt_XdYn };
        1# ->
          case $p1Integral $dIntegral_adOE of
          { C:Real ww1_skwk ww5_skwv ww6_skww ->
          case ww1_skwk of
          { C:Num ww8_skwn ww9_skwo ww10_skwp ww11_skwq ww12_skwr ww13_skws
                  ww14_skwt ->
          case ww9_skwo ww3_ajIj (ww14_skwt homoCoords1) of dt_XdYn
          { __DEFAULT ->
          jump $j_skcA dt_XdYn
          }
          }
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 20, types: 7, coercions: 0, joins: 0/0}
rotation2
  = \ w_sky5 ->
      case w_sky5 of { F# ww1_sky8 ->
      V2
        (V2
           (F# (cosFloat# ww1_sky8)) (F# (negateFloat# (sinFloat# ww1_sky8))))
        (V2 (F# (sinFloat# ww1_sky8)) (F# (cosFloat# ww1_sky8)))
      }

-- RHS size: {terms: 23, types: 7, coercions: 0, joins: 0/0}
rotation
  = \ w_skye ->
      case w_skye of { F# ww1_skyh ->
      V3
        (V3
           (F# (cosFloat# ww1_skyh))
           (F# (negateFloat# (sinFloat# ww1_skyh)))
           m22AffineIdD3)
        (V3
           (F# (sinFloat# ww1_skyh)) (F# (cosFloat# ww1_skyh)) m22AffineIdD3)
        m22AffineIdD1
      }

-- RHS size: {terms: 161, types: 26, coercions: 0, joins: 0/11}
$wrotateAround
  = \ ww_skzM ww1_skzT ww2_skzY ->
      let { dt_sjVM = negateFloat# ww1_skzT } in
      let { dt1_sjVN = negateFloat# ww2_skzY } in
      let { ww3_skFk = cosFloat# ww_skzM } in
      let { ww4_skFm = negateFloat# (sinFloat# ww_skzM) } in
      let {
        ipv_skG0
          = plusFloat#
              (timesFloat# 0.0# ww4_skFm) (timesFloat# 0.0# ww3_skFk) } in
      let { ww5_skFo = sinFloat# ww_skzM } in
      let {
        ipv1_skFZ
          = plusFloat#
              (timesFloat# 0.0# ww3_skFk) (timesFloat# 0.0# ww5_skFo) } in
      let {
        ipv2_skFY
          = plusFloat#
              (plusFloat# (timesFloat# 0.0# ww4_skFm) ww3_skFk)
              (timesFloat# ww2_skzY 0.0#) } in
      let {
        ipv3_skFX
          = plusFloat#
              (plusFloat# (timesFloat# 0.0# ww3_skFk) ww5_skFo)
              (timesFloat# ww2_skzY 0.0#) } in
      let {
        ipv4_skFW
          = plusFloat#
              (plusFloat# ww4_skFm (timesFloat# 0.0# ww3_skFk))
              (timesFloat# ww1_skzT 0.0#) } in
      let {
        ipv5_skFV
          = plusFloat#
              (plusFloat# ww3_skFk (timesFloat# 0.0# ww5_skFo))
              (timesFloat# ww1_skzT 0.0#) } in
      (# V3
           (F#
              (plusFloat#
                 (plusFloat# ipv5_skFV (timesFloat# ipv4_skFW 0.0#))
                 (timesFloat# ww1_skzT 0.0#)))
           (F#
              (plusFloat#
                 (plusFloat# (timesFloat# ipv5_skFV 0.0#) ipv4_skFW)
                 (timesFloat# ww1_skzT 0.0#)))
           (F#
              (plusFloat#
                 (plusFloat#
                    (timesFloat# ipv5_skFV dt_sjVM) (timesFloat# ipv4_skFW dt1_sjVN))
                 ww1_skzT)),
         V3
           (F#
              (plusFloat#
                 (plusFloat# ipv3_skFX (timesFloat# ipv2_skFY 0.0#))
                 (timesFloat# ww2_skzY 0.0#)))
           (F#
              (plusFloat#
                 (plusFloat# (timesFloat# ipv3_skFX 0.0#) ipv2_skFY)
                 (timesFloat# ww2_skzY 0.0#)))
           (F#
              (plusFloat#
                 (plusFloat#
                    (timesFloat# ipv3_skFX dt_sjVM) (timesFloat# ipv2_skFY dt1_sjVN))
                 ww2_skzY)),
         V3
           (F# (plusFloat# ipv1_skFZ (timesFloat# ipv_skG0 0.0#)))
           (F# (plusFloat# (timesFloat# ipv1_skFZ 0.0#) ipv_skG0))
           (F#
              (plusFloat#
                 (plusFloat#
                    (timesFloat# ipv1_skFZ dt_sjVM) (timesFloat# ipv_skG0 dt1_sjVN))
                 1.0#)) #)

-- RHS size: {terms: 24, types: 31, coercions: 0, joins: 0/0}
rotateAround
  = \ w_skzI w1_skzJ ->
      case w_skzI of { F# ww1_skzM ->
      case w1_skzJ of { V2 ww3_skzQ ww4_skzV ->
      case ww3_skzQ of { F# ww6_skR2 ->
      case ww4_skzV of { F# ww8_skR5 ->
      case $wrotateAround ww1_skzM ww6_skR2 ww8_skR5 of
      { (# ww10_skAu, ww11_skAv, ww12_skAw #) ->
      V3 ww10_skAu ww11_skAv ww12_skAw
      }
      }
      }
      }
      }

-- RHS size: {terms: 18, types: 45, coercions: 0, joins: 0/0}
appDTFloor
  = \ t_aaBy eta_B1 ->
      map
        (\ ds_ajJP ->
           (case ds_ajJP of { (a1_ajJS, b1_ajJT) ->
            appDTFloor_$sfloatTransformFloor t_aaBy a1_ajJS
            },
            case ds_ajJP of { (a1_ajJX, b1_ajJY) ->
            appDTFloor_$sfloatTransformFloor t_aaBy b1_ajJY
            }))
        eta_B1


------ Local rules for imported ids --------
"SPEC floatTransformFloor @ Float"
    forall $dRealFrac_sjKD.
      floatTransformFloor $dRealFrac_sjKD
      = appDTFloor_$sfloatTransformFloor


[ 4 of 17] Compiling Obelisk.Graphics.Primitives ( src\Obelisk\Graphics\Primitives.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Graphics\Primitives.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 2,449, types: 1,942, coercions: 50, joins: 1/24}

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
$WPrim = \ dt_alRu -> Prim @~ <Co:2> dt_alRu

-- RHS size: {terms: 5, types: 7, coercions: 2, joins: 0/0}
$WGroupPrim
  = \ dt_alRx dt_alRy -> GroupPrim @~ <Co:2> dt_alRx dt_alRy

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
$WEvaldP = \ dt_alRG -> EvaldP @~ <Co:2> dt_alRG

-- RHS size: {terms: 5, types: 7, coercions: 2, joins: 0/0}
$WEvaldGP = \ dt_alRJ dt_alRK -> EvaldGP @~ <Co:2> dt_alRJ dt_alRK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_rnRC = "Line "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_rnRD = "Circle "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_rnRE = "FillTriangle "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rnRF = "FillCircle "#

-- RHS size: {terms: 680, types: 597, coercions: 20, joins: 0/4}
$w$s$cshowsPrec1
  = \ ww_snj0 w_sniW w1_sniX ->
      case w_sniW of {
        Line b1_amf4 b2_amf5 b3_amf6 ->
          let {
            g_smr5
              = \ eta_X2u ->
                  case b3_amf6 of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                  case ww3_ammI of { W8# x#_snwt ->
                  case ww4_ammJ of { W8# x#1_snww ->
                  case ww5_ammK of { W8# x#2_snwz ->
                  case ww6_ammL of { W8# x#3_snwC ->
                  : $fShow(,)4
                    (unpackAppendCString#
                       $fShow1V2
                       (case $wshowSignedInt
                               11#
                               (word2Int# x#_snwt)
                               (: showSpace1
                                  (case $wshowSignedInt
                                          11#
                                          (word2Int# x#1_snww)
                                          (: showSpace1
                                             (case $wshowSignedInt
                                                     11#
                                                     (word2Int# x#2_snwz)
                                                     (: showSpace1
                                                        (case $wshowSignedInt
                                                                11#
                                                                (word2Int# x#3_snwC)
                                                                (: $fShow(,)2 eta_X2u)
                                                         of
                                                         { (# ww8_an3n, ww9_an3o #) ->
                                                         : ww8_an3n ww9_an3o
                                                         }))
                                              of
                                              { (# ww8_an3n, ww9_an3o #) ->
                                              : ww8_an3n ww9_an3o
                                              }))
                                   of
                                   { (# ww8_an3n, ww9_an3o #) ->
                                   : ww8_an3n ww9_an3o
                                   }))
                        of
                        { (# ww8_an3n, ww9_an3o #) ->
                        : ww8_an3n ww9_an3o
                        }))
                  }
                  }
                  }
                  }
                  } } in
          case >=# ww_snj0 11# of {
            __DEFAULT ->
              unpackAppendCString#
                lvl4_rnRC
                (case b1_amf4 of { V2 ww3_ammo ww4_ammp ->
                 case ww3_ammo `cast` <Co:1> of { I32# x#_snwG ->
                 case ww4_ammp `cast` <Co:1> of { I32# x#1_snwJ ->
                 : $fShow(,)4
                   (unpackAppendCString#
                      $fShowV1
                      (case $wshowSignedInt
                              11#
                              x#_snwG
                              (: showSpace1
                                 (case $wshowSignedInt
                                         11#
                                         x#1_snwJ
                                         (: $fShow(,)2
                                            (: showSpace1
                                               (case b2_amf5 of { V2 ww5_Xmpm ww6_Xmpo ->
                                                case ww5_Xmpm `cast` <Co:1> of { I32# x#2_snwM ->
                                                case ww6_Xmpo `cast` <Co:1> of { I32# x#3_snwP ->
                                                : $fShow(,)4
                                                  (unpackAppendCString#
                                                     $fShowV1
                                                     (case $wshowSignedInt
                                                             11#
                                                             x#2_snwM
                                                             (: showSpace1
                                                                (case $wshowSignedInt
                                                                        11#
                                                                        x#3_snwP
                                                                        (: $fShow(,)2
                                                                           (: showSpace1
                                                                              (g_smr5 w1_sniX)))
                                                                 of
                                                                 { (# ww8_amn6, ww9_amn7 #) ->
                                                                 : ww8_amn6 ww9_amn7
                                                                 }))
                                                      of
                                                      { (# ww8_amn6, ww9_amn7 #) ->
                                                      : ww8_amn6 ww9_amn7
                                                      }))
                                                }
                                                }
                                                })))
                                  of
                                  { (# ww5_amn6, ww6_amn7 #) ->
                                  : ww5_amn6 ww6_amn7
                                  }))
                       of
                       { (# ww5_amn6, ww6_amn7 #) ->
                       : ww5_amn6 ww6_amn7
                       }))
                 }
                 }
                 });
            1# ->
              : $fShow(,)4
                (unpackAppendCString#
                   lvl4_rnRC
                   (case b1_amf4 of { V2 ww3_ammo ww4_ammp ->
                    case ww3_ammo `cast` <Co:1> of { I32# x#_snwT ->
                    case ww4_ammp `cast` <Co:1> of { I32# x#1_snwW ->
                    : $fShow(,)4
                      (unpackAppendCString#
                         $fShowV1
                         (case $wshowSignedInt
                                 11#
                                 x#_snwT
                                 (: showSpace1
                                    (case $wshowSignedInt
                                            11#
                                            x#1_snwW
                                            (: $fShow(,)2
                                               (: showSpace1
                                                  (case b2_amf5 of { V2 ww5_Xmpm ww6_Xmpo ->
                                                   case ww5_Xmpm `cast` <Co:1> of { I32# x#2_snwZ ->
                                                   case ww6_Xmpo `cast` <Co:1> of { I32# x#3_snx2 ->
                                                   : $fShow(,)4
                                                     (unpackAppendCString#
                                                        $fShowV1
                                                        (case $wshowSignedInt
                                                                11#
                                                                x#2_snwZ
                                                                (: showSpace1
                                                                   (case $wshowSignedInt
                                                                           11#
                                                                           x#3_snx2
                                                                           (: $fShow(,)2
                                                                              (: showSpace1
                                                                                 (g_smr5
                                                                                    (: $fShow(,)2
                                                                                       w1_sniX))))
                                                                    of
                                                                    { (# ww8_amn6, ww9_amn7 #) ->
                                                                    : ww8_amn6 ww9_amn7
                                                                    }))
                                                         of
                                                         { (# ww8_amn6, ww9_amn7 #) ->
                                                         : ww8_amn6 ww9_amn7
                                                         }))
                                                   }
                                                   }
                                                   })))
                                     of
                                     { (# ww5_amn6, ww6_amn7 #) ->
                                     : ww5_amn6 ww6_amn7
                                     }))
                          of
                          { (# ww5_amn6, ww6_amn7 #) ->
                          : ww5_amn6 ww6_amn7
                          }))
                    }
                    }
                    }))
          };
        Circle b1_amf8 b2_amf9 b3_amfa ->
          let {
            p_smrd
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl5_rnRD
                    (case b1_amf8 of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo `cast` <Co:1> of { I32# x#_snx6 ->
                     case ww4_ammp `cast` <Co:1> of { I32# x#1_snx9 ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          (case $wshowSignedInt
                                  11#
                                  x#_snx6
                                  (: showSpace1
                                     (case $wshowSignedInt
                                             11#
                                             x#1_snx9
                                             (: $fShow(,)2
                                                (: showSpace1
                                                   (case b2_amf9 `cast` <Co:1> of { I32# x#2_XmpW ->
                                                    case $wshowSignedInt
                                                           11#
                                                           x#2_XmpW
                                                           (: showSpace1
                                                              (case b3_amfa of
                                                               { V4 ww5_ammI ww6_ammJ ww7_ammK
                                                                    ww8_ammL ->
                                                               case ww5_ammI of { W8# x#3_snxc ->
                                                               case ww6_ammJ of { W8# x#4_snxf ->
                                                               case ww7_ammK of { W8# x#5_snxi ->
                                                               case ww8_ammL of { W8# x#6_snxl ->
                                                               : $fShow(,)4
                                                                 (unpackAppendCString#
                                                                    $fShow1V2
                                                                    (case $wshowSignedInt
                                                                            11#
                                                                            (word2Int# x#3_snxc)
                                                                            (: showSpace1
                                                                               (case $wshowSignedInt
                                                                                       11#
                                                                                       (word2Int#
                                                                                          x#4_snxf)
                                                                                       (: showSpace1
                                                                                          (case $wshowSignedInt
                                                                                                  11#
                                                                                                  (word2Int#
                                                                                                     x#5_snxi)
                                                                                                  (: showSpace1
                                                                                                     (case $wshowSignedInt
                                                                                                             11#
                                                                                                             (word2Int#
                                                                                                                x#6_snxl)
                                                                                                             (: $fShow(,)2
                                                                                                                x_X9m2)
                                                                                                      of
                                                                                                      { (# ww10_an3n,
                                                                                                           ww11_an3o #) ->
                                                                                                      : ww10_an3n
                                                                                                        ww11_an3o
                                                                                                      }))
                                                                                           of
                                                                                           { (# ww10_an3n,
                                                                                                ww11_an3o #) ->
                                                                                           : ww10_an3n
                                                                                             ww11_an3o
                                                                                           }))
                                                                                of
                                                                                { (# ww10_an3n,
                                                                                     ww11_an3o #) ->
                                                                                : ww10_an3n
                                                                                  ww11_an3o
                                                                                }))
                                                                     of
                                                                     { (# ww10_an3n, ww11_an3o #) ->
                                                                     : ww10_an3n ww11_an3o
                                                                     }))
                                                               }
                                                               }
                                                               }
                                                               }
                                                               }))
                                                    of
                                                    { (# ww5_amn6, ww6_amn7 #) ->
                                                    : ww5_amn6 ww6_amn7
                                                    }
                                                    })))
                                      of
                                      { (# ww5_amn6, ww6_amn7 #) ->
                                      : ww5_amn6 ww6_amn7
                                      }))
                           of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }))
                     }
                     }
                     }) } in
          case >=# ww_snj0 11# of {
            __DEFAULT -> p_smrd w1_sniX;
            1# -> : $fShow(,)4 (p_smrd (: $fShow(,)2 w1_sniX))
          };
        FillTriangle b1_amfc b2_amfd b3_amfe b4_amff ->
          let {
            p_smrn
              = \ x_X9ma ->
                  unpackAppendCString#
                    lvl6_rnRE
                    (case b1_amfc of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo `cast` <Co:1> of { I32# x#_snxp ->
                     case ww4_ammp `cast` <Co:1> of { I32# x#1_snxs ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          (case $wshowSignedInt
                                  11#
                                  x#_snxp
                                  (: showSpace1
                                     (case $wshowSignedInt
                                             11#
                                             x#1_snxs
                                             (: $fShow(,)2
                                                (: showSpace1
                                                   (case b2_amfd of { V2 ww5_Xmpn ww6_Xmpp ->
                                                    case ww5_Xmpn `cast` <Co:1> of
                                                    { I32# x#2_snxv ->
                                                    case ww6_Xmpp `cast` <Co:1> of
                                                    { I32# x#3_snxy ->
                                                    : $fShow(,)4
                                                      (unpackAppendCString#
                                                         $fShowV1
                                                         (case $wshowSignedInt
                                                                 11#
                                                                 x#2_snxv
                                                                 (: showSpace1
                                                                    (case $wshowSignedInt
                                                                            11#
                                                                            x#3_snxy
                                                                            (: $fShow(,)2
                                                                               (: showSpace1
                                                                                  (case b3_amfe of
                                                                                   { V2 ww8_XmpI
                                                                                        ww9_XmpK ->
                                                                                   case ww8_XmpI
                                                                                        `cast` <Co:1>
                                                                                   of
                                                                                   { I32# x#4_snxB ->
                                                                                   case ww9_XmpK
                                                                                        `cast` <Co:1>
                                                                                   of
                                                                                   { I32# x#5_snxE ->
                                                                                   : $fShow(,)4
                                                                                     (unpackAppendCString#
                                                                                        $fShowV1
                                                                                        (case $wshowSignedInt
                                                                                                11#
                                                                                                x#4_snxB
                                                                                                (: showSpace1
                                                                                                   (case $wshowSignedInt
                                                                                                           11#
                                                                                                           x#5_snxE
                                                                                                           (: $fShow(,)2
                                                                                                              (: showSpace1
                                                                                                                 (case b4_amff
                                                                                                                  of
                                                                                                                  { V4 ww11_ammI
                                                                                                                       ww12_ammJ
                                                                                                                       ww13_ammK
                                                                                                                       ww14_ammL ->
                                                                                                                  case ww11_ammI
                                                                                                                  of
                                                                                                                  { W8# x#6_snxH ->
                                                                                                                  case ww12_ammJ
                                                                                                                  of
                                                                                                                  { W8# x#7_snxK ->
                                                                                                                  case ww13_ammK
                                                                                                                  of
                                                                                                                  { W8# x#8_snxN ->
                                                                                                                  case ww14_ammL
                                                                                                                  of
                                                                                                                  { W8# x#9_snxQ ->
                                                                                                                  : $fShow(,)4
                                                                                                                    (unpackAppendCString#
                                                                                                                       $fShow1V2
                                                                                                                       (case $wshowSignedInt
                                                                                                                               11#
                                                                                                                               (word2Int#
                                                                                                                                  x#6_snxH)
                                                                                                                               (: showSpace1
                                                                                                                                  (case $wshowSignedInt
                                                                                                                                          11#
                                                                                                                                          (word2Int#
                                                                                                                                             x#7_snxK)
                                                                                                                                          (: showSpace1
                                                                                                                                             (case $wshowSignedInt
                                                                                                                                                     11#
                                                                                                                                                     (word2Int#
                                                                                                                                                        x#8_snxN)
                                                                                                                                                     (: showSpace1
                                                                                                                                                        (case $wshowSignedInt
                                                                                                                                                                11#
                                                                                                                                                                (word2Int#
                                                                                                                                                                   x#9_snxQ)
                                                                                                                                                                (: $fShow(,)2
                                                                                                                                                                   x_X9ma)
                                                                                                                                                         of
                                                                                                                                                         { (# ww16_an3n,
                                                                                                                                                              ww17_an3o #) ->
                                                                                                                                                         : ww16_an3n
                                                                                                                                                           ww17_an3o
                                                                                                                                                         }))
                                                                                                                                              of
                                                                                                                                              { (# ww16_an3n,
                                                                                                                                                   ww17_an3o #) ->
                                                                                                                                              : ww16_an3n
                                                                                                                                                ww17_an3o
                                                                                                                                              }))
                                                                                                                                   of
                                                                                                                                   { (# ww16_an3n,
                                                                                                                                        ww17_an3o #) ->
                                                                                                                                   : ww16_an3n
                                                                                                                                     ww17_an3o
                                                                                                                                   }))
                                                                                                                        of
                                                                                                                        { (# ww16_an3n,
                                                                                                                             ww17_an3o #) ->
                                                                                                                        : ww16_an3n
                                                                                                                          ww17_an3o
                                                                                                                        }))
                                                                                                                  }
                                                                                                                  }
                                                                                                                  }
                                                                                                                  }
                                                                                                                  })))
                                                                                                    of
                                                                                                    { (# ww11_amn6,
                                                                                                         ww12_amn7 #) ->
                                                                                                    : ww11_amn6
                                                                                                      ww12_amn7
                                                                                                    }))
                                                                                         of
                                                                                         { (# ww11_amn6,
                                                                                              ww12_amn7 #) ->
                                                                                         : ww11_amn6
                                                                                           ww12_amn7
                                                                                         }))
                                                                                   }
                                                                                   }
                                                                                   })))
                                                                     of
                                                                     { (# ww8_amn6, ww9_amn7 #) ->
                                                                     : ww8_amn6 ww9_amn7
                                                                     }))
                                                          of
                                                          { (# ww8_amn6, ww9_amn7 #) ->
                                                          : ww8_amn6 ww9_amn7
                                                          }))
                                                    }
                                                    }
                                                    })))
                                      of
                                      { (# ww5_amn6, ww6_amn7 #) ->
                                      : ww5_amn6 ww6_amn7
                                      }))
                           of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }))
                     }
                     }
                     }) } in
          case >=# ww_snj0 11# of {
            __DEFAULT -> p_smrn w1_sniX;
            1# -> : $fShow(,)4 (p_smrn (: $fShow(,)2 w1_sniX))
          };
        FillCircle b1_amfh b2_amfi b3_amfj ->
          let {
            p_smrx
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl7_rnRF
                    (case b1_amfh of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo `cast` <Co:1> of { I32# x#_snxU ->
                     case ww4_ammp `cast` <Co:1> of { I32# x#1_snxX ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          (case $wshowSignedInt
                                  11#
                                  x#_snxU
                                  (: showSpace1
                                     (case $wshowSignedInt
                                             11#
                                             x#1_snxX
                                             (: $fShow(,)2
                                                (: showSpace1
                                                   (case b2_amfi `cast` <Co:1> of { I32# x#2_XmpW ->
                                                    case $wshowSignedInt
                                                           11#
                                                           x#2_XmpW
                                                           (: showSpace1
                                                              (case b3_amfj of
                                                               { V4 ww5_ammI ww6_ammJ ww7_ammK
                                                                    ww8_ammL ->
                                                               case ww5_ammI of { W8# x#3_sny0 ->
                                                               case ww6_ammJ of { W8# x#4_sny3 ->
                                                               case ww7_ammK of { W8# x#5_sny6 ->
                                                               case ww8_ammL of { W8# x#6_sny9 ->
                                                               : $fShow(,)4
                                                                 (unpackAppendCString#
                                                                    $fShow1V2
                                                                    (case $wshowSignedInt
                                                                            11#
                                                                            (word2Int# x#3_sny0)
                                                                            (: showSpace1
                                                                               (case $wshowSignedInt
                                                                                       11#
                                                                                       (word2Int#
                                                                                          x#4_sny3)
                                                                                       (: showSpace1
                                                                                          (case $wshowSignedInt
                                                                                                  11#
                                                                                                  (word2Int#
                                                                                                     x#5_sny6)
                                                                                                  (: showSpace1
                                                                                                     (case $wshowSignedInt
                                                                                                             11#
                                                                                                             (word2Int#
                                                                                                                x#6_sny9)
                                                                                                             (: $fShow(,)2
                                                                                                                x_X9m2)
                                                                                                      of
                                                                                                      { (# ww10_an3n,
                                                                                                           ww11_an3o #) ->
                                                                                                      : ww10_an3n
                                                                                                        ww11_an3o
                                                                                                      }))
                                                                                           of
                                                                                           { (# ww10_an3n,
                                                                                                ww11_an3o #) ->
                                                                                           : ww10_an3n
                                                                                             ww11_an3o
                                                                                           }))
                                                                                of
                                                                                { (# ww10_an3n,
                                                                                     ww11_an3o #) ->
                                                                                : ww10_an3n
                                                                                  ww11_an3o
                                                                                }))
                                                                     of
                                                                     { (# ww10_an3n, ww11_an3o #) ->
                                                                     : ww10_an3n ww11_an3o
                                                                     }))
                                                               }
                                                               }
                                                               }
                                                               }
                                                               }))
                                                    of
                                                    { (# ww5_amn6, ww6_amn7 #) ->
                                                    : ww5_amn6 ww6_amn7
                                                    }
                                                    })))
                                      of
                                      { (# ww5_amn6, ww6_amn7 #) ->
                                      : ww5_amn6 ww6_amn7
                                      }))
                           of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }))
                     }
                     }
                     }) } in
          case >=# ww_snj0 11# of {
            __DEFAULT -> p_smrx w1_sniX;
            1# -> : $fShow(,)4 (p_smrx (: $fShow(,)2 w1_sniX))
          }
      }

-- RHS size: {terms: 608, types: 417, coercions: 2, joins: 0/4}
$w$s$cshowsPrec
  = \ ww_snjc w_snj8 w1_snj9 ->
      case w_snj8 of {
        Line b1_amf4 b2_amf5 b3_amf6 ->
          let {
            g_smqr
              = \ eta_X2v ->
                  case b3_amf6 of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                  case ww3_ammI of { W8# x#_snyc ->
                  case ww4_ammJ of { W8# x#1_snyf ->
                  case ww5_ammK of { W8# x#2_snyi ->
                  case ww6_ammL of { W8# x#3_snyl ->
                  : $fShow(,)4
                    (unpackAppendCString#
                       $fShow1V2
                       (case $wshowSignedInt
                               11#
                               (word2Int# x#_snyc)
                               (: showSpace1
                                  (case $wshowSignedInt
                                          11#
                                          (word2Int# x#1_snyf)
                                          (: showSpace1
                                             (case $wshowSignedInt
                                                     11#
                                                     (word2Int# x#2_snyi)
                                                     (: showSpace1
                                                        (case $wshowSignedInt
                                                                11#
                                                                (word2Int# x#3_snyl)
                                                                (: $fShow(,)2 eta_X2v)
                                                         of
                                                         { (# ww8_an3n, ww9_an3o #) ->
                                                         : ww8_an3n ww9_an3o
                                                         }))
                                              of
                                              { (# ww8_an3n, ww9_an3o #) ->
                                              : ww8_an3n ww9_an3o
                                              }))
                                   of
                                   { (# ww8_an3n, ww9_an3o #) ->
                                   : ww8_an3n ww9_an3o
                                   }))
                        of
                        { (# ww8_an3n, ww9_an3o #) ->
                        : ww8_an3n ww9_an3o
                        }))
                  }
                  }
                  }
                  }
                  } } in
          case >=# ww_snjc 11# of {
            __DEFAULT ->
              unpackAppendCString#
                lvl4_rnRC
                (case b1_amf4 of { V2 ww3_ammo ww4_ammp ->
                 case ww3_ammo of { F# ww5_snyp ->
                 case ww4_ammp of { F# ww7_snys ->
                 : $fShow(,)4
                   (unpackAppendCString#
                      $fShowV1
                      ($w$sshowSignedFloat1
                         $fShowFloat2
                         $fReadV3
                         ww5_snyp
                         (: showSpace1
                            ($w$sshowSignedFloat1
                               $fShowFloat2
                               $fReadV3
                               ww7_snys
                               (: $fShow(,)2
                                  (: showSpace1
                                     (case b2_amf5 of { V2 ww9_Xmpd ww10_Xmpf ->
                                      case ww9_Xmpd of { F# ww12_snyv ->
                                      case ww10_Xmpf of { F# ww14_snyy ->
                                      : $fShow(,)4
                                        (unpackAppendCString#
                                           $fShowV1
                                           ($w$sshowSignedFloat1
                                              $fShowFloat2
                                              $fReadV3
                                              ww12_snyv
                                              (: showSpace1
                                                 ($w$sshowSignedFloat1
                                                    $fShowFloat2
                                                    $fReadV3
                                                    ww14_snyy
                                                    (: $fShow(,)2
                                                       (: showSpace1 (g_smqr w1_snj9)))))))
                                      }
                                      }
                                      })))))))
                 }
                 }
                 });
            1# ->
              : $fShow(,)4
                (unpackAppendCString#
                   lvl4_rnRC
                   (case b1_amf4 of { V2 ww3_ammo ww4_ammp ->
                    case ww3_ammo of { F# ww5_snyC ->
                    case ww4_ammp of { F# ww7_snyF ->
                    : $fShow(,)4
                      (unpackAppendCString#
                         $fShowV1
                         ($w$sshowSignedFloat1
                            $fShowFloat2
                            $fReadV3
                            ww5_snyC
                            (: showSpace1
                               ($w$sshowSignedFloat1
                                  $fShowFloat2
                                  $fReadV3
                                  ww7_snyF
                                  (: $fShow(,)2
                                     (: showSpace1
                                        (case b2_amf5 of { V2 ww9_Xmpd ww10_Xmpf ->
                                         case ww9_Xmpd of { F# ww12_snyI ->
                                         case ww10_Xmpf of { F# ww14_snyL ->
                                         : $fShow(,)4
                                           (unpackAppendCString#
                                              $fShowV1
                                              ($w$sshowSignedFloat1
                                                 $fShowFloat2
                                                 $fReadV3
                                                 ww12_snyI
                                                 (: showSpace1
                                                    ($w$sshowSignedFloat1
                                                       $fShowFloat2
                                                       $fReadV3
                                                       ww14_snyL
                                                       (: $fShow(,)2
                                                          (: showSpace1
                                                             (g_smqr (: $fShow(,)2 w1_snj9))))))))
                                         }
                                         }
                                         })))))))
                    }
                    }
                    }))
          };
        Circle b1_amf8 b2_amf9 b3_amfa ->
          let {
            p_smqz
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl5_rnRD
                    (case b1_amf8 of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo of { F# ww5_snyP ->
                     case ww4_ammp of { F# ww7_snyS ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          ($w$sshowSignedFloat1
                             $fShowFloat2
                             $fReadV3
                             ww5_snyP
                             (: showSpace1
                                ($w$sshowSignedFloat1
                                   $fShowFloat2
                                   $fReadV3
                                   ww7_snyS
                                   (: $fShow(,)2
                                      (: showSpace1
                                         (case b2_amf9 `cast` <Co:1> of { I32# x#_amn2 ->
                                          case $wshowSignedInt
                                                 11#
                                                 x#_amn2
                                                 (: showSpace1
                                                    (case b3_amfa of
                                                     { V4 ww9_ammI ww10_ammJ ww11_ammK ww12_ammL ->
                                                     case ww9_ammI of { W8# x#1_snyV ->
                                                     case ww10_ammJ of { W8# x#2_snyY ->
                                                     case ww11_ammK of { W8# x#3_snz1 ->
                                                     case ww12_ammL of { W8# x#4_snz4 ->
                                                     : $fShow(,)4
                                                       (unpackAppendCString#
                                                          $fShow1V2
                                                          (case $wshowSignedInt
                                                                  11#
                                                                  (word2Int# x#1_snyV)
                                                                  (: showSpace1
                                                                     (case $wshowSignedInt
                                                                             11#
                                                                             (word2Int# x#2_snyY)
                                                                             (: showSpace1
                                                                                (case $wshowSignedInt
                                                                                        11#
                                                                                        (word2Int#
                                                                                           x#3_snz1)
                                                                                        (: showSpace1
                                                                                           (case $wshowSignedInt
                                                                                                   11#
                                                                                                   (word2Int#
                                                                                                      x#4_snz4)
                                                                                                   (: $fShow(,)2
                                                                                                      x_X9m2)
                                                                                            of
                                                                                            { (# ww14_an3n,
                                                                                                 ww15_an3o #) ->
                                                                                            : ww14_an3n
                                                                                              ww15_an3o
                                                                                            }))
                                                                                 of
                                                                                 { (# ww14_an3n,
                                                                                      ww15_an3o #) ->
                                                                                 : ww14_an3n
                                                                                   ww15_an3o
                                                                                 }))
                                                                      of
                                                                      { (# ww14_an3n,
                                                                           ww15_an3o #) ->
                                                                      : ww14_an3n ww15_an3o
                                                                      }))
                                                           of
                                                           { (# ww14_an3n, ww15_an3o #) ->
                                                           : ww14_an3n ww15_an3o
                                                           }))
                                                     }
                                                     }
                                                     }
                                                     }
                                                     }))
                                          of
                                          { (# ww9_amn6, ww10_amn7 #) ->
                                          : ww9_amn6 ww10_amn7
                                          }
                                          })))))))
                     }
                     }
                     }) } in
          case >=# ww_snjc 11# of {
            __DEFAULT -> p_smqz w1_snj9;
            1# -> : $fShow(,)4 (p_smqz (: $fShow(,)2 w1_snj9))
          };
        FillTriangle b1_amfc b2_amfd b3_amfe b4_amff ->
          let {
            p_smqJ
              = \ x_X9ma ->
                  unpackAppendCString#
                    lvl6_rnRE
                    (case b1_amfc of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo of { F# ww5_snz8 ->
                     case ww4_ammp of { F# ww7_snzb ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          ($w$sshowSignedFloat1
                             $fShowFloat2
                             $fReadV3
                             ww5_snz8
                             (: showSpace1
                                ($w$sshowSignedFloat1
                                   $fShowFloat2
                                   $fReadV3
                                   ww7_snzb
                                   (: $fShow(,)2
                                      (: showSpace1
                                         (case b2_amfd of { V2 ww9_Xmpe ww10_Xmpg ->
                                          case ww9_Xmpe of { F# ww12_snze ->
                                          case ww10_Xmpg of { F# ww14_snzh ->
                                          : $fShow(,)4
                                            (unpackAppendCString#
                                               $fShowV1
                                               ($w$sshowSignedFloat1
                                                  $fShowFloat2
                                                  $fReadV3
                                                  ww12_snze
                                                  (: showSpace1
                                                     ($w$sshowSignedFloat1
                                                        $fShowFloat2
                                                        $fReadV3
                                                        ww14_snzh
                                                        (: $fShow(,)2
                                                           (: showSpace1
                                                              (case b3_amfe of
                                                               { V2 ww16_Xmpp ww17_Xmpr ->
                                                               case ww16_Xmpp of { F# ww19_snzk ->
                                                               case ww17_Xmpr of { F# ww21_snzn ->
                                                               : $fShow(,)4
                                                                 (unpackAppendCString#
                                                                    $fShowV1
                                                                    ($w$sshowSignedFloat1
                                                                       $fShowFloat2
                                                                       $fReadV3
                                                                       ww19_snzk
                                                                       (: showSpace1
                                                                          ($w$sshowSignedFloat1
                                                                             $fShowFloat2
                                                                             $fReadV3
                                                                             ww21_snzn
                                                                             (: $fShow(,)2
                                                                                (: showSpace1
                                                                                   (case b4_amff of
                                                                                    { V4 ww23_ammI
                                                                                         ww24_ammJ
                                                                                         ww25_ammK
                                                                                         ww26_ammL ->
                                                                                    case ww23_ammI
                                                                                    of
                                                                                    { W8# x#_snzq ->
                                                                                    case ww24_ammJ
                                                                                    of
                                                                                    { W8# x#1_snzt ->
                                                                                    case ww25_ammK
                                                                                    of
                                                                                    { W8# x#2_snzw ->
                                                                                    case ww26_ammL
                                                                                    of
                                                                                    { W8# x#3_snzz ->
                                                                                    : $fShow(,)4
                                                                                      (unpackAppendCString#
                                                                                         $fShow1V2
                                                                                         (case $wshowSignedInt
                                                                                                 11#
                                                                                                 (word2Int#
                                                                                                    x#_snzq)
                                                                                                 (: showSpace1
                                                                                                    (case $wshowSignedInt
                                                                                                            11#
                                                                                                            (word2Int#
                                                                                                               x#1_snzt)
                                                                                                            (: showSpace1
                                                                                                               (case $wshowSignedInt
                                                                                                                       11#
                                                                                                                       (word2Int#
                                                                                                                          x#2_snzw)
                                                                                                                       (: showSpace1
                                                                                                                          (case $wshowSignedInt
                                                                                                                                  11#
                                                                                                                                  (word2Int#
                                                                                                                                     x#3_snzz)
                                                                                                                                  (: $fShow(,)2
                                                                                                                                     x_X9ma)
                                                                                                                           of
                                                                                                                           { (# ww28_an3n,
                                                                                                                                ww29_an3o #) ->
                                                                                                                           : ww28_an3n
                                                                                                                             ww29_an3o
                                                                                                                           }))
                                                                                                                of
                                                                                                                { (# ww28_an3n,
                                                                                                                     ww29_an3o #) ->
                                                                                                                : ww28_an3n
                                                                                                                  ww29_an3o
                                                                                                                }))
                                                                                                     of
                                                                                                     { (# ww28_an3n,
                                                                                                          ww29_an3o #) ->
                                                                                                     : ww28_an3n
                                                                                                       ww29_an3o
                                                                                                     }))
                                                                                          of
                                                                                          { (# ww28_an3n,
                                                                                               ww29_an3o #) ->
                                                                                          : ww28_an3n
                                                                                            ww29_an3o
                                                                                          }))
                                                                                    }
                                                                                    }
                                                                                    }
                                                                                    }
                                                                                    })))))))
                                                               }
                                                               }
                                                               })))))))
                                          }
                                          }
                                          })))))))
                     }
                     }
                     }) } in
          case >=# ww_snjc 11# of {
            __DEFAULT -> p_smqJ w1_snj9;
            1# -> : $fShow(,)4 (p_smqJ (: $fShow(,)2 w1_snj9))
          };
        FillCircle b1_amfh b2_amfi b3_amfj ->
          let {
            p_smqT
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl7_rnRF
                    (case b1_amfh of { V2 ww3_ammo ww4_ammp ->
                     case ww3_ammo of { F# ww5_snzD ->
                     case ww4_ammp of { F# ww7_snzG ->
                     : $fShow(,)4
                       (unpackAppendCString#
                          $fShowV1
                          ($w$sshowSignedFloat1
                             $fShowFloat2
                             $fReadV3
                             ww5_snzD
                             (: showSpace1
                                ($w$sshowSignedFloat1
                                   $fShowFloat2
                                   $fReadV3
                                   ww7_snzG
                                   (: $fShow(,)2
                                      (: showSpace1
                                         (case b2_amfi `cast` <Co:1> of { I32# x#_amn2 ->
                                          case $wshowSignedInt
                                                 11#
                                                 x#_amn2
                                                 (: showSpace1
                                                    (case b3_amfj of
                                                     { V4 ww9_ammI ww10_ammJ ww11_ammK ww12_ammL ->
                                                     case ww9_ammI of { W8# x#1_snzJ ->
                                                     case ww10_ammJ of { W8# x#2_snzM ->
                                                     case ww11_ammK of { W8# x#3_snzP ->
                                                     case ww12_ammL of { W8# x#4_snzS ->
                                                     : $fShow(,)4
                                                       (unpackAppendCString#
                                                          $fShow1V2
                                                          (case $wshowSignedInt
                                                                  11#
                                                                  (word2Int# x#1_snzJ)
                                                                  (: showSpace1
                                                                     (case $wshowSignedInt
                                                                             11#
                                                                             (word2Int# x#2_snzM)
                                                                             (: showSpace1
                                                                                (case $wshowSignedInt
                                                                                        11#
                                                                                        (word2Int#
                                                                                           x#3_snzP)
                                                                                        (: showSpace1
                                                                                           (case $wshowSignedInt
                                                                                                   11#
                                                                                                   (word2Int#
                                                                                                      x#4_snzS)
                                                                                                   (: $fShow(,)2
                                                                                                      x_X9m2)
                                                                                            of
                                                                                            { (# ww14_an3n,
                                                                                                 ww15_an3o #) ->
                                                                                            : ww14_an3n
                                                                                              ww15_an3o
                                                                                            }))
                                                                                 of
                                                                                 { (# ww14_an3n,
                                                                                      ww15_an3o #) ->
                                                                                 : ww14_an3n
                                                                                   ww15_an3o
                                                                                 }))
                                                                      of
                                                                      { (# ww14_an3n,
                                                                           ww15_an3o #) ->
                                                                      : ww14_an3n ww15_an3o
                                                                      }))
                                                           of
                                                           { (# ww14_an3n, ww15_an3o #) ->
                                                           : ww14_an3n ww15_an3o
                                                           }))
                                                     }
                                                     }
                                                     }
                                                     }
                                                     }))
                                          of
                                          { (# ww9_amn6, ww10_amn7 #) ->
                                          : ww9_amn6 ww10_amn7
                                          }
                                          })))))))
                     }
                     }
                     }) } in
          case >=# ww_snjc 11# of {
            __DEFAULT -> p_smqT w1_snj9;
            1# -> : $fShow(,)4 (p_smqT (: $fShow(,)2 w1_snj9))
          }
      }

-- RHS size: {terms: 250, types: 172, coercions: 2, joins: 0/14}
$w$cshowsPrec
  = \ @ a_snji w_snjj ww_snjo w1_snjl ->
      case w1_snjl of {
        Line b1_amf4 b2_amf5 b3_amf6 ->
          let {
            f_smpP
              = case b1_amf4 of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            f1_smpO
              = case b2_amf5 of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            g_smpN
              = case b3_amf6 of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                $w$cshowsPrec $fShowWord8 11# ww3_ammI ww4_ammJ ww5_ammK ww6_ammL
                } } in
          case >=# ww_snjo 11# of {
            __DEFAULT ->
              \ x_X9m2 ->
                unpackAppendCString#
                  lvl4_rnRC
                  (f_smpP (: showSpace1 (f1_smpO (: showSpace1 (g_smpN x_X9m2)))));
            1# ->
              \ x_a9kl ->
                : $fShow(,)4
                  (unpackAppendCString#
                     lvl4_rnRC
                     (f_smpP
                        (: showSpace1
                           (f1_smpO (: showSpace1 (g_smpN (: $fShow(,)2 x_a9kl)))))))
          };
        Circle b1_amf8 b2_amf9 b3_amfa ->
          let {
            f_smpX
              = case b1_amf8 of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            g_smpW
              = case b3_amfa of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                $w$cshowsPrec $fShowWord8 11# ww3_ammI ww4_ammJ ww5_ammK ww6_ammL
                } } in
          let {
            p_smpV
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl5_rnRD
                    (f_smpX
                       (: showSpace1
                          (case b2_amf9 `cast` <Co:1> of { I32# x#_amn2 ->
                           case $wshowSignedInt 11# x#_amn2 (: showSpace1 (g_smpW x_X9m2)) of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }
                           }))) } in
          case >=# ww_snjo 11# of {
            __DEFAULT -> p_smpV;
            1# -> \ x_a9kl -> : $fShow(,)4 (p_smpV (: $fShow(,)2 x_a9kl))
          };
        FillTriangle b1_amfc b2_amfd b3_amfe b4_amff ->
          let {
            f_smq9
              = case b1_amfc of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            f1_smq8
              = case b2_amfd of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            f2_smq7
              = case b3_amfe of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            g_smq6
              = case b4_amff of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                $w$cshowsPrec $fShowWord8 11# ww3_ammI ww4_ammJ ww5_ammK ww6_ammL
                } } in
          let {
            p_smq5
              = \ x_X9ma ->
                  unpackAppendCString#
                    lvl6_rnRE
                    (f_smq9
                       (: showSpace1
                          (f1_smq8
                             (: showSpace1 (f2_smq7 (: showSpace1 (g_smq6 x_X9ma))))))) } in
          case >=# ww_snjo 11# of {
            __DEFAULT -> p_smq5;
            1# -> \ x_a9kl -> : $fShow(,)4 (p_smq5 (: $fShow(,)2 x_a9kl))
          };
        FillCircle b1_amfh b2_amfi b3_amfj ->
          let {
            f_smqh
              = case b1_amfh of { V2 ww3_ammo ww4_ammp ->
                $w$cshowsPrec w_snjj 11# ww3_ammo ww4_ammp
                } } in
          let {
            g_smqg
              = case b3_amfj of { V4 ww3_ammI ww4_ammJ ww5_ammK ww6_ammL ->
                $w$cshowsPrec $fShowWord8 11# ww3_ammI ww4_ammJ ww5_ammK ww6_ammL
                } } in
          let {
            p_smqf
              = \ x_X9m2 ->
                  unpackAppendCString#
                    lvl7_rnRF
                    (f_smqh
                       (: showSpace1
                          (case b2_amfi `cast` <Co:1> of { I32# x#_amn2 ->
                           case $wshowSignedInt 11# x#_amn2 (: showSpace1 (g_smqg x_X9m2)) of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }
                           }))) } in
          case >=# ww_snjo 11# of {
            __DEFAULT -> p_smqf;
            1# -> \ x_a9kl -> : $fShow(,)4 (p_smqf (: $fShow(,)2 x_a9kl))
          }
      }

-- RHS size: {terms: 11, types: 10, coercions: 0, joins: 0/0}
$fShowShape_$cshowsPrec
  = \ @ a_snji w_snjj w1_snjk w2_snjl ->
      case w1_snjk of { I# ww1_snjo ->
      $w$cshowsPrec w_snjj ww1_snjo w2_snjl
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowShape1 = I# 0#

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
$fShowShape_$cshow
  = \ @ a_amgd $dShow_amge x_a9kO ->
      $w$cshowsPrec $dShow_amge 0# x_a9kO []

-- RHS size: {terms: 12, types: 13, coercions: 0, joins: 0/0}
$fShowShape_$cshowList
  = \ @ a_amgd $dShow_amge ls_a9kR s_a9kS ->
      showList__
        (\ w_snjl -> $w$cshowsPrec $dShow_amge 0# w_snjl) ls_a9kR s_a9kS

-- RHS size: {terms: 9, types: 9, coercions: 0, joins: 0/0}
$fShowShape
  = \ @ a_amgd $dShow_amge ->
      C:Show
        ($fShowShape_$cshowsPrec $dShow_amge)
        ($fShowShape_$cshow $dShow_amge)
        ($fShowShape_$cshowList $dShow_amge)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl8_rnRG
  = "src\\Obelisk\\Graphics\\Primitives.hs:(65,5)-(66,76)|function show"#

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
lvl9_rnRH = patError lvl8_rnRG

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl55_rnRI = : showList__2 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
lvl10_rnRJ = unpackAppendCString# showList__4 []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl11_rnRK = "Evaluated GroupPrim"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl12_rnRL = "Evaluated Prim"#

Rec {
-- RHS size: {terms: 32, types: 51, coercions: 0, joins: 0/0}
$fShowGraphic_$cshow
  = \ ds_dmkM ->
      case ds_dmkM of {
        AffineT ipv_smnG ipv1_smnH -> lvl9_rnRH;
        EvaldP co_amim s_alzm ->
          unpackAppendCString# lvl12_rnRL ($w$s$cshowsPrec1 0# s_alzm []);
        EvaldGP co_amir label_alzn gs_alzo ->
          unpackAppendCString#
            lvl11_rnRK
            (++_$s++
               (case gs_alzo of {
                  [] -> lvl10_rnRJ;
                  : x_a9qc xs_a9qd ->
                    : showList__3
                      (++ ($fShowGraphic_$cshow x_a9qc) (showl_rnRM xs_a9qd))
                })
               $fShow(,)3
               (showLitString label_alzn $fShow[]1))
      }

-- RHS size: {terms: 13, types: 17, coercions: 0, joins: 0/0}
showl_rnRM
  = \ ds2_a9qi ->
      case ds2_a9qi of {
        [] -> lvl55_rnRI;
        : y_a9qo ys_a9qp ->
          : showList__1
            (++ ($fShowGraphic_$cshow y_a9qo) (showl_rnRM ys_a9qp))
      }
end Rec }

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
$fShowGraphic1
  = \ x_amkH s_amkI -> ++ ($fShowGraphic_$cshow x_amkH) s_amkI

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$fShowGraphic_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowGraphic1 ls_a9kR s_a9kS

-- RHS size: {terms: 7, types: 6, coercions: 0, joins: 0/0}
$fShowGraphic_$cshowsPrec
  = \ _ x_amkH s_amkI -> ++ ($fShowGraphic_$cshow x_amkH) s_amkI

-- RHS size: {terms: 4, types: 3, coercions: 0, joins: 0/0}
$fShowGraphic
  = C:Show
      $fShowGraphic_$cshowsPrec
      $fShowGraphic_$cshow
      $fShowGraphic_$cshowList

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
lvl13_rnRN = : $fShow(,)2 []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl14_rnRO = "AffineT "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl15_rnRP = "GroupPrim "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl16_rnRQ = "Prim "#

Rec {
-- RHS size: {terms: 146, types: 107, coercions: 0, joins: 0/0}
$fShowGraphic0_$cshow
  = \ ds_dmlf ->
      case ds_dmlf of {
        Prim co_amiR s_alzp ->
          unpackAppendCString# lvl16_rnRQ ($w$s$cshowsPrec 0# s_alzp []);
        GroupPrim co_amiW label_alzq xs_alzr ->
          unpackAppendCString#
            lvl15_rnRP
            (++_$s++
               (case xs_alzr of {
                  [] -> lvl10_rnRJ;
                  : x_a9qc xs1_a9qd ->
                    : showList__3
                      (++ ($fShowGraphic0_$cshow x_a9qc) (showl1_rnRR xs1_a9qd))
                })
               $fShow(,)3
               (showLitString label_alzq $fShow[]1));
        AffineT t_alzs s_alzt ->
          unpackAppendCString#
            lvl14_rnRO
            (case t_alzs of { V3 ww3_amol ww4_amom ww5_amon ->
             case ww3_amol of { V3 ww8_snAg ww9_snAh ww10_snAi ->
             case ww8_snAg of { F# ww11_snAl ->
             case ww9_snAh of { F# ww13_snAo ->
             case ww10_snAi of { F# ww15_snAr ->
             case ww4_amom of { V3 ww17_snAu ww18_snAv ww19_snAw ->
             case ww17_snAu of { F# ww21_snAz ->
             case ww18_snAv of { F# ww23_snAC ->
             case ww19_snAw of { F# ww25_snAF ->
             case ww5_amon of { V3 ww27_snAI ww28_snAJ ww29_snAK ->
             case ww27_snAI of { F# ww31_snAN ->
             case ww28_snAJ of { F# ww33_snAQ ->
             case ww29_snAK of { F# ww35_snAT ->
             ++
               (unpackAppendCString#
                  $fShow1V2
                  (: $fShow(,)4
                     (unpackAppendCString#
                        $fShow1V2
                        ($w$sshowSignedFloat1
                           $fShowFloat2
                           $fRead1V4
                           ww11_snAl
                           (: showSpace1
                              ($w$sshowSignedFloat1
                                 $fShowFloat2
                                 $fRead1V4
                                 ww13_snAo
                                 (: showSpace1
                                    ($w$sshowSignedFloat1
                                       $fShowFloat2
                                       $fRead1V4
                                       ww15_snAr
                                       (: $fShow(,)2
                                          (: showSpace1
                                             (: $fShow(,)4
                                                (unpackAppendCString#
                                                   $fShow1V2
                                                   ($w$sshowSignedFloat1
                                                      $fShowFloat2
                                                      $fRead1V4
                                                      ww21_snAz
                                                      (: showSpace1
                                                         ($w$sshowSignedFloat1
                                                            $fShowFloat2
                                                            $fRead1V4
                                                            ww23_snAC
                                                            (: showSpace1
                                                               ($w$sshowSignedFloat1
                                                                  $fShowFloat2
                                                                  $fRead1V4
                                                                  ww25_snAF
                                                                  (: $fShow(,)2
                                                                     (: showSpace1
                                                                        (: $fShow(,)4
                                                                           (unpackAppendCString#
                                                                              $fShow1V2
                                                                              ($w$sshowSignedFloat1
                                                                                 $fShowFloat2
                                                                                 $fRead1V4
                                                                                 ww31_snAN
                                                                                 (: showSpace1
                                                                                    ($w$sshowSignedFloat1
                                                                                       $fShowFloat2
                                                                                       $fRead1V4
                                                                                       ww33_snAQ
                                                                                       (: showSpace1
                                                                                          ($w$sshowSignedFloat1
                                                                                             $fShowFloat2
                                                                                             $fRead1V4
                                                                                             ww35_snAT
                                                                                             lvl13_rnRN))))))))))))))))))))))))))
               ($fShowGraphic0_$cshow s_alzt)
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             })
      }

-- RHS size: {terms: 13, types: 17, coercions: 0, joins: 0/0}
showl1_rnRR
  = \ ds2_a9qi ->
      case ds2_a9qi of {
        [] -> lvl55_rnRI;
        : y_a9qo ys_a9qp ->
          : showList__1
            (++ ($fShowGraphic0_$cshow y_a9qo) (showl1_rnRR ys_a9qp))
      }
end Rec }

-- RHS size: {terms: 6, types: 5, coercions: 0, joins: 0/0}
$fShowGraphic2
  = \ x_amkH s_amkI -> ++ ($fShowGraphic0_$cshow x_amkH) s_amkI

-- RHS size: {terms: 6, types: 8, coercions: 0, joins: 0/0}
$fShowGraphic0_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowGraphic2 ls_a9kR s_a9kS

-- RHS size: {terms: 7, types: 6, coercions: 0, joins: 0/0}
$fShowGraphic0_$cshowsPrec
  = \ _ x_amkH s_amkI -> ++ ($fShowGraphic0_$cshow x_amkH) s_amkI

-- RHS size: {terms: 4, types: 3, coercions: 0, joins: 0/0}
$fShowGraphic0
  = C:Show
      $fShowGraphic0_$cshowsPrec
      $fShowGraphic0_$cshow
      $fShowGraphic0_$cshowList

-- RHS size: {terms: 4, types: 7, coercions: 2, joins: 0/0}
anonGP = \ dt_alRy -> GroupPrim @~ <Co:2> [] dt_alRy

-- RHS size: {terms: 4, types: 7, coercions: 2, joins: 0/0}
anonEGP = \ dt_alRK -> EvaldGP @~ <Co:2> [] dt_alRK

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Graphics.Primitives"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rnRS = KindRepTyConApp $tcWord8 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rnRT = KindRepTyConApp $tcCInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rnRU = KindRepTyConApp $tcChar []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rnRV = KindRepTyConApp $tcFloat []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep4_rnRW = : $krep_rnRS []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rnRX = KindRepTyConApp $tcV4 $krep4_rnRW

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_rnRY = : $krep2_rnRU []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_rnRZ = KindRepTyConApp $tc[] $krep6_rnRY

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_rnS0 = : $krep3_rnRV []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rnS1 = KindRepTyConApp $tcV3 $krep8_rnS0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep10_rnS2 = : $krep9_rnS1 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rnS3 = KindRepTyConApp $tcV3 $krep10_rnS2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep12_rnS4 = KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep13_rnS5 = : $krep12_rnS4 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rnS6 = KindRepTyConApp $tcV2 $krep13_rnS5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcShape2 = "Shape"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcShape1 = TrNameS $tcShape2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcShape
  = TyCon
      2510656610326598181##
      3582588774957422286##
      $trModule
      $tcShape1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rnS7 = KindRepTyConApp $tcShape $krep13_rnS5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rnS8 = KindRepFun $krep5_rnRX $krep15_rnS7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_rnS9 = KindRepFun $krep14_rnS6 $krep16_rnS8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Line1 = KindRepFun $krep14_rnS6 $krep17_rnS9

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Line3 = "'Line"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Line2 = TrNameS $tc'Line3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Line
  = TyCon
      2314560049099874215##
      1575734414057034866##
      $trModule
      $tc'Line2
      1#
      $tc'Line1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'FillTriangle1 = KindRepFun $krep14_rnS6 $tc'Line1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'FillTriangle3 = "'FillTriangle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'FillTriangle2 = TrNameS $tc'FillTriangle3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'FillTriangle
  = TyCon
      4351978081120129951##
      14371802933176436600##
      $trModule
      $tc'FillTriangle2
      1#
      $tc'FillTriangle1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_rnSa = KindRepFun $krep1_rnRT $krep16_rnS8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Circle1 = KindRepFun $krep14_rnS6 $krep18_rnSa

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Circle3 = "'Circle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Circle2 = TrNameS $tc'Circle3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Circle
  = TyCon
      9703877552477575608##
      18073970802461536927##
      $trModule
      $tc'Circle2
      1#
      $tc'Circle1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'FillCircle2 = "'FillCircle"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'FillCircle1 = TrNameS $tc'FillCircle2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'FillCircle
  = TyCon
      16881139297115816575##
      3760979016625531835##
      $trModule
      $tc'FillCircle1
      1#
      $tc'Circle1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_rnSb = KindRepTyConApp $tcShape $krep8_rnS0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep20_rnSc = : $krep1_rnRT []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_rnSd = KindRepTyConApp $tcShape $krep20_rnSc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcGraphic2 = "Graphic"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcGraphic1 = TrNameS $tcGraphic2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcGraphic
  = TyCon
      3104305925923857573##
      3634643714298241486##
      $trModule
      $tcGraphic1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_rnSe = KindRepTyConApp $tcGraphic $krep13_rnS5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_rnSf = KindRepFun $krep22_rnSe $krep22_rnSe

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'AffineT1 = KindRepFun $krep11_rnS3 $krep23_rnSf

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'AffineT3 = "'AffineT"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'AffineT2 = TrNameS $tc'AffineT3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'AffineT
  = TyCon
      8300316220316683600##
      9066886423499568393##
      $trModule
      $tc'AffineT2
      1#
      $tc'AffineT1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep24_rnSg = : $krep19_rnSb []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_rnSh = KindRepTyConApp $tcGraphic $krep24_rnSg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Prim1 = KindRepFun $krep19_rnSb $krep25_rnSh

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Prim3 = "'Prim"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Prim2 = TrNameS $tc'Prim3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Prim
  = TyCon
      9901282306770823591##
      10440821627125430373##
      $trModule
      $tc'Prim2
      0#
      $tc'Prim1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep26_rnSi = : $krep25_rnSh []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_rnSj = KindRepTyConApp $tc[] $krep26_rnSi

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_rnSk = KindRepFun $krep27_rnSj $krep25_rnSh

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'GroupPrim1 = KindRepFun $krep7_rnRZ $krep28_rnSk

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'GroupPrim3 = "'GroupPrim"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'GroupPrim2 = TrNameS $tc'GroupPrim3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'GroupPrim
  = TyCon
      16468089294787094074##
      1298939497359311779##
      $trModule
      $tc'GroupPrim2
      0#
      $tc'GroupPrim1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep29_rnSl = : $krep21_rnSd []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_rnSm = KindRepTyConApp $tcGraphic $krep29_rnSl

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldP1 = KindRepFun $krep21_rnSd $krep30_rnSm

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldP3 = "'EvaldP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldP2 = TrNameS $tc'EvaldP3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldP
  = TyCon
      11556811447478828807##
      5369192266139964607##
      $trModule
      $tc'EvaldP2
      0#
      $tc'EvaldP1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep31_rnSn = : $krep30_rnSm []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_rnSo = KindRepTyConApp $tc[] $krep31_rnSn

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_rnSp = KindRepFun $krep32_rnSo $krep30_rnSm

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldGP1 = KindRepFun $krep7_rnRZ $krep33_rnSp

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldGP3 = "'EvaldGP"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldGP2 = TrNameS $tc'EvaldGP3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'EvaldGP
  = TyCon
      15771455550918612508##
      10997961375287169534##
      $trModule
      $tc'EvaldGP2
      0#
      $tc'EvaldGP1

-- RHS size: {terms: 169, types: 117, coercions: 14, joins: 1/2}
mapAft
  = \ t_alzL eta_B1 ->
      case t_alzL of { V3 a1_ajzt b1_ajzu c_ajzv ->
      case a1_ajzt of { V3 a2_snAX b2_snAY c1_snAZ ->
      case a2_snAX of { F# x_snB2 ->
      case b2_snAY of { F# x1_snB8 ->
      case c1_snAZ of { F# x2_snBe ->
      case b1_ajzu of { V3 a3_snBh b3_snBi c2_snBj ->
      case a3_snBh of { F# x3_snBm ->
      case b3_snBi of { F# x4_snBp ->
      case c2_snBj of { F# x5_snBs ->
      case c_ajzv of { V3 a4_snBv b4_snBw c3_snBx ->
      case a4_snBv of { F# x6_snBA ->
      case b4_snBw of { F# x7_snBD ->
      case c3_snBx of { F# x8_snBG ->
      case eta_B1 of { V2 x9_aaBC y_aaBD ->
      case x9_aaBC of { F# y1_snB5 ->
      case y_aaBD of { F# y2_snBb ->
      case $w$cproperFraction1
             $fIntegralCInt
             (plusFloat#
                (plusFloat#
                   (timesFloat# x_snB2 y1_snB5) (timesFloat# x1_snB8 y2_snBb))
                x2_snBe)
      of
      { (# ww3_ajIj, ww4_ajIk #) ->
      case ww4_ajIk of { F# x10_ajIo ->
      join {
        $j_smN5 ipv_smAj nt_smAh
          = case $w$cproperFraction1
                   $fIntegralCInt
                   (plusFloat#
                      (plusFloat#
                         (timesFloat# x3_snBm y1_snB5) (timesFloat# x4_snBp y2_snBb))
                      x5_snBs)
            of
            { (# ww5_XjP1, ww6_XjP3 #) ->
            case ww6_XjP3 of { F# x11_XjPb ->
            case ltFloat# x11_XjPb 0.0# of {
              __DEFAULT ->
                case ww5_XjP1 `cast` <Co:1> of nt1_smAl { I32# ipv1_smAn ->
                case $w$cproperFraction1
                       $fIntegralCInt
                       (plusFloat#
                          (plusFloat#
                             (timesFloat# x6_snBA y1_snB5) (timesFloat# x7_snBD y2_snBb))
                          x8_snBG)
                of
                { (# ww8_XjPi, ww9_XjPk #) ->
                case ww9_XjPk of { F# x12_XjPs ->
                case ww8_XjPi `cast` <Co:1> of { I32# ipv2_smAr ->
                V2 (nt_smAh `cast` <Co:2>) (nt1_smAl `cast` <Co:2>)
                }
                }
                }
                };
              1# ->
                case ww5_XjP1 `cast` <Co:1> of { I32# x#_akbm ->
                case $w$cproperFraction1
                       $fIntegralCInt
                       (plusFloat#
                          (plusFloat#
                             (timesFloat# x6_snBA y1_snB5) (timesFloat# x7_snBD y2_snBb))
                          x8_snBG)
                of
                { (# ww8_XjPi, ww9_XjPk #) ->
                case ww9_XjPk of { F# x12_XjPs ->
                case ww8_XjPi `cast` <Co:1> of { I32# ipv1_smAr ->
                V2
                  (nt_smAh `cast` <Co:2>)
                  ((I32# (narrow32Int# (-# x#_akbm 1#))) `cast` <Co:2>)
                }
                }
                }
                }
            }
            }
            } } in
      case ltFloat# x10_ajIo 0.0# of {
        __DEFAULT ->
          case ww3_ajIj `cast` <Co:1> of nt_smAh { I32# ipv_smAj ->
          jump $j_smN5 ipv_smAj nt_smAh
          };
        1# ->
          case ww3_ajIj `cast` <Co:1> of { I32# x#_akbm ->
          let { ipv_smAj = narrow32Int# (-# x#_akbm 1#) } in
          jump $j_smN5 ipv_smAj (I32# ipv_smAj)
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 39, types: 30, coercions: 0, joins: 0/0}
applyAffineTransformFloor
  = \ t_alzu ds_dmki ->
      case ds_dmki of {
        Line start_alzv end_alzw color_alzx ->
          Line
            (mapAft t_alzu start_alzv) (mapAft t_alzu end_alzw) color_alzx;
        Circle center_alzz radius_alzA color_alzB ->
          Circle (mapAft t_alzu center_alzz) radius_alzA color_alzB;
        FillTriangle v0_alzD v1_alzE v2_alzF color_alzG ->
          FillTriangle
            (mapAft t_alzu v0_alzD)
            (mapAft t_alzu v1_alzE)
            (mapAft t_alzu v2_alzF)
            color_alzG;
        FillCircle center_alzI radius_alzJ color_alzK ->
          FillCircle (mapAft t_alzu center_alzI) radius_alzJ color_alzK
      }



[ 5 of 17] Compiling Obelisk.Math.Vector ( src\Obelisk\Math\Vector.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Math\Vector.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 54, types: 26, coercions: 0, joins: 0/0}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Math.Vector"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 21, types: 4, coercions: 0, joins: 0/0}
$wvectorAngle
  = \ ww_spDJ ww1_spDO ->
      case gtFloat# ww1_spDO 0.0# of {
        __DEFAULT ->
          case $w$catan1 (F# ww1_spDO) ww_spDJ of ww2_apCG { __DEFAULT ->
          plusFloat# 6.2831855# ww2_apCG
          };
        1# -> $w$catan1 (F# ww1_spDO) ww_spDJ
      }

-- RHS size: {terms: 17, types: 11, coercions: 0, joins: 0/0}
vectorAngle
  = \ w_spDD ->
      case w_spDD of { V2 ww1_spDG ww2_spDL ->
      case ww1_spDG of { F# ww4_spEx ->
      case ww2_spDL of { F# ww6_spEA ->
      case $wvectorAngle ww4_spEx ww6_spEA of ww7_spDT { __DEFAULT ->
      F# ww7_spDT
      }
      }
      }
      }



[ 6 of 17] Compiling Obelisk.Types.Wall ( src\Obelisk\Types\Wall.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Types\Wall.o )

==================== Simplified expression ====================
derivingUnbox
  (unpackCString# "WallType"#)
  (appT
     (appT
        arrowT
        (conT
           (mkNameG_tc
              (unpackCString# "obelisk-0.1.0.0-inplace"#)
              (unpackCString# "Obelisk.Types.Wall"#)
              (unpackCString# "WallType"#))))
     (conT
        (mkNameG_tc
           (unpackCString# "base"#)
           (unpackCString# "GHC.Word"#)
           (unpackCString# "Word8"#))))
  (varE
     (mkNameG_v
        (unpackCString# "obelisk-0.1.0.0-inplace"#)
        (unpackCString# "Obelisk.Types.Wall"#)
        (unpackCString# "wallToWord8"#)))
  (varE
     (mkNameG_v
        (unpackCString# "obelisk-0.1.0.0-inplace"#)
        (unpackCString# "Obelisk.Types.Wall"#)
        (unpackCString# "word8ToWall"#)))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 954, types: 1,540, coercions: 412, joins: 0/1}

-- RHS size: {terms: 2, types: 2, coercions: 4, joins: 0/0}
$WV_WallType = \ dt_aqBQ -> (dt_aqBQ `cast` <Co:2>) `cast` <Co:2>

-- RHS size: {terms: 3, types: 5, coercions: 6, joins: 0/0}
$WMV_WallType
  = \ @ s_aqBn dt_aqCZ -> (dt_aqCZ `cast` <Co:3>) `cast` <Co:3>

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rtY0 = "error"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_ruGD = unpackCString# lvl_rtY0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_ruGE
  = "vector-0.12.3.1-d1916e9e0fbebab99f277ee9c25c571c51f56069"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_ruGF = unpackCString# lvl2_ruGE

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl4_ruGG = "Data.Vector.Primitive.Mutable"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl5_ruGH = unpackCString# lvl4_ruGG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_ruGI = ".\\\\Data\\\\Vector\\\\Primitive\\\\Mutable.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_ruGJ = unpackCString# lvl6_ruGI

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_ruGK = I# 113#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl9_ruGL = I# 15#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_ruGM = I# 78#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl11_ruGN
  = SrcLoc
      lvl3_ruGF
      lvl5_ruGH
      lvl7_ruGJ
      lvl8_ruGK
      lvl9_ruGL
      lvl8_ruGK
      lvl10_ruGM

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl12_ruGO = PushCallStack lvl1_ruGD lvl11_ruGN EmptyCallStack

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl13_ruGP = "Primitive.basicUnsafeNew: negative length: "#

-- RHS size: {terms: 15, types: 22, coercions: 4, joins: 0/0}
$wlvl_ruGQ
  = \ @ m_suts ww_sutw ->
      error
        (lvl12_ruGO `cast` <Co:4>)
        (unpackAppendCString#
           lvl13_ruGP
           (case $wshowSignedInt 0# ww_sutw [] of
            { (# ww5_atFw, ww6_atFx #) ->
            : ww5_atFw ww6_atFx
            }))

-- RHS size: {terms: 82, types: 206, coercions: 48, joins: 0/1}
$fMVectorMVectorWallType_$cbasicUnsafeGrow
  = \ @ m_asiQ $dPrimMonad_asiS eta_B1 eta1_X2 ->
      case $p1PrimMonad $dPrimMonad_asiS of
      { C:Monad ww1_sutB ww2_sutC ww3_sutD ww4_sutE ->
      ww2_sutC
        (ww2_sutC
           (ww2_sutC
              (case eta_B1 `cast` <Co:15> of
               { MVector dt_atBI dt1_atBJ dt2_atBK ->
               case eta1_X2 of { I# y_atBO ->
               let { x_atEB = +# dt1_atBJ y_atBO } in
               case <# x_atEB 0# of {
                 __DEFAULT ->
                   ww2_sutC
                     (primitive
                        $dPrimMonad_asiS
                        (\ s#_atDe ->
                           case newByteArray# x_atEB s#_atDe of { (# ipv_atDh, ipv1_atDi #) ->
                           (# ipv_atDh, MutableByteArray ipv1_atDi #)
                           }))
                     (\ x1_atDk ->
                        ww4_sutE
                          (case x1_atDk of { MutableByteArray dt5_atBy ->
                           MVector 0# x_atEB dt5_atBy
                           }));
                 1# -> $wlvl_ruGQ x_atEB
               }
               }
               })
              (\ v'_atDZ ->
                 ww3_sutD
                   (case v'_atDZ of { MVector dt_atE2 dt1_atE3 dt2_atE4 ->
                    case eta_B1 `cast` <Co:15> of
                    { MVector dt4_atBA dt5_atBB dt6_atBC ->
                    primitive
                      $dPrimMonad_asiS
                      (\ s#_atEi ->
                         case copyMutableByteArray#
                                dt6_atBC dt4_atBA dt2_atE4 dt_atE2 dt5_atBB s#_atEi
                         of s'#_atEn
                         { __DEFAULT ->
                         (# s'#_atEn, () #)
                         })
                    }
                    })
                   (ww4_sutE v'_atDZ)))
           (\ x1_atEo -> ww4_sutE (x1_atEo `cast` <Co:9>)))
        (\ x1_atzV -> ww4_sutE (x1_atzV `cast` <Co:9>))
      }

-- RHS size: {terms: 1, types: 0, coercions: 30, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeMove
  = $fMVectorMVectorWord8_$cbasicUnsafeMove `cast` <Co:30>

-- RHS size: {terms: 25, types: 50, coercions: 30, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeCopy
  = \ @ m_asie $dPrimMonad_asig eta_B1 ds_dtAu ->
      case eta_B1 `cast` <Co:15> of
      { MVector dt_atGl dt1_atGm dt2_atGn ->
      case ds_dtAu `cast` <Co:15> of
      { MVector dt3_atGr dt4_atGs dt5_atGt ->
      primitive
        $dPrimMonad_asig
        (\ s#_atGv ->
           case copyMutableByteArray#
                  dt5_atGt dt3_atGr dt2_atGn dt_atGl dt1_atGm s#_atGv
           of s'#_atGA
           { __DEFAULT ->
           (# s'#_atGA, () #)
           })
      }
      }

-- RHS size: {terms: 7, types: 13, coercions: 0, joins: 0/0}
$fMVectorMVectorWallType_$cbasicClear
  = \ @ m_ashI $dPrimMonad_ashK _ ->
      return ($p1PrimMonad $dPrimMonad_ashK) ()

-- RHS size: {terms: 20, types: 37, coercions: 15, joins: 0/0}
$fMVectorMVectorWallType_$cbasicInitialize
  = \ @ m_asgy $dPrimMonad_asgA ds_dtAj ->
      case ds_dtAj `cast` <Co:15> of
      { MVector dt_atGT dt1_atGU dt2_atGV ->
      primitive
        $dPrimMonad_asgA
        (\ s#_atGZ ->
           case setByteArray# dt2_atGV dt_atGT dt1_atGU 0# s#_atGZ of s'#_atH8
           { __DEFAULT ->
           (# s'#_atH8, () #)
           })
      }

-- RHS size: {terms: 48, types: 135, coercions: 18, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeNew
  = \ @ m_asge $dPrimMonad_asgg eta_B1 ->
      case $p1PrimMonad $dPrimMonad_asgg of
      { C:Monad ww1_suua ww2_suub ww3_suuc ww4_suud ->
      ww2_suub
        (ww2_suub
           (case eta_B1 of { I# x_atEB ->
            case <# x_atEB 0# of {
              __DEFAULT ->
                ww2_suub
                  (primitive
                     $dPrimMonad_asgg
                     (\ s#_atHF ->
                        case newByteArray# x_atEB s#_atHF of { (# ipv_atHI, ipv1_atHJ #) ->
                        (# ipv_atHI, MutableByteArray ipv1_atHJ #)
                        }))
                  (\ x1_atHL ->
                     ww4_suud
                       (case x1_atHL of { MutableByteArray dt1_atBy ->
                        MVector 0# x_atEB dt1_atBy
                        }));
              1# -> $wlvl_ruGQ x_atEB
            }
            })
           (\ x1_atI4 -> ww4_suud (x1_atI4 `cast` <Co:9>)))
        (\ x1_atzV -> ww4_suud (x1_atzV `cast` <Co:9>))
      }

-- RHS size: {terms: 1, types: 0, coercions: 20, joins: 0/0}
$fMVectorMVectorWallType_$cbasicOverlaps
  = $fMVectorMVectorWord8_$cbasicOverlaps `cast` <Co:20>

-- RHS size: {terms: 1, types: 0, coercions: 22, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeSlice
  = $fMVectorMVectorWord8_$cbasicUnsafeSlice `cast` <Co:22>

-- RHS size: {terms: 1, types: 0, coercions: 12, joins: 0/0}
$fMVectorMVectorWallType_$cbasicLength
  = $fMVectorMVectorWord8_$cbasicLength `cast` <Co:12>

-- RHS size: {terms: 1, types: 0, coercions: 39, joins: 0/0}
$fVectorVectorWallType_$cbasicUnsafeCopy
  = $fVectorVectorWord8_$cbasicUnsafeCopy `cast` <Co:39>

-- RHS size: {terms: 1, types: 0, coercions: 15, joins: 0/0}
$fVectorVectorWallType_$cbasicUnsafeSlice
  = $fVectorVectorWord8_$cbasicUnsafeSlice `cast` <Co:15>

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
$fVectorVectorWallType_$cbasicLength
  = $fVectorVectorWord8_$cbasicLength `cast` <Co:7>

-- RHS size: {terms: 35, types: 118, coercions: 37, joins: 0/0}
$fVectorVectorWallType_$cbasicUnsafeThaw
  = \ @ m_asek $dPrimMonad_asem eta_B1 ->
      case $p1PrimMonad $dPrimMonad_asem of
      { C:Monad ww1_suuv ww2_suuw ww3_suux ww4_suuy ->
      (ww2_suuw
         (ww2_suuw
            (case eta_B1 `cast` <Co:7> of { Vector dt_atKm dt1_atKn dt2_atKo ->
             ww2_suuw
               (primitive
                  $dPrimMonad_asem
                  (\ s#_atKr ->
                     (# s#_atKr, MutableByteArray (dt2_atKo `cast` <Co:6>) #)))
               (\ x1_atKs ->
                  ww4_suuy
                    (case x1_atKs of { MutableByteArray dt5_atBy ->
                     MVector dt_atKm dt1_atKn dt5_atBy
                     }))
             })
            (\ x1_atKt -> ww4_suuy (x1_atKt `cast` <Co:9>)))
         (\ x1_atzV -> ww4_suuy (x1_atzV `cast` <Co:9>)))
      `cast` <Co:6>
      }

-- RHS size: {terms: 40, types: 104, coercions: 31, joins: 0/0}
$fVectorVectorWallType_$cbasicUnsafeFreeze
  = \ @ m_asdO $dPrimMonad_asdQ eta_B1 ->
      case $p1PrimMonad $dPrimMonad_asdQ of
      { C:Monad ww1_suuQ ww2_suuR ww3_suuS ww4_suuT ->
      ww2_suuR
        (ww2_suuR
           (case eta_B1 `cast` <Co:21> of
            { MVector dt_atKE dt1_atKF dt2_atKG ->
            ww2_suuR
              (primitive
                 $dPrimMonad_asdQ
                 (\ s#_atKJ ->
                    case unsafeFreezeByteArray# dt2_atKG s#_atKJ of
                    { (# ipv_atKM, ipv1_atKN #) ->
                    (# ipv_atKM, ByteArray ipv1_atKN #)
                    }))
              (\ x1_atKP ->
                 ww4_suuT
                   (case x1_atKP of { ByteArray dt5_atJM ->
                    Vector dt_atKE dt1_atKF dt5_atJM
                    }))
            })
           (\ x1_atKQ -> ww4_suuT (x1_atKQ `cast` <Co:5>)))
        (\ x1_atzV -> ww4_suuT (x1_atzV `cast` <Co:5>))
      }

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
$fEqWallType_$c==
  = \ ds_dtzK ds1_dtzL ->
      case ds_dtzK of {
        EW ->
          case ds1_dtzL of {
            __DEFAULT -> False;
            EW -> True
          };
        FW ->
          case ds1_dtzL of {
            __DEFAULT -> False;
            FW -> True
          };
        DW ->
          case ds1_dtzL of {
            __DEFAULT -> False;
            DW -> True
          }
      }

-- RHS size: {terms: 25, types: 6, coercions: 0, joins: 0/0}
$fEqWallType_$c/=
  = \ eta_B2 eta1_B1 ->
      case eta_B2 of {
        EW ->
          case eta1_B1 of {
            __DEFAULT -> True;
            EW -> False
          };
        FW ->
          case eta1_B1 of {
            __DEFAULT -> True;
            FW -> False
          };
        DW ->
          case eta1_B1 of {
            __DEFAULT -> True;
            DW -> False
          }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fEqWallType = C:Eq $fEqWallType_$c== $fEqWallType_$c/=

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowWallType6 = "EW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowWallType5 = unpackCString# $fShowWallType6

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowWallType4 = "FW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowWallType3 = unpackCString# $fShowWallType4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowWallType2 = "DW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowWallType1 = unpackCString# $fShowWallType2

-- RHS size: {terms: 16, types: 6, coercions: 0, joins: 0/0}
$w$cshowsPrec
  = \ w_suva w1_suvb ->
      case w_suva of {
        EW -> ++ $fShowWallType5 w1_suvb;
        FW -> ++ $fShowWallType3 w1_suvb;
        DW -> ++ $fShowWallType1 w1_suvb
      }

-- RHS size: {terms: 6, types: 3, coercions: 0, joins: 0/0}
$fShowWallType_$cshowsPrec
  = \ _ w1_suva w2_suvb -> $w$cshowsPrec w1_suva w2_suvb

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
$fShowWallType_$cshow
  = \ x_a9kO ->
      case x_a9kO of {
        EW -> $fShowWallType5;
        FW -> $fShowWallType3;
        DW -> $fShowWallType1
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fShowWallType_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $w$cshowsPrec ls_a9kR s_a9kS

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fShowWallType
  = C:Show
      $fShowWallType_$cshowsPrec
      $fShowWallType_$cshow
      $fShowWallType_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Types.Wall"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_ruGR = KindRepTyConApp $tcWord8 []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_ruGS = : $krep_ruGR []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_ruGT = KindRepTyConApp $tcVector $krep1_ruGS

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_ruGU = KindRepVar 0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_ruGV = : $krep3_ruGU $krep1_ruGS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_ruGW = KindRepTyConApp $tcMVector $krep4_ruGV

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcWallType2 = "WallType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcWallType1 = TrNameS $tcWallType2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcWallType
  = TyCon
      13275402746936956850##
      13804878999558120721##
      $trModule
      $tcWallType1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$tc'DW1 = KindRepTyConApp $tcWallType []

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'EW2 = "'EW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'EW1 = TrNameS $tc'EW2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'EW
  = TyCon
      17182754298166084004##
      9314178274726525580##
      $trModule
      $tc'EW1
      0#
      $tc'DW1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'FW2 = "'FW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'FW1 = TrNameS $tc'FW2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'FW
  = TyCon
      3388162878422838395##
      9876810115470963877##
      $trModule
      $tc'FW1
      0#
      $tc'DW1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'DW3 = "'DW"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'DW2 = TrNameS $tc'DW3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'DW
  = TyCon
      7788921533584454150##
      10346339863025854557##
      $trModule
      $tc'DW2
      0#
      $tc'DW1

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep6_ruGX = : $tc'DW1 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep7_ruGY = : $krep3_ruGU $krep6_ruGX

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_ruGZ = KindRepTyConApp $tcMVector $krep7_ruGY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'MV_WallType1 = KindRepFun $krep5_ruGW $krep8_ruGZ

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_ruH0 = KindRepTyConApp $tcVector $krep6_ruGX

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'V_WallType1 = KindRepFun $krep2_ruGT $krep9_ruH0

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'MV_WallType3 = "'MV_WallType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'MV_WallType2 = TrNameS $tc'MV_WallType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'MV_WallType
  = TyCon
      3393741496207902376##
      8377713665553775486##
      $trModule
      $tc'MV_WallType2
      1#
      $tc'MV_WallType1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'V_WallType3 = "'V_WallType"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'V_WallType2 = TrNameS $tc'V_WallType3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'V_WallType
  = TyCon
      10874998797067048495##
      6095658591252650670##
      $trModule
      $tc'V_WallType2
      0#
      $tc'V_WallType1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
wallToWord3 = W8# 0##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
wallToWord2 = W8# 1##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
wallToWord1 = W8# 2##

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
wallToWord8
  = \ w_aqmC ->
      case w_aqmC of {
        EW -> wallToWord3;
        FW -> wallToWord2;
        DW -> wallToWord1
      }

-- RHS size: {terms: 8, types: 7, coercions: 0, joins: 0/0}
$fVectorVectorWallType_$celemseq
  = \ @ b_asfp _ eta1_B1 v1_atLC ->
      case eta1_B1 of { __DEFAULT -> v1_atLC }

-- RHS size: {terms: 98, types: 211, coercions: 18, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeReplicate
  = \ @ m_asgO $dPrimMonad_asgQ eta_B1 eta1_X2 ->
      case $p1PrimMonad $dPrimMonad_asgQ of
      { C:Monad ww1_suvm ww2_suvn ww3_suvo ww4_suvp ->
      ww2_suvn
        (ww2_suvn
           (ww2_suvn
              (case eta_B1 of { I# x_atEB ->
               case <# x_atEB 0# of {
                 __DEFAULT ->
                   ww2_suvn
                     (primitive
                        $dPrimMonad_asgQ
                        (\ s#_atM9 ->
                           case newByteArray# x_atEB s#_atM9 of { (# ipv_atMc, ipv1_atMd #) ->
                           (# ipv_atMc, MutableByteArray ipv1_atMd #)
                           }))
                     (\ x1_atMf ->
                        ww4_suvp
                          (case x1_atMf of { MutableByteArray dt1_atBy ->
                           MVector 0# x_atEB dt1_atBy
                           }));
                 1# -> $wlvl_ruGQ x_atEB
               }
               })
              (\ v1_atMy ->
                 ww3_suvo
                   (case v1_atMy of { MVector dt_atMB dt1_atMC dt2_atMD ->
                    primitive
                      $dPrimMonad_asgQ
                      (\ s#_atMF ->
                         case eta1_X2 of {
                           EW ->
                             case setByteArray# dt2_atMD dt_atMB dt1_atMC 0# s#_atMF of s'#_atMS
                             { __DEFAULT ->
                             (# s'#_atMS, () #)
                             };
                           FW ->
                             case setByteArray# dt2_atMD dt_atMB dt1_atMC 1# s#_atMF of s'#_atMS
                             { __DEFAULT ->
                             (# s'#_atMS, () #)
                             };
                           DW ->
                             case setByteArray# dt2_atMD dt_atMB dt1_atMC 2# s#_atMF of s'#_atMS
                             { __DEFAULT ->
                             (# s'#_atMS, () #)
                             }
                         })
                    })
                   (ww4_suvp v1_atMy)))
           (\ x1_atMT -> ww4_suvp (x1_atMT `cast` <Co:9>)))
        (\ x1_atzV -> ww4_suvp (x1_atzV `cast` <Co:9>))
      }

-- RHS size: {terms: 55, types: 68, coercions: 15, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeWrite
  = \ @ m_ashs $dPrimMonad_ashu eta_B2 eta1_B1 val_aqBm ->
      case eta_B2 `cast` <Co:15> of
      { MVector dt_atNp dt1_atNq dt2_atNr ->
      case eta1_B1 of { I# y_atNv ->
      primitive
        $dPrimMonad_ashu
        (\ s#_atNx ->
           case val_aqBm of {
             EW ->
               case writeWord8Array# dt2_atNr (+# dt_atNp y_atNv) 0## s#_atNx
               of s'#_atNC
               { __DEFAULT ->
               (# s'#_atNC, () #)
               };
             FW ->
               case writeWord8Array# dt2_atNr (+# dt_atNp y_atNv) 1## s#_atNx
               of s'#_atNC
               { __DEFAULT ->
               (# s'#_atNC, () #)
               };
             DW ->
               case writeWord8Array# dt2_atNr (+# dt_atNp y_atNv) 2## s#_atNx
               of s'#_atNC
               { __DEFAULT ->
               (# s'#_atNC, () #)
               }
           })
      }
      }

-- RHS size: {terms: 48, types: 65, coercions: 15, joins: 0/0}
$fMVectorMVectorWallType_$cbasicSet
  = \ @ m_ashY $dPrimMonad_asi0 eta_B1 val_aqBm ->
      case eta_B1 `cast` <Co:15> of
      { MVector dt_atNR dt1_atNS dt2_atNT ->
      primitive
        $dPrimMonad_asi0
        (\ s#_atNV ->
           case val_aqBm of {
             EW ->
               case setByteArray# dt2_atNT dt_atNR dt1_atNS 0# s#_atNV of s'#_atO8
               { __DEFAULT ->
               (# s'#_atO8, () #)
               };
             FW ->
               case setByteArray# dt2_atNT dt_atNR dt1_atNS 1# s#_atNV of s'#_atO8
               { __DEFAULT ->
               (# s'#_atO8, () #)
               };
             DW ->
               case setByteArray# dt2_atNT dt_atNR dt1_atNS 2# s#_atNV of s'#_atO8
               { __DEFAULT ->
               (# s'#_atO8, () #)
               }
           })
      }

-- RHS size: {terms: 12, types: 4, coercions: 0, joins: 0/0}
word8ToWall
  = \ w_aqmD ->
      case w_aqmD of { W8# x_atOp ->
      case x_atOp of {
        __DEFAULT -> DW;
        0## -> EW;
        1## -> FW
      }
      }

-- RHS size: {terms: 37, types: 28, coercions: 7, joins: 0/0}
$fVectorVectorWallType_$cbasicUnsafeIndexM
  = \ @ m_aseS $dMonad_aseU eta_B1 idx_aqBh ->
      >>=
        $dMonad_aseU
        (case eta_B1 `cast` <Co:7> of { Vector dt_atOD dt1_atOE dt2_atOF ->
         case idx_aqBh of { I# y_atOJ ->
         case indexWord8Array# dt2_atOF (+# dt_atOD y_atOJ) of wild2_atOL
         { __DEFAULT ->
         return $dMonad_aseU (W8# wild2_atOL)
         }
         }
         })
        (\ x1_atzV ->
           return
             $dMonad_aseU
             (case x1_atzV of { W8# x_atOp ->
              case x_atOp of {
                __DEFAULT -> DW;
                0## -> EW;
                1## -> FW
              }
              }))

-- RHS size: {terms: 35, types: 64, coercions: 15, joins: 0/0}
$fMVectorMVectorWallType_$cbasicUnsafeRead
  = \ @ m_ash8 $dPrimMonad_asha eta_B1 eta1_X2 ->
      case $p1PrimMonad $dPrimMonad_asha of
      { C:Monad ww1_suvO ww2_suvP ww3_suvQ ww4_suvR ->
      ww2_suvP
        (case eta_B1 `cast` <Co:15> of
         { MVector dt_atP2 dt1_atP3 dt2_atP4 ->
         case eta1_X2 of { I# y_atP8 ->
         primitive
           $dPrimMonad_asha
           ($fPrimCBool_$creadByteArray# dt2_atP4 (+# dt_atP2 y_atP8))
         }
         })
        (\ x1_atzV ->
           ww4_suvR
             (case x1_atzV of { W8# x_atOp ->
              case x_atOp of {
                __DEFAULT -> DW;
                0## -> EW;
                1## -> FW
              }
              }))
      }

-- RHS size: {terms: 14, types: 2, coercions: 0, joins: 0/0}
$fMVectorMVectorWallType
  = C:MVector
      $fMVectorMVectorWallType_$cbasicLength
      $fMVectorMVectorWallType_$cbasicUnsafeSlice
      $fMVectorMVectorWallType_$cbasicOverlaps
      $fMVectorMVectorWallType_$cbasicUnsafeNew
      $fMVectorMVectorWallType_$cbasicInitialize
      $fMVectorMVectorWallType_$cbasicUnsafeReplicate
      $fMVectorMVectorWallType_$cbasicUnsafeRead
      $fMVectorMVectorWallType_$cbasicUnsafeWrite
      $fMVectorMVectorWallType_$cbasicClear
      $fMVectorMVectorWallType_$cbasicSet
      $fMVectorMVectorWallType_$cbasicUnsafeCopy
      $fMVectorMVectorWallType_$cbasicUnsafeMove
      $fMVectorMVectorWallType_$cbasicUnsafeGrow

-- RHS size: {terms: 9, types: 2, coercions: 4, joins: 0/0}
$fVectorVectorWallType
  = C:Vector
      ($fMVectorMVectorWallType `cast` <Co:4>)
      $fVectorVectorWallType_$cbasicUnsafeFreeze
      $fVectorVectorWallType_$cbasicUnsafeThaw
      $fVectorVectorWallType_$cbasicLength
      $fVectorVectorWallType_$cbasicUnsafeSlice
      $fVectorVectorWallType_$cbasicUnsafeIndexM
      $fVectorVectorWallType_$cbasicUnsafeCopy
      $fVectorVectorWallType_$celemseq

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fUnboxWallType
  = C:Unbox $fVectorVectorWallType $fMVectorMVectorWallType



[ 7 of 17] Compiling Obelisk.State    ( src\Obelisk\State.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\State.o )

==================== Simplified expression ====================
makeClassy
  (mkNameG_tc
     (unpackCString# "obelisk-0.1.0.0-inplace"#)
     (unpackCString# "Obelisk.State"#)
     (unpackCString# "Vars"#))



==================== Simplified expression ====================
makeClassy
  (mkNameG_tc
     (unpackCString# "obelisk-0.1.0.0-inplace"#)
     (unpackCString# "Obelisk.State"#)
     (unpackCString# "PVars"#))



==================== Simplified expression ====================
makeClassy
  (mkNameG_tc
     (unpackCString# "obelisk-0.1.0.0-inplace"#)
     (unpackCString# "Obelisk.State"#)
     (unpackCString# "WorldTiles"#))



==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 2,205, types: 1,957, coercions: 39, joins: 8/18}

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
worldTiles = \ @ c_aEbq[sk:1] v_B1 -> v_B1 `cast` <Co:2>

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
pVars = \ @ c_aEaE[sk:1] v_B1 -> v_B1 `cast` <Co:2>

-- RHS size: {terms: 3, types: 4, coercions: 2, joins: 0/0}
vars = \ @ c_aDZ3[sk:1] v_B1 -> v_B1 `cast` <Co:2>

-- RHS size: {terms: 3, types: 9, coercions: 0, joins: 0/0}
$fHasWorldTilesWorldTiles_$cworldTiles = \ @ f_aEfc _ -> id

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasWorldTilesWorldTiles
  = $fHasWorldTilesWorldTiles_$cworldTiles `cast` <Co:3>

-- RHS size: {terms: 3, types: 9, coercions: 0, joins: 0/0}
$fHasPVarsPVars_$cpVars = \ @ f_aEbc _ -> id

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasPVarsPVars = $fHasPVarsPVars_$cpVars `cast` <Co:3>

-- RHS size: {terms: 3, types: 9, coercions: 0, joins: 0/0}
$fHasVarsVars_$cvars = \ @ f_aEaq _ -> id

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasVarsVars = $fHasVarsVars_$cvars `cast` <Co:3>

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
camera_plane
  = \ ds_dEkL ->
      case ds_dEkL of { PVars ds1_dEkM ds2_dEkN ds3_dEkO -> ds3_dEkO }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
direction
  = \ ds_dEkH ->
      case ds_dEkH of { PVars ds1_dEkI ds2_dEkJ ds3_dEkK -> ds2_dEkJ }

-- RHS size: {terms: 5, types: 8, coercions: 0, joins: 0/0}
position
  = \ ds_dEkD ->
      case ds_dEkD of { PVars ds1_dEkE ds2_dEkF ds3_dEkG -> ds1_dEkE }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
worldSize
  = \ ds_dEkA ->
      case ds_dEkA of { WorldTiles ds1_dEkB ds2_dEkC -> ds2_dEkC }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
mapTiles
  = \ ds_dEkx ->
      case ds_dEkx of { WorldTiles ds1_dEky ds2_dEkz -> ds1_dEky }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
vInput
  = \ ds_dEks ->
      case ds_dEks of { Vars ds1_dEkt ds2_dEku ds3_dEkv ds4_dEkw ->
      ds4_dEkw
      }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
rotateToPView
  = \ ds_dEkn ->
      case ds_dEkn of { Vars ds1_dEko ds2_dEkp ds3_dEkq ds4_dEkr ->
      ds3_dEkq
      }

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
world
  = \ ds_dEki ->
      case ds_dEki of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
      ds2_dEkk
      }

-- RHS size: {terms: 20, types: 24, coercions: 0, joins: 0/0}
$fHasWorldTilesVars_$cworldTiles
  = \ @ f_aEeQ $dFunctor_aEeS eta_B2 eta1_B1 ->
      fmap
        $dFunctor_aEeS
        (\ s_aEe1 ->
           case eta1_B1 of { Vars ds_dEl3 ds1_dEl4 ds2_dEl5 ds3_dEl6 ->
           Vars ds_dEl3 s_aEe1 ds2_dEl5 ds3_dEl6
           })
        (eta_B2
           (case eta1_B1 of { Vars ds_dEkj ds1_dEkk ds2_dEkl ds3_dEkm ->
            ds1_dEkk
            }))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasWorldTilesVars
  = $fHasWorldTilesVars_$cworldTiles `cast` <Co:3>

-- RHS size: {terms: 5, types: 6, coercions: 0, joins: 0/0}
player
  = \ ds_dEkd ->
      case ds_dEkd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
      ds1_dEke
      }

-- RHS size: {terms: 20, types: 24, coercions: 0, joins: 0/0}
$fHasPVarsVars_$cpVars
  = \ @ f_aEfm $dFunctor_aEfo eta_B2 eta1_B1 ->
      fmap
        $dFunctor_aEfo
        (\ s_aEe3 ->
           case eta1_B1 of { Vars ds_dElh ds1_dEli ds2_dElj ds3_dElk ->
           Vars s_aEe3 ds1_dEli ds2_dElj ds3_dElk
           })
        (eta_B2
           (case eta1_B1 of { Vars ds_dEke ds1_dEkf ds2_dEkg ds3_dEkh ->
            ds_dEke
            }))

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
$fHasPVarsVars = $fHasPVarsVars_$cpVars `cast` <Co:3>

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
rFW = : FW rFW
end Rec }

Rec {
-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
rEW = : EW rEW
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowPVars7 = I# 0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
boxMap4 = I# 99#

-- RHS size: {terms: 54, types: 90, coercions: 0, joins: 2/2}
emptyMap2
  = \ s1_aEr8 ->
      case newArray# 100# arrEleBottom s1_aEr8 of
      { (# ipv_aErL, ipv1_aErM #) ->
      join {
        $w$j_sFto w_sFtm
          = case unsafeFreezeArray# ipv1_aErM w_sFtm of
            { (# ipv2_aEts, ipv3_aEtt #) ->
            (# ipv2_aEts, Array $fShowPVars7 boxMap4 100# ipv3_aEtt #)
            } } in
      joinrec {
        $wfillFromList_sFtw ww_sFtu w_sFtq w1_sFtr
          = case ww_sFtu of wild_X4j {
              __DEFAULT ->
                case w_sFtq of {
                  [] -> jump $w$j_sFto w1_sFtr;
                  : y_aEsc ys_aEsd ->
                    case writeArray# ipv1_aErM wild_X4j y_aEsc w1_sFtr of s2#_aEsq
                    { __DEFAULT ->
                    jump $wfillFromList_sFtw (+# wild_X4j 1#) ys_aEsd s2#_aEsq
                    }
                };
              100# -> jump $w$j_sFto w1_sFtr
            }; } in
      jump $wfillFromList_sFtw 0# rEW ipv_aErL
      }

-- RHS size: {terms: 5, types: 36, coercions: 0, joins: 0/0}
emptyMap1
  = case runRW# emptyMap2 of { (# ipv_aEqT, ipv1_aEqU #) ->
    ipv1_aEqU
    }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
boxMap1 = I32# 10#

-- RHS size: {terms: 3, types: 0, coercions: 2, joins: 0/0}
emptyMap = WorldTiles emptyMap1 (boxMap1 `cast` <Co:2>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initPVars2 = F# 0.99542797#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initPVars1 = F# 9.551546e-2#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
initPVars_cam = V2 initPVars2 initPVars1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initPVars3 = F# -0.99542797#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
initPVars_dir = V2 initPVars1 initPVars3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initPVars6 = F# 2.5#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initPVars5 = F# 6.5#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
initPVars4 = V2 initPVars6 initPVars5

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
initPVars = PVars initPVars4 initPVars_dir initPVars_cam

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.State"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rFUc = KindRepTyConApp $tcFloat []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rFUd = KindRepTyConApp $tcCInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rFUe = KindRepTyConApp $tcWallType []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rFUf = KindRepTyConApp $tcInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rFUg = KindRepTyConApp $tcInput []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rFUh = KindRepTyConApp $tcBool []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_rFUi = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rFUj = : $krep_rFUc []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rFUk = KindRepTyConApp $tcV2 $krep7_rFUj

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_rFUl = : $krep2_rFUe []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep10_rFUm = : $krep3_rFUf $krep9_rFUl

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rFUn = KindRepTyConApp $tcArray $krep10_rFUm

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcHasPVars1 = KindRepFun krep$* $krep6_rFUi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcPVars2 = "PVars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcPVars1 = TrNameS $tcPVars2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcPVars
  = TyCon
      3371028933404885081##
      415691634927845702##
      $trModule
      $tcPVars1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep12_rFUo = KindRepTyConApp $tcPVars []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rFUp = KindRepFun $krep8_rFUk $krep12_rFUo

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rFUq = KindRepFun $krep8_rFUk $krep13_rFUp

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'PVars1 = KindRepFun $krep8_rFUk $krep14_rFUq

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'PVars3 = "'PVars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'PVars2 = TrNameS $tc'PVars3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'PVars
  = TyCon
      13971840142982471475##
      1852167308934799217##
      $trModule
      $tc'PVars2
      0#
      $tc'PVars1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcWorldTiles2 = "WorldTiles"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcWorldTiles1 = TrNameS $tcWorldTiles2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcWorldTiles
  = TyCon
      1143965208353705519##
      15684164477962594476##
      $trModule
      $tcWorldTiles1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_rFUr = KindRepTyConApp $tcWorldTiles []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rFUs = KindRepFun $krep1_rFUd $krep15_rFUr

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'WorldTiles1 = KindRepFun $krep11_rFUn $krep16_rFUs

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'WorldTiles3 = "'WorldTiles"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'WorldTiles2 = TrNameS $tc'WorldTiles3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'WorldTiles
  = TyCon
      11112474444561001954##
      10950771301984011079##
      $trModule
      $tc'WorldTiles2
      0#
      $tc'WorldTiles1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcVars2 = "Vars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcVars1 = TrNameS $tcVars2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcVars
  = TyCon
      14483362421445923974##
      14632223346673343948##
      $trModule
      $tcVars1
      0#
      krep$*

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep17_rFUt = KindRepTyConApp $tcVars []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_rFUu = KindRepFun $krep4_rFUg $krep17_rFUt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_rFUv = KindRepFun $krep5_rFUh $krep18_rFUu

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_rFUw = KindRepFun $krep15_rFUr $krep19_rFUv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Vars1 = KindRepFun $krep12_rFUo $krep20_rFUw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Vars3 = "'Vars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Vars2 = TrNameS $tc'Vars3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Vars
  = TyCon
      1823102527319244422##
      12965198859852418621##
      $trModule
      $tc'Vars2
      0#
      $tc'Vars1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasVars2 = "HasVars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasVars1 = TrNameS $tcHasVars2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasVars
  = TyCon
      16752492695605642859##
      1626351112992816946##
      $trModule
      $tcHasVars1
      0#
      $tcHasPVars1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasPVars3 = "HasPVars"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasPVars2 = TrNameS $tcHasPVars3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasPVars
  = TyCon
      8628717883652206708##
      4014368734119033692##
      $trModule
      $tcHasPVars2
      0#
      $tcHasPVars1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasWorldTiles2 = "HasWorldTiles"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasWorldTiles1 = TrNameS $tcHasWorldTiles2

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasWorldTiles
  = TyCon
      4883540039415652641##
      5693867611688513120##
      $trModule
      $tcHasWorldTiles1
      0#
      $tcHasPVars1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rFUx = "Int"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_rFUy = unpackCString# lvl1_rFUx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl3_rFUz = "error"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl4_rFUA = unpackCString# lvl3_rFUz

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl5_rFUB = "array-0.5.4.0"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_rFUC = unpackCString# lvl5_rFUB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_rFUD = "Data.Array.Base"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl8_rFUE = unpackCString# lvl7_rFUD

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl9_rFUF = "libraries\\\\array\\\\Data\\\\Array\\\\Base.hs"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl10_rFUG = unpackCString# lvl9_rFUF

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl11_rFUH = I# 95#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl12_rFUI = I# 31#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl13_rFUJ = I# 96#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl14_rFUK = I# 76#

-- RHS size: {terms: 8, types: 0, coercions: 0, joins: 0/0}
lvl15_rFUL
  = SrcLoc
      lvl6_rFUC
      lvl8_rFUE
      lvl10_rFUG
      lvl11_rFUH
      lvl12_rFUI
      lvl13_rFUJ
      lvl14_rFUK

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl16_rFUM = PushCallStack lvl4_rFUA lvl15_rFUL EmptyCallStack

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl17_rFUN = "Error in array index; "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl18_rFUO = " not in range [0.."#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl19_rFUP = ")"#

-- RHS size: {terms: 12, types: 5, coercions: 0, joins: 0/0}
accessMap2
  = \ i1_aEv9 ww_sFtI ww1_sFtN ->
      $windexError
        showSignedInt (I# ww_sFtI) (I# ww1_sFtN) (I# i1_aEv9) lvl2_rFUy

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl20_rFUQ = unpackCString# lvl19_rFUP

-- RHS size: {terms: 27, types: 26, coercions: 4, joins: 0/0}
accessMap1
  = \ y_aExe ww_sFtP ->
      error
        (lvl16_rFUM `cast` <Co:4>)
        (unpackAppendCString#
           lvl17_rFUN
           (case $wshowSignedInt 0# y_aExe [] of { (# ww5_atFw, ww6_atFx #) ->
            ++_$s++
              (unpackAppendCString#
                 lvl18_rFUO
                 (case $wshowSignedInt 0# ww_sFtP [] of
                  { (# ww2_XtLw, ww3_XtLy #) ->
                  ++_$s++ lvl20_rFUQ ww2_XtLw ww3_XtLy
                  }))
              ww5_atFw
              ww6_atFx
            }))

-- RHS size: {terms: 65, types: 23, coercions: 0, joins: 0/2}
$waccessMap
  = \ ww_sFtI
      ww1_sFtN
      ww2_sFtP
      ww3_sFtQ
      ww4_sFtV
      ww5_sFu0
      ww6_sFu4 ->
      let { i1_aEv9 = +# (*# ww5_sFu0 ww4_sFtV) ww6_sFu4 } in
      case <=# ww_sFtI i1_aEv9 of {
        __DEFAULT ->
          case accessMap2 i1_aEv9 ww_sFtI ww1_sFtN of wild_00 { };
        1# ->
          case <=# i1_aEv9 ww1_sFtN of {
            __DEFAULT ->
              case accessMap2 i1_aEv9 ww_sFtI ww1_sFtN of wild_00 { };
            1# ->
              let { y_aExe = -# i1_aEv9 ww_sFtI } in
              case <=# 0# y_aExe of {
                __DEFAULT -> case accessMap1 y_aExe ww2_sFtP of wild_00 { };
                1# ->
                  case <# y_aExe ww2_sFtP of {
                    __DEFAULT -> case accessMap1 y_aExe ww2_sFtP of wild_00 { };
                    1# ->
                      case indexArray# ww3_sFtQ y_aExe of { (# ipv_aEuB #) -> ipv_aEuB }
                  }
              }
          }
      }

-- RHS size: {terms: 32, types: 26, coercions: 1, joins: 0/0}
accessMap
  = \ w_sFtx w1_sFty w2_sFtz ->
      case w_sFtx of { WorldTiles ww1_sFtC ww2_sFtS ->
      case ww1_sFtC of { Array ww4_sFtF ww5_sFtK ww6_sFtP ww7_sFtQ ->
      case ww4_sFtF of { I# ww9_sFJl ->
      case ww5_sFtK of { I# ww11_sFJo ->
      case ww2_sFtS `cast` <Co:1> of { I32# ww13_sFtV ->
      case w1_sFty of { I# ww15_sFu0 ->
      case w2_sFtz of { I# ww17_sFu4 ->
      $waccessMap
        ww9_sFJl ww11_sFJo ww6_sFtP ww7_sFtQ ww13_sFtV ww15_sFu0 ww17_sFu4
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 37, types: 35, coercions: 1, joins: 0/0}
checkAt
  = \ gs_aCZj ds_dEjL ->
      case ds_dEjL of { V2 x1_aCZk y_aCZl ->
      case x1_aCZk of { I# ww1_sFJx ->
      case y_aCZl of { I# ww3_sFJA ->
      case gs_aCZj of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
      case ds2_dEkk of { WorldTiles ww5_sFtC ww6_sFtS ->
      case ww5_sFtC of { Array ww8_sFtF ww9_sFtK ww10_sFtP ww11_sFtQ ->
      case ww8_sFtF of { I# ww13_sFJr ->
      case ww9_sFtK of { I# ww15_sFJu ->
      case ww6_sFtS `cast` <Co:1> of { I32# ww17_sFtV ->
      $waccessMap
        ww13_sFJr ww15_sFJu ww10_sFtP ww11_sFtQ ww17_sFtV ww1_sFJx ww3_sFJA
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 34, types: 30, coercions: 1, joins: 0/0}
accessMapV
  = \ w_aCJr ds_dEjZ ->
      case ds_dEjZ of { V2 x1_aCJs y_aCJt ->
      case x1_aCJs of { I# ww1_sFJJ ->
      case y_aCJt of { I# ww3_sFJM ->
      case w_aCJr of { WorldTiles ww5_sFtC ww6_sFtS ->
      case ww5_sFtC of { Array ww8_sFtF ww9_sFtK ww10_sFtP ww11_sFtQ ->
      case ww8_sFtF of { I# ww13_sFJD ->
      case ww9_sFtK of { I# ww15_sFJG ->
      case ww6_sFtS `cast` <Co:1> of { I32# ww17_sFtV ->
      $waccessMap
        ww13_sFJD ww15_sFJG ww10_sFtP ww11_sFtQ ww17_sFtV ww1_sFJJ ww3_sFJM
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowPVars6 = "PVars {"#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowPVars5 = "position = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowPVars4 = "direction = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowPVars3 = "camera_plane = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowPVars2 = "}"#

-- RHS size: {terms: 79, types: 37, coercions: 0, joins: 0/3}
$w$cshowsPrec
  = \ ww_sFub ww1_sFuf ww2_sFug ww3_sFuh ->
      let {
        f_sEON
          = case ww1_sFuf of { V2 ww5_ammo ww6_ammp ->
            $w$cshowsPrec $fShowFloat 0# ww5_ammo ww6_ammp
            } } in
      let {
        f1_sEOL
          = case ww2_sFug of { V2 ww5_ammo ww6_ammp ->
            $w$cshowsPrec $fShowFloat 0# ww5_ammo ww6_ammp
            } } in
      let {
        f2_sEOJ
          = case ww3_sFuh of { V2 ww5_ammo ww6_ammp ->
            $w$cshowsPrec $fShowFloat 0# ww5_ammo ww6_ammp
            } } in
      case >=# ww_sFub 11# of {
        __DEFAULT ->
          \ x1_X9o0 ->
            unpackAppendCString#
              $fShowPVars6
              (unpackAppendCString#
                 $fShowPVars5
                 (f_sEON
                    (++
                       showCommaSpace1
                       (unpackAppendCString#
                          $fShowPVars4
                          (f1_sEOL
                             (++
                                showCommaSpace1
                                (unpackAppendCString#
                                   $fShowPVars3
                                   (f2_sEOJ (unpackAppendCString# $fShowPVars2 x1_X9o0)))))))));
        1# ->
          \ x1_a9kl ->
            : $fShow(,)4
              (unpackAppendCString#
                 $fShowPVars6
                 (unpackAppendCString#
                    $fShowPVars5
                    (f_sEON
                       (++
                          showCommaSpace1
                          (unpackAppendCString#
                             $fShowPVars4
                             (f1_sEOL
                                (++
                                   showCommaSpace1
                                   (unpackAppendCString#
                                      $fShowPVars3
                                      (f2_sEOJ
                                         (unpackAppendCString#
                                            $fShowPVars2 (: $fShow(,)2 x1_a9kl)))))))))))
      }

-- RHS size: {terms: 13, types: 11, coercions: 0, joins: 0/0}
$fShowPVars_$cshowsPrec
  = \ w_sFu7 w1_sFu8 ->
      case w_sFu7 of { I# ww1_sFub ->
      case w1_sFu8 of { PVars ww3_sFuf ww4_sFug ww5_sFuh ->
      $w$cshowsPrec ww1_sFub ww3_sFuf ww4_sFug ww5_sFuh
      }
      }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
$fShowPVars_$cshow
  = \ x1_a9kO ->
      case x1_a9kO of { PVars ww1_sFuf ww2_sFug ww3_sFuh ->
      $w$cshowsPrec 0# ww1_sFuf ww2_sFug ww3_sFuh []
      }

-- RHS size: {terms: 9, types: 8, coercions: 0, joins: 0/0}
$fShowPVars1
  = \ w_sFu8 ->
      case w_sFu8 of { PVars ww1_sFuf ww2_sFug ww3_sFuh ->
      $w$cshowsPrec 0# ww1_sFuf ww2_sFug ww3_sFuh
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fShowPVars_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowPVars1 ls_a9kR s_a9kS

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fShowPVars
  = C:Show
      $fShowPVars_$cshowsPrec $fShowPVars_$cshow $fShowPVars_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars11 = "WorldTiles {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowVars10 = unpackCString# $fShowVars11

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars9 = "mapTiles = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars8 = "worldSize = "#

-- RHS size: {terms: 68, types: 42, coercions: 2, joins: 0/1}
$w$cshowsPrec2
  = \ ww_sFuo ww1_sFus ww2_sFut ->
      let {
        f_sEOv
          = $w$cshowsPrec $fIxInt $fShowInt $fShowWallType 0# ww1_sFus } in
      case >=# ww_sFuo 11# of {
        __DEFAULT ->
          \ x1_X9nU ->
            ++
              $fShowVars10
              (unpackAppendCString#
                 $fShowVars9
                 (f_sEOv
                    (++
                       showCommaSpace1
                       (unpackAppendCString#
                          $fShowVars8
                          (case ww2_sFut `cast` <Co:1> of { I32# x#_amn2 ->
                           case $wshowSignedInt
                                  0# x#_amn2 (unpackAppendCString# $fShowPVars2 x1_X9nU)
                           of
                           { (# ww5_amn6, ww6_amn7 #) ->
                           : ww5_amn6 ww6_amn7
                           }
                           })))));
        1# ->
          \ x1_a9kl ->
            : $fShow(,)4
              (++
                 $fShowVars10
                 (unpackAppendCString#
                    $fShowVars9
                    (f_sEOv
                       (++
                          showCommaSpace1
                          (unpackAppendCString#
                             $fShowVars8
                             (case ww2_sFut `cast` <Co:1> of { I32# x#_amn2 ->
                              case $wshowSignedInt
                                     0#
                                     x#_amn2
                                     (unpackAppendCString# $fShowPVars2 (: $fShow(,)2 x1_a9kl))
                              of
                              { (# ww5_amn6, ww6_amn7 #) ->
                              : ww5_amn6 ww6_amn7
                              }
                              }))))))
      }

-- RHS size: {terms: 12, types: 9, coercions: 0, joins: 0/0}
$fShowWorldTiles_$cshowsPrec
  = \ w_sFuk w1_sFul ->
      case w_sFuk of { I# ww1_sFuo ->
      case w1_sFul of { WorldTiles ww3_sFus ww4_sFut ->
      $w$cshowsPrec2 ww1_sFuo ww3_sFus ww4_sFut
      }
      }

-- RHS size: {terms: 9, types: 7, coercions: 0, joins: 0/0}
$fShowWorldTiles_$cshow
  = \ x1_a9kO ->
      case x1_a9kO of { WorldTiles ww1_sFus ww2_sFut ->
      $w$cshowsPrec2 0# ww1_sFus ww2_sFut []
      }

-- RHS size: {terms: 8, types: 6, coercions: 0, joins: 0/0}
$fShowWorldTiles1
  = \ w_sFul ->
      case w_sFul of { WorldTiles ww1_sFus ww2_sFut ->
      $w$cshowsPrec2 0# ww1_sFus ww2_sFut
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fShowWorldTiles_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowWorldTiles1 ls_a9kR s_a9kS

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fShowWorldTiles
  = C:Show
      $fShowWorldTiles_$cshowsPrec
      $fShowWorldTiles_$cshow
      $fShowWorldTiles_$cshowList

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars3 = "Vars {"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$fShowVars2 = unpackCString# $fShowVars3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars7 = "player = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars6 = "world = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars5 = "rotateToPView = "#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$fShowVars4 = "vInput = "#

-- RHS size: {terms: 83, types: 43, coercions: 0, joins: 0/4}
$w$cshowsPrec1
  = \ ww_sFuB ww1_sFuF ww2_sFuG ww3_sFuH ww4_sFuI ->
      let {
        f_sEOh
          = case ww1_sFuF of { PVars ww6_sFuf ww7_sFug ww8_sFuh ->
            $w$cshowsPrec 0# ww6_sFuf ww7_sFug ww8_sFuh
            } } in
      let {
        f1_sEOf
          = case ww2_sFuG of { WorldTiles ww6_sFus ww7_sFut ->
            $w$cshowsPrec2 0# ww6_sFus ww7_sFut
            } } in
      let {
        g_sEOa
          = \ x1_X9oq ->
              unpackAppendCString#
                $fShowVars7
                (f_sEOh
                   (++
                      showCommaSpace1
                      (unpackAppendCString#
                         $fShowVars6
                         (f1_sEOf
                            (++
                               showCommaSpace1
                               (unpackAppendCString#
                                  $fShowVars5
                                  (let {
                                     eta_sEOl
                                       = ++
                                           showCommaSpace1
                                           (unpackAppendCString#
                                              $fShowVars4
                                              (case ww4_sFuI of
                                               { Input ww6_s9wE ww7_s9wF ww8_s9wG ww9_s9wH ->
                                               $w$cshowsPrec
                                                 0#
                                                 ww6_s9wE
                                                 ww7_s9wF
                                                 ww8_s9wG
                                                 ww9_s9wH
                                                 (unpackAppendCString# $fShowPVars2 x1_X9oq)
                                               })) } in
                                   case ww3_sFuH of {
                                     False -> ++ $fShowBool4 eta_sEOl;
                                     True -> ++ $fShowBool2 eta_sEOl
                                   }))))))) } in
      case >=# ww_sFuB 11# of {
        __DEFAULT -> \ x1_X9os -> ++ $fShowVars2 (g_sEOa x1_X9os);
        1# ->
          \ x1_a9kl ->
            : $fShow(,)4 (++ $fShowVars2 (g_sEOa (: $fShow(,)2 x1_a9kl)))
      }

-- RHS size: {terms: 14, types: 9, coercions: 0, joins: 0/0}
$fShowVars_$cshowsPrec
  = \ w_sFux w1_sFuy ->
      case w_sFux of { I# ww1_sFuB ->
      case w1_sFuy of { Vars ww3_sFuF ww4_sFuG ww5_sFuH ww6_sFuI ->
      $w$cshowsPrec1 ww1_sFuB ww3_sFuF ww4_sFuG ww5_sFuH ww6_sFuI
      }
      }

-- RHS size: {terms: 11, types: 7, coercions: 0, joins: 0/0}
$fShowVars_$cshow
  = \ x1_a9kO ->
      case x1_a9kO of { Vars ww1_sFuF ww2_sFuG ww3_sFuH ww4_sFuI ->
      $w$cshowsPrec1 0# ww1_sFuF ww2_sFuG ww3_sFuH ww4_sFuI []
      }

-- RHS size: {terms: 10, types: 6, coercions: 0, joins: 0/0}
$fShowVars1
  = \ w_sFuy ->
      case w_sFuy of { Vars ww1_sFuF ww2_sFuG ww3_sFuH ww4_sFuI ->
      $w$cshowsPrec1 0# ww1_sFuF ww2_sFuG ww3_sFuH ww4_sFuI
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fShowVars_$cshowList
  = \ ls_a9kR s_a9kS -> showList__ $fShowVars1 ls_a9kR s_a9kS

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
$fShowVars
  = C:Show
      $fShowVars_$cshowsPrec $fShowVars_$cshow $fShowVars_$cshowList

-- RHS size: {terms: 37, types: 19, coercions: 1, joins: 0/0}
$winBounds
  = \ w_sFuL ww_sFuS ww1_sFuX ->
      case >=# ww_sFuS 0# of {
        __DEFAULT -> False;
        1# ->
          case >=# ww1_sFuX 0# of {
            __DEFAULT -> False;
            1# ->
              case w_sFuL of { Vars ds_dEkj ds1_dEkk ds2_dEkl ds3_dEkm ->
              case ds1_dEkk of { WorldTiles ds4_dEkB ds5_dEkC ->
              case ds5_dEkC `cast` <Co:1> of { I32# x#_ajEP ->
              case <# ww_sFuS x#_ajEP of {
                __DEFAULT -> False;
                1# -> tagToEnum# (<# ww1_sFuX x#_ajEP)
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 15, types: 11, coercions: 0, joins: 0/0}
inBounds
  = \ w_sFuL w1_sFuM ->
      case w1_sFuM of { V2 ww1_sFuP ww2_sFuU ->
      case ww1_sFuP of { I# ww4_sFKa ->
      case ww2_sFuU of { I# ww6_sFKd ->
      $winBounds w_sFuL ww4_sFKa ww6_sFKd
      }
      }
      }

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n_rFUR = $wunsafeTake 10# rFW

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n1_rFUS = : FW n_rFUR

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo3_rFUT
  = \ w_sFvc ww_sFvg ->
      case w_sFvc of {
        [] -> n1_rFUS;
        : y_a9mO ys_a9mP ->
          case ww_sFvg of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo3_rFUT ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n1_rFUS
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n2_rFUU = $wgo3_rFUT rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n3_rFUV = : FW n2_rFUU

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n4_rFUW = : FW n3_rFUV

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo4_rFUX
  = \ w_sFvj ww_sFvn ->
      case w_sFvj of {
        [] -> n4_rFUW;
        : y_a9mO ys_a9mP ->
          case ww_sFvn of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo4_rFUX ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n4_rFUW
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n5_rFUY = $wgo4_rFUX rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n6_rFUZ = : FW n5_rFUY

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n7_rFV0 = : FW n6_rFUZ

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n8_rFV1 = : DW n7_rFV0

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo5_rFV2
  = \ w_sFvq ww_sFvu ->
      case w_sFvq of {
        [] -> n8_rFV1;
        : y_a9mO ys_a9mP ->
          case ww_sFvu of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo5_rFV2 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n8_rFV1
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n9_rFV3 = $wgo5_rFV2 rFW 4#

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo6_rFV4
  = \ w_sFvx ww_sFvB ->
      case w_sFvx of {
        [] -> n9_rFV3;
        : y_a9mO ys_a9mP ->
          case ww_sFvB of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo6_rFV4 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n9_rFV3
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n10_rFV5 = $wgo6_rFV4 rEW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n11_rFV6 = : FW n10_rFV5

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n12_rFV7 = : FW n11_rFV6

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo7_rFV8
  = \ w_sFvE ww_sFvI ->
      case w_sFvE of {
        [] -> n12_rFV7;
        : y_a9mO ys_a9mP ->
          case ww_sFvI of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo7_rFV8 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n12_rFV7
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n13_rFV9 = $wgo7_rFV8 rEW 4#

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo8_rFVa
  = \ w_sFvL ww_sFvP ->
      case w_sFvL of {
        [] -> n13_rFV9;
        : y_a9mO ys_a9mP ->
          case ww_sFvP of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo8_rFVa ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n13_rFV9
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n14_rFVb = $wgo8_rFVa rFW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n15_rFVc = : DW n14_rFVb

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n16_rFVd = : FW n15_rFVc

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n17_rFVe = : FW n16_rFVd

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo9_rFVf
  = \ w_sFvS ww_sFvW ->
      case w_sFvS of {
        [] -> n17_rFVe;
        : y_a9mO ys_a9mP ->
          case ww_sFvW of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo9_rFVf ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n17_rFVe
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n18_rFVg = $wgo9_rFVf rEW 4#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n19_rFVh = : FW n18_rFVg

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo10_rFVi
  = \ w_sFvZ ww_sFw3 ->
      case w_sFvZ of {
        [] -> n19_rFVh;
        : y_a9mO ys_a9mP ->
          case ww_sFw3 of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo10_rFVi ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n19_rFVh
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n20_rFVj = $wgo10_rFVi rEW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n21_rFVk = : FW n20_rFVj

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n22_rFVl = : FW n21_rFVk

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo11_rFVm
  = \ w_sFw6 ww_sFwa ->
      case w_sFw6 of {
        [] -> n22_rFVl;
        : y_a9mO ys_a9mP ->
          case ww_sFwa of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo11_rFVm ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n22_rFVl
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n23_rFVn = $wgo11_rFVm rEW 4#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n24_rFVo = : FW n23_rFVn

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n25_rFVp = : DW n24_rFVo

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo12_rFVq
  = \ w_sFwd ww_sFwh ->
      case w_sFwd of {
        [] -> n25_rFVp;
        : y_a9mO ys_a9mP ->
          case ww_sFwh of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo12_rFVq ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n25_rFVp
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n26_rFVr = $wgo12_rFVq rFW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n27_rFVs = : FW n26_rFVr

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo13_rFVt
  = \ w_sFwk ww_sFwo ->
      case w_sFwk of {
        [] -> n27_rFVs;
        : y_a9mO ys_a9mP ->
          case ww_sFwo of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo13_rFVt ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n27_rFVs
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n28_rFVu = $wgo13_rFVt rEW 4#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n29_rFVv = : FW n28_rFVu

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo14_rFVw
  = \ w_sFwr ww_sFwv ->
      case w_sFwr of {
        [] -> n29_rFVv;
        : y_a9mO ys_a9mP ->
          case ww_sFwv of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo14_rFVw ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n29_rFVv
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n30_rFVx = $wgo14_rFVw rEW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n31_rFVy = : FW n30_rFVx

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n32_rFVz = : FW n31_rFVy

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo15_rFVA
  = \ w_sFwy ww_sFwC ->
      case w_sFwy of {
        [] -> n32_rFVz;
        : y_a9mO ys_a9mP ->
          case ww_sFwC of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo15_rFVA ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n32_rFVz
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n33_rFVB = $wgo15_rFVA rEW 4#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n34_rFVC = : FW n33_rFVB

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo16_rFVD
  = \ w_sFwF ww_sFwJ ->
      case w_sFwF of {
        [] -> n34_rFVC;
        : y_a9mO ys_a9mP ->
          case ww_sFwJ of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo16_rFVD ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n34_rFVC
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
nil_rFVE = $wgo16_rFVD rEW 3#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
nil1_rFVF = : FW nil_rFVE

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo2
  = \ w_sFwM ww_sFwQ ->
      case w_sFwM of {
        [] -> nil1_rFVF;
        : y_a9mO ys_a9mP ->
          case ww_sFwQ of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo2 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO nil1_rFVF
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
godboltMap2 = $wgo2 rFW 10#

-- RHS size: {terms: 54, types: 90, coercions: 0, joins: 2/2}
godboltMap1
  = \ s1_aEr8 ->
      case newArray# 100# arrEleBottom s1_aEr8 of
      { (# ipv_aErL, ipv1_aErM #) ->
      join {
        $w$j_sFv3 w_sFv1
          = case unsafeFreezeArray# ipv1_aErM w_sFv1 of
            { (# ipv2_aEts, ipv3_aEtt #) ->
            (# ipv2_aEts, Array $fShowPVars7 boxMap4 100# ipv3_aEtt #)
            } } in
      joinrec {
        $wfillFromList_sFvb ww_sFv9 w_sFv5 w1_sFv6
          = case ww_sFv9 of wild_X73 {
              __DEFAULT ->
                case w_sFv5 of {
                  [] -> jump $w$j_sFv3 w1_sFv6;
                  : y_aEsc ys_aEsd ->
                    case writeArray# ipv1_aErM wild_X73 y_aEsc w1_sFv6 of s2#_aEsq
                    { __DEFAULT ->
                    jump $wfillFromList_sFvb (+# wild_X73 1#) ys_aEsd s2#_aEsq
                    }
                };
              100# -> jump $w$j_sFv3 w1_sFv6
            }; } in
      jump $wfillFromList_sFvb 0# godboltMap2 ipv_aErL
      }

-- RHS size: {terms: 5, types: 36, coercions: 0, joins: 0/0}
godboltMap_map
  = case runRW# godboltMap1 of { (# ipv_aEqT, ipv1_aEqU #) ->
    ipv1_aEqU
    }

-- RHS size: {terms: 3, types: 0, coercions: 2, joins: 0/0}
godboltMap = WorldTiles godboltMap_map (boxMap1 `cast` <Co:2>)

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo17_rFVG
  = \ w_sFxi ww_sFxm ->
      case w_sFxi of {
        [] -> n7_rFV0;
        : y_a9mO ys_a9mP ->
          case ww_sFxm of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo17_rFVG ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n7_rFV0
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n35_rFVH = $wgo17_rFVG rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n36_rFVI = : FW n35_rFVH

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n37_rFVJ = : FW n36_rFVI

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo18_rFVK
  = \ w_sFxp ww_sFxt ->
      case w_sFxp of {
        [] -> n37_rFVJ;
        : y_a9mO ys_a9mP ->
          case ww_sFxt of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo18_rFVK ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n37_rFVJ
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n38_rFVL = $wgo18_rFVK rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n39_rFVM = : FW n38_rFVL

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n40_rFVN = : FW n39_rFVM

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo19_rFVO
  = \ w_sFxw ww_sFxA ->
      case w_sFxw of {
        [] -> n40_rFVN;
        : y_a9mO ys_a9mP ->
          case ww_sFxA of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo19_rFVO ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n40_rFVN
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n41_rFVP = $wgo19_rFVO rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n42_rFVQ = : FW n41_rFVP

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n43_rFVR = : FW n42_rFVQ

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo20_rFVS
  = \ w_sFxD ww_sFxH ->
      case w_sFxD of {
        [] -> n43_rFVR;
        : y_a9mO ys_a9mP ->
          case ww_sFxH of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo20_rFVS ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n43_rFVR
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n44_rFVT = $wgo20_rFVS rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n45_rFVU = : FW n44_rFVT

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n46_rFVV = : FW n45_rFVU

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo21_rFVW
  = \ w_sFxK ww_sFxO ->
      case w_sFxK of {
        [] -> n46_rFVV;
        : y_a9mO ys_a9mP ->
          case ww_sFxO of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo21_rFVW ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n46_rFVV
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
n47_rFVX = $wgo21_rFVW rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n48_rFVY = : FW n47_rFVX

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n49_rFVZ = : FW n48_rFVY

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo22_rFW0
  = \ w_sFxR ww_sFxV ->
      case w_sFxR of {
        [] -> n49_rFVZ;
        : y_a9mO ys_a9mP ->
          case ww_sFxV of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo22_rFW0 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n49_rFVZ
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
nil2_rFW1 = $wgo22_rFW0 rEW 8#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
nil3_rFW2 = : FW nil2_rFW1

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo
  = \ w_sFxY ww_sFy2 ->
      case w_sFxY of {
        [] -> nil3_rFW2;
        : y_a9mO ys_a9mP ->
          case ww_sFy2 of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO nil3_rFW2
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
boxMap3 = $wgo rFW 10#

-- RHS size: {terms: 54, types: 90, coercions: 0, joins: 2/2}
boxMap2
  = \ s1_aEr8 ->
      case newArray# 100# arrEleBottom s1_aEr8 of
      { (# ipv_aErL, ipv1_aErM #) ->
      join {
        $w$j_sFwV w_sFwT
          = case unsafeFreezeArray# ipv1_aErM w_sFwT of
            { (# ipv2_aEts, ipv3_aEtt #) ->
            (# ipv2_aEts, Array $fShowPVars7 boxMap4 100# ipv3_aEtt #)
            } } in
      joinrec {
        $wfillFromList_sFx3 ww_sFx1 w_sFwX w1_sFwY
          = case ww_sFx1 of wild_X7j {
              __DEFAULT ->
                case w_sFwX of {
                  [] -> jump $w$j_sFwV w1_sFwY;
                  : y_aEsc ys_aEsd ->
                    case writeArray# ipv1_aErM wild_X7j y_aEsc w1_sFwY of s2#_aEsq
                    { __DEFAULT ->
                    jump $wfillFromList_sFx3 (+# wild_X7j 1#) ys_aEsd s2#_aEsq
                    }
                };
              100# -> jump $w$j_sFwV w1_sFwY
            }; } in
      jump $wfillFromList_sFx3 0# boxMap3 ipv_aErL
      }

-- RHS size: {terms: 5, types: 36, coercions: 0, joins: 0/0}
boxMap_map
  = case runRW# boxMap2 of { (# ipv_aEqT, ipv1_aEqU #) -> ipv1_aEqU }

-- RHS size: {terms: 3, types: 0, coercions: 2, joins: 0/0}
boxMap = WorldTiles boxMap_map (boxMap1 `cast` <Co:2>)

-- RHS size: {terms: 5, types: 0, coercions: 0, joins: 0/0}
initVars = Vars initPVars boxMap False initInput

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
boxMap8 = I# 4095#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
n50_rFW3 = $wunsafeTake 64# rFW

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
n51_rFW4 = : FW []

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo23_rFW5
  = \ w_sFyg ww_sFyk ->
      case w_sFyg of {
        [] -> n51_rFW4;
        : y_a9mO ys_a9mP ->
          case ww_sFyk of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo23_rFW5 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n51_rFW4
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
x_rFW6 = $wgo23_rFW5 rEW 62#

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
lvl21_rFW7 = ++_$s++ n50_rFW3 FW x_rFW6

Rec {
-- RHS size: {terms: 13, types: 3, coercions: 0, joins: 0/0}
$wxs_rFW8
  = \ ww_sFyq ->
      case ww_sFyq of ds1_aEzw {
        __DEFAULT -> ++_$s++ ($wxs_rFW8 (-# ds1_aEzw 1#)) FW x_rFW6;
        1# -> lvl21_rFW7
      }
end Rec }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
n52_rFW9 = $wxs_rFW8 62#

Rec {
-- RHS size: {terms: 21, types: 11, coercions: 0, joins: 0/0}
$wgo1
  = \ w_sFyt ww_sFyx ->
      case w_sFyt of {
        [] -> n52_rFW9;
        : y_a9mO ys_a9mP ->
          case ww_sFyx of ds1_aEzw {
            __DEFAULT -> : y_a9mO ($wgo1 ys_a9mP (-# ds1_aEzw 1#));
            1# -> : y_a9mO n52_rFW9
          }
      }
end Rec }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
boxMap7 = $wgo1 rFW 64#

-- RHS size: {terms: 54, types: 90, coercions: 0, joins: 2/2}
boxMap6
  = \ s1_aEr8 ->
      case newArray# 4096# arrEleBottom s1_aEr8 of
      { (# ipv_aErL, ipv1_aErM #) ->
      join {
        $w$j_sFy7 w_sFy5
          = case unsafeFreezeArray# ipv1_aErM w_sFy5 of
            { (# ipv2_aEts, ipv3_aEtt #) ->
            (# ipv2_aEts, Array $fShowPVars7 boxMap8 4096# ipv3_aEtt #)
            } } in
      joinrec {
        $wfillFromList_sFyf ww_sFyd w_sFy9 w1_sFya
          = case ww_sFyd of wild_X7u {
              __DEFAULT ->
                case w_sFy9 of {
                  [] -> jump $w$j_sFy7 w1_sFya;
                  : y_aEsc ys_aEsd ->
                    case writeArray# ipv1_aErM wild_X7u y_aEsc w1_sFya of s2#_aEsq
                    { __DEFAULT ->
                    jump $wfillFromList_sFyf (+# wild_X7u 1#) ys_aEsd s2#_aEsq
                    }
                };
              4096# -> jump $w$j_sFy7 w1_sFya
            }; } in
      jump $wfillFromList_sFyf 0# boxMap7 ipv_aErL
      }

-- RHS size: {terms: 5, types: 36, coercions: 0, joins: 0/0}
boxMap64_map
  = case runRW# boxMap6 of { (# ipv_aEqT, ipv1_aEqU #) -> ipv1_aEqU }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
boxMap5 = I32# 64#

-- RHS size: {terms: 3, types: 0, coercions: 2, joins: 0/0}
boxMap64 = WorldTiles boxMap64_map (boxMap5 `cast` <Co:2>)



[ 8 of 17] Compiling Obelisk.Effect.Debug ( src\Obelisk\Effect\Debug.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Effect\Debug.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 81, types: 146, coercions: 0, joins: 0/0}

-- RHS size: {terms: 6, types: 20, coercions: 0, joins: 0/0}
$p1Debug
  = \ @ m_aHao[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Debug v_B2 v_B3 v_B4 -> v_B2 }

-- RHS size: {terms: 6, types: 20, coercions: 0, joins: 0/0}
printGS
  = \ @ m_aHao[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Debug v_B2 v_B3 v_B4 -> v_B3 }

-- RHS size: {terms: 6, types: 20, coercions: 0, joins: 0/0}
dprint
  = \ @ m_aHao[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Debug v_B2 v_B3 v_B4 -> v_B4 }

-- RHS size: {terms: 10, types: 9, coercions: 0, joins: 0/0}
printGS'
  = \ @ m_aHrg $dMonadIO_aHri eta_B1 ->
      liftIO
        $dMonadIO_aHri (hPutStr' stdout ($fShowVars_$cshow eta_B1) True)

-- RHS size: {terms: 13, types: 14, coercions: 0, joins: 0/0}
print'
  = \ @ a_aHqZ @ m_aHr0 $dShow_aHr2 $dMonadIO_aHr3 eta_B1 ->
      liftIO
        $dMonadIO_aHr3 (hPutStr' stdout (show $dShow_aHr2 eta_B1) True)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Effect.Debug"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rHDN = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcDebug1 = KindRepFun krep$*Arr* $krep_rHDN

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcDebug3 = "Debug"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcDebug2 = TrNameS $tcDebug3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcDebug
  = TyCon
      18102584518997058832##
      2188415866529414650##
      $trModule
      $tcDebug2
      0#
      $tcDebug1



[ 9 of 17] Compiling Obelisk.Engine.Ray ( src\Obelisk\Engine\Ray.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Engine\Ray.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 1,601, types: 1,663, coercions: 9, joins: 7/24}

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lenPassthrough1 = I# 0#

Rec {
-- RHS size: {terms: 19, types: 9, coercions: 0, joins: 0/0}
$wgo_rK8F
  = \ w_sJIn ww_sJIr ->
      case w_sJIn of {
        [] -> I# ww_sJIr;
        : y_a9mO ys_a9mP ->
          case y_a9mO of {
            __DEFAULT -> $wgo_rK8F ys_a9mP (+# ww_sJIr 1#);
            FW -> I# ww_sJIr
          }
      }
end Rec }

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
lenPassthrough = \ x_a9ku -> $wgo_rK8F x_a9ku 0#

-- RHS size: {terms: 44, types: 22, coercions: 1, joins: 0/0}
clipWorld
  = \ ws_aI51 eta_B1 ->
      takeWhile
        (\ v_aI52 ->
           case v_aI52 of { V2 x_aI53 y_aI54 ->
           case y_aI54 of { F# x1_sJX9 ->
           case x_aI53 of { F# x2_sJXc ->
           case ws_aI51 `cast` <Co:1> of { I32# x#_ajEP ->
           case leFloat# x2_sJXc (int2Float# x#_ajEP) of {
             __DEFAULT -> False;
             1# ->
               case leFloat# x1_sJX9 (int2Float# x#_ajEP) of {
                 __DEFAULT -> False;
                 1# ->
                   case geFloat# x2_sJXc 0.0# of {
                     __DEFAULT -> False;
                     1# -> tagToEnum# (geFloat# x1_sJX9 0.0#)
                   }
               }
           }
           }
           }
           }
           })
        eta_B1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
baseSteps = $w$cenumFrom1 0.0#

-- RHS size: {terms: 113, types: 28, coercions: 0, joins: 0/2}
$wdeltaFirst
  = \ ww_sJIA ww1_sJIE ->
      case ltFloat# ww1_sJIE 0.0# of {
        __DEFAULT ->
          case decodeFloat_Int# (negateFloat# ww_sJIA) of
          { (# ipv_aIBy, ipv1_aIBz #) ->
          case <# ipv1_aIBz 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (negateInteger (shiftLInteger (smallInteger ipv_aIBy) ipv1_aIBz))
              of wild_ajPM
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPM) ww_sJIA
              };
            1# ->
              let { s_sIMp = negateInt# ipv1_aIBz } in
              case ># s_sIMp 23# of {
                __DEFAULT ->
                  case doubleFromInteger
                         (negateInteger (smallInteger (uncheckedIShiftRA# ipv_aIBy s_sIMp)))
                  of wild_ajPM
                  { __DEFAULT ->
                  minusFloat# (double2Float# wild_ajPM) ww_sJIA
                  };
                1# ->
                  case <# ipv_aIBy 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJIA;
                    1# -> minusFloat# 1.0# ww_sJIA
                  }
              }
          }
          };
        1# ->
          case decodeFloat_Int# ww_sJIA of { (# ipv_aIBT, ipv1_aIBU #) ->
          case <# ipv1_aIBU 0# of {
            __DEFAULT ->
              case doubleFromInteger
                     (shiftLInteger (smallInteger ipv_aIBT) ipv1_aIBU)
              of wild_ajPM
              { __DEFAULT ->
              minusFloat# (double2Float# wild_ajPM) ww_sJIA
              };
            1# ->
              let { s_sIMr = negateInt# ipv1_aIBU } in
              case ># s_sIMr 23# of {
                __DEFAULT ->
                  minusFloat#
                    (double2Float# (int2Double# (uncheckedIShiftRA# ipv_aIBT s_sIMr)))
                    ww_sJIA;
                1# ->
                  case <# ipv_aIBT 0# of {
                    __DEFAULT -> minusFloat# 0.0# ww_sJIA;
                    1# -> minusFloat# -1.0# ww_sJIA
                  }
              }
          }
          }
      }

-- RHS size: {terms: 15, types: 7, coercions: 0, joins: 0/0}
deltaFirst
  = \ w_sJIw w1_sJIx ->
      case w_sJIw of { F# ww1_sJIA ->
      case w1_sJIx of { F# ww3_sJIE ->
      case $wdeltaFirst ww1_sJIA ww3_sJIE of ww4_sJII { __DEFAULT ->
      F# ww4_sJII
      }
      }
      }

-- RHS size: {terms: 86, types: 60, coercions: 0, joins: 0/3}
xRayGridIntersections
  = \ p_aI3o r_aI3p ->
      let {
        nr_sIMj
          = $wnormalize
              $fFloatingFloat $fMetricV2 $fEpsilonFloat_$cnearZero r_aI3p } in
      let {
        firstStep_sIMi
          = case p_aI3o of { V2 a1_aIzh b_aIzi ->
            case a1_aIzh of { F# ww1_sJXf ->
            case nr_sIMj of { V2 a2_XIAy b1_XIAA ->
            case a2_XIAy of { F# ww3_sJXi ->
            case $wdeltaFirst ww1_sJXf ww3_sJXi of ww4_sJII { __DEFAULT ->
            F# (fabsFloat# ww4_sJII)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case p_aI3o of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJXr ->
                     case b1_aIzE of { F# x1_sJXu ->
                     case nr_sIMj of { V2 a2_XICG b2_XICI ->
                     case a2_XICG of { F# y1_sJXl ->
                     case b2_XICI of { F# y2_sJXo ->
                     case firstStep_sIMi of { F# x2_ajOn ->
                     case y_a9mO of { F# y3_ajOr ->
                     case divideFloat# (plusFloat# x2_ajOn y3_ajOr) (fabsFloat# y1_sJXl)
                     of wild9_aICV
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sJXr (timesFloat# wild9_aICV y1_sJXl)))
                       (F# (plusFloat# x1_sJXu (timesFloat# wild9_aICV y2_sJXo)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI baseSteps

-- RHS size: {terms: 86, types: 60, coercions: 0, joins: 0/3}
yRayGridIntersections
  = \ p_aI4j r_aI4k ->
      let {
        nr_sIMb
          = $wnormalize
              $fFloatingFloat $fMetricV2 $fEpsilonFloat_$cnearZero r_aI4k } in
      let {
        firstStep_sIMa
          = case p_aI4j of { V2 a1_aIAc b_aIAd ->
            case b_aIAd of { F# ww1_sJXx ->
            case nr_sIMb of { V2 a2_XIBu b1_XIBw ->
            case b1_XIBw of { F# ww3_sJXA ->
            case $wdeltaFirst ww1_sJXx ww3_sJXA of ww4_sJII { __DEFAULT ->
            F# (fabsFloat# ww4_sJII)
            }
            }
            }
            }
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case p_aI4j of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJXJ ->
                     case b1_aIzE of { F# x1_sJXM ->
                     case nr_sIMb of { V2 a2_XICM b2_XICO ->
                     case a2_XICM of { F# y1_sJXD ->
                     case b2_XICO of { F# y2_sJXG ->
                     case firstStep_sIMa of { F# x2_ajOn ->
                     case y_a9mO of { F# y3_ajOr ->
                     case divideFloat# (plusFloat# x2_ajOn y3_ajOr) (fabsFloat# y2_sJXG)
                     of wild9_aICV
                     { __DEFAULT ->
                     V2
                       (F# (plusFloat# x_sJXJ (timesFloat# wild9_aICV y1_sJXD)))
                       (F# (plusFloat# x1_sJXM (timesFloat# wild9_aICV y2_sJXG)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI baseSteps

-- RHS size: {terms: 95, types: 37, coercions: 0, joins: 1/1}
$wepsilonBump
  = \ w_sJJ0 w1_sJJ1 ->
      (# w1_sJJ1,
         case w1_sJJ1 of { V2 a1_aIzh b_aIzi ->
         case a1_aIzh of { F# x_sJXP ->
         case b_aIzi of { F# x1_sJXY ->
         case w_sJJ0 of { V2 a2_aIzD b1_aIzE ->
         case a2_aIzD of { F# x2_sJXS ->
         case b1_aIzE of { F# x3_sJXV ->
         join {
           $w$j_sJIZ ww_sJIX
             = case gtFloat# x3_sJXV 0.0# of {
                 __DEFAULT ->
                   case ltFloat# x3_sJXV 0.0# of {
                     __DEFAULT ->
                       V2
                         (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                         (I#
                            (float2Int# (plusFloat# x1_sJXY (timesFloat# 1.0e-5# x3_sJXV))));
                     1# ->
                       V2
                         (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                         (I# (float2Int# (plusFloat# x1_sJXY -1.0e-5#)))
                   };
                 1# ->
                   V2
                     (I# (float2Int# (plusFloat# x_sJXP (timesFloat# 1.0e-5# ww_sJIX))))
                     (I# (float2Int# (plusFloat# x1_sJXY 1.0e-5#)))
               } } in
         case gtFloat# x2_sJXS 0.0# of {
           __DEFAULT ->
             case ltFloat# x2_sJXS 0.0# of {
               __DEFAULT -> jump $w$j_sJIZ x2_sJXS;
               1# -> jump $w$j_sJIZ -1.0#
             };
           1# -> jump $w$j_sJIZ 1.0#
         }
         }
         }
         }
         }
         }
         } #)

-- RHS size: {terms: 10, types: 19, coercions: 0, joins: 0/0}
epsilonBump
  = \ w_sJJ0 w1_sJJ1 ->
      case $wepsilonBump w_sJJ0 w1_sJJ1 of { (# ww1_sJKH, ww2_sJKI #) ->
      (ww1_sJKH, ww2_sJKI)
      }

Rec {
-- RHS size: {terms: 56, types: 67, coercions: 1, joins: 0/0}
$wsampleWalkRayPaths
  = \ w_sJJ6 w1_sJJ8 w2_sJJ9 ->
      case w2_sJJ9 of {
        [] -> Nothing;
        : step_aI4R path_aI4S ->
          case $wepsilonBump w1_sJJ8 step_aI4R of
          { (# ww1_sJKH, ww2_sJKI #) ->
          case ww2_sJKI of wild1_X2H { V2 x1_aCJs y_aCJt ->
          case x1_aCJs of { I# ww15_sJY7 ->
          case y_aCJt of { I# ww17_sJYa ->
          case w_sJJ6 of ww3_sFtB { WorldTiles ww4_sFtC ww5_sFtS ->
          case ww4_sFtC of { Array ww7_sFtF ww8_sFtK ww9_sFtP ww10_sFtQ ->
          case ww7_sFtF of { I# ww12_sJY1 ->
          case ww8_sFtK of { I# ww20_sJY4 ->
          case ww5_sFtS `cast` <Co:1> of { I32# ww22_sFtV ->
          case $waccessMap
                 ww12_sJY1
                 ww20_sJY4
                 ww9_sFtP
                 ww10_sFtQ
                 ww22_sFtV
                 ww15_sJY7
                 ww17_sJYa
          of {
            __DEFAULT -> $wsampleWalkRayPaths ww3_sFtB w1_sJJ8 path_aI4S;
            FW -> Just (ww1_sJKH, wild1_X2H)
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 8, types: 8, coercions: 0, joins: 0/0}
sampleWalkRayPaths
  = \ w_sJJ6 _ w2_sJJ8 w3_sJJ9 ->
      $wsampleWalkRayPaths w_sJJ6 w2_sJJ8 w3_sJJ9

Rec {
-- RHS size: {terms: 45, types: 35, coercions: 0, joins: 0/0}
mergeIntersections
  = \ playerpos_aI4B ds_dIuQ ds1_dIuR ->
      case ds_dIuQ of wild_XB {
        [] -> ds1_dIuR;
        : x_aI4C xs_aI4D ->
          case ds1_dIuR of wild1_Xe {
            [] -> wild_XB;
            : y_aI4E ys_aI4F ->
              case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4B x_aI4C
              of
              { F# x1_aIxp ->
              case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4B y_aI4E
              of
              { F# y1_aIxt ->
              case ltFloat# x1_aIxp y1_aIxt of {
                __DEFAULT ->
                  : y_aI4E (mergeIntersections playerpos_aI4B wild_XB ys_aI4F);
                1# -> : x_aI4C (mergeIntersections playerpos_aI4B xs_aI4D wild1_Xe)
              }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 28, types: 16, coercions: 4, joins: 0/0}
shootRay'
  = \ ws_aI4r playerpos_aI4s direction_aI4t ->
      map
        (epsilonBump direction_aI4t)
        (mergeIntersections
           playerpos_aI4s
           (clipWorld
              (case ws_aI4r of { I# x#_ajDu ->
               (I32# (narrow32Int# x#_ajDu)) `cast` <Co:2>
               })
              (xRayGridIntersections playerpos_aI4s direction_aI4t))
           (clipWorld
              (case ws_aI4r of { I# x#_ajDu ->
               (I32# (narrow32Int# x#_ajDu)) `cast` <Co:2>
               })
              (yRayGridIntersections playerpos_aI4s direction_aI4t)))

-- RHS size: {terms: 24, types: 15, coercions: 0, joins: 0/0}
rayCast'
  = \ world_aI4W p_aI4X r_aI4Y ->
      $wsampleWalkRayPaths
        world_aI4W
        r_aI4Y
        (mergeIntersections
           p_aI4X
           (clipWorld
              (case world_aI4W of { WorldTiles ds1_dEkB ds2_dEkC -> ds2_dEkC })
              (xRayGridIntersections p_aI4X r_aI4Y))
           (clipWorld
              (case world_aI4W of { WorldTiles ds1_dEkB ds2_dEkC -> ds2_dEkC })
              (yRayGridIntersections p_aI4X r_aI4Y)))

-- RHS size: {terms: 25, types: 13, coercions: 0, joins: 0/0}
playerPointOrdering
  = \ playerpos_aI4L x_aI4M y_aI4N ->
      case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4L x_aI4M
      of
      { F# x1_aIxp ->
      case $w$cdistance $fFractionalFloat sqrtFloat playerpos_aI4L y_aI4N
      of
      { F# y1_aIxt ->
      case ltFloat# x1_aIxp y1_aIxt of {
        __DEFAULT -> GT;
        1# -> LT
      }
      }
      }

-- RHS size: {terms: 8, types: 10, coercions: 0, joins: 0/0}
mergeIntersections2
  = \ playerpos_aI4I xs_aI4J ys_aI4K ->
      mergeBy (playerPointOrdering playerpos_aI4I) xs_aI4J ys_aI4K

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Engine.Ray"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

Rec {
-- RHS size: {terms: 74, types: 54, coercions: 1, joins: 0/0}
wallSamples
  = \ gs_aI5A ds_dIm4 ->
      case ds_dIm4 of {
        [] -> [];
        : r_aI5C rs_aI5D ->
          case r_aI5C of { V2 ww1_sFuP ww2_sFuU ->
          case ww1_sFuP of { I# ww4_sJYd ->
          case ww2_sFuU of { I# ww6_sJYg ->
          case >=# ww4_sJYd 0# of {
            __DEFAULT -> [];
            1# ->
              case >=# ww6_sJYg 0# of {
                __DEFAULT -> [];
                1# ->
                  case gs_aI5A of wild1_X1s
                  { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
                  case ds2_dEkk of { WorldTiles ds5_dEkB ds6_dEkC ->
                  case ds6_dEkC `cast` <Co:1> of { I32# x#_ajEP ->
                  case <# ww4_sJYd x#_ajEP of {
                    __DEFAULT -> [];
                    1# ->
                      case <# ww6_sJYg x#_ajEP of {
                        __DEFAULT -> [];
                        1# ->
                          : (case ds5_dEkB of
                             { Array ww8_sFtF ww9_sFtK ww10_sFtP ww11_sFtQ ->
                             case ww8_sFtF of { I# ww13_sJYj ->
                             case ww9_sFtK of { I# ww15_sJYm ->
                             $waccessMap
                               ww13_sJYj ww15_sJYm ww10_sFtP ww11_sFtQ x#_ajEP ww4_sJYd ww6_sJYg
                             }
                             }
                             })
                            (wallSamples wild1_X1s rs_aI5D)
                      }
                  }
                  }
                  }
                  }
              }
          }
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep1 = 1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep2 = 0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep3 = :% cameraPlaneSweep1 cameraPlaneSweep1

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneSweep5 = 2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
cameraPlaneSweep4 = :% cameraPlaneSweep5 cameraPlaneSweep1

-- RHS size: {terms: 46, types: 24, coercions: 2, joins: 0/2}
cameraPlaneSweep_$scameraPlaneSweep
  = \ eta_B1 ->
      let {
        lvl_sIQl
          = case eta_B1 `cast` <Co:1> of { I32# x#_ajEP ->
            F# (int2Float# x#_ajEP)
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case y_a9mO of { F# x_aICP ->
                     case lvl_sIQl of { F# y1_aICT ->
                     case divideFloat# x_aICP y1_aICT of wild3_aICV { __DEFAULT ->
                     F# (minusFloat# (plusFloat# wild3_aICV wild3_aICV) 1.0#)
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI
        ($w$cenumFromTo1
           0.0#
           (case eta_B1 `cast` <Co:1> of { I32# x#_ajEP ->
            F# (minusFloat# (int2Float# x#_ajEP) 1.0#)
            }))

-- RHS size: {terms: 56, types: 60, coercions: 0, joins: 0/5}
$wcameraPlaneSweep
  = \ @ a_sJJs @ a1_sJJt w_sJJu w1_sJJv ww_sJJG w2_sJJx ->
      let { lvl_sIQx = fromRational w1_sJJv cameraPlaneSweep4 } in
      let { lvl1_sIQC = fromRational w1_sJJv cameraPlaneSweep3 } in
      let { $dNum_sIMt = $p1Fractional w1_sJJv } in
      let {
        lvl2_sIQy
          = case $dNum_sIMt of
            { C:Num ww2_ajwD ww3_ajwE ww4_ajwF ww5_ajwG ww6_ajwH ww7_ajwI
                    ww8_ajwJ ->
            ww8_ajwJ (toInteger w_sJJu w2_sJJx)
            } } in
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (- $dNum_sIMt
                       (* $dNum_sIMt lvl_sIQx (/ w1_sJJv y_a9mO lvl2_sIQy))
                       lvl1_sIQC)
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI
        (ww_sJJG
           (fromInteger $dNum_sIMt cameraPlaneSweep2)
           (- $dNum_sIMt
              lvl2_sIQy
              (fromInteger $dNum_sIMt cameraPlaneSweep1)))

-- RHS size: {terms: 14, types: 39, coercions: 0, joins: 0/0}
cameraPlaneSweep
  = \ @ a_sJJs @ a1_sJJt w_sJJu w1_sJJv w2_sJJw w3_sJJx ->
      case w2_sJJw of
      { C:Enum ww1_sJJA ww2_sJJB ww3_sJJC ww4_sJJD ww5_sJJE ww6_sJJF
               ww7_sJJG ww8_sJJH ->
      $wcameraPlaneSweep w_sJJu w1_sJJv ww7_sJJG w3_sJJx
      }

-- RHS size: {terms: 52, types: 44, coercions: 0, joins: 0/1}
rayHeads
  = \ screenWidth_aI5a player_aI5b ->
      letrec {
        go3_a9mI
          = \ ds_a9mJ ->
              case ds_a9mJ of {
                [] -> [];
                : y_a9mO ys_a9mP ->
                  : (case player_aI5b of { PVars ds1_dEkI ds2_dEkJ ds3_dEkK ->
                     case ds2_dEkJ of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sJYv ->
                     case b1_aIzE of { F# x1_sJYy ->
                     case ds3_dEkK of { V2 a2_XICW b2_XICY ->
                     case a2_XICW of { F# x2_sJYp ->
                     case b2_XICY of { F# x3_sJYs ->
                     case y_a9mO of { F# y1_ajNn ->
                     V2
                       (F# (plusFloat# x_sJYv (timesFloat# x2_sJYp y1_ajNn)))
                       (F# (plusFloat# x1_sJYy (timesFloat# x3_sJYs y1_ajNn)))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    (go3_a9mI ys_a9mP)
              }; } in
      go3_a9mI (cameraPlaneSweep_$scameraPlaneSweep screenWidth_aI5a)

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/0}
genRays
  = \ screenWidth_aI55 player_aI56 worldSize_aI57 ->
      map
        (shootRay'
           worldSize_aI57
           (case player_aI56 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
            ds1_dEkE
            }))
        (rayHeads screenWidth_aI55 player_aI56)

-- RHS size: {terms: 13, types: 18, coercions: 0, joins: 0/0}
rayCastScreen
  = \ screenWidth_aI5d player_aI5e world_aI5f ->
      map
        (rayCast'
           world_aI5f
           (case player_aI5e of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
            ds1_dEkE
            }))
        (rayHeads screenWidth_aI5d player_aI5e)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
epsilon = F# 1.0e-5#

Rec {
-- RHS size: {terms: 108, types: 78, coercions: 0, joins: 2/2}
$w$sgo4
  = \ w_sJJN ww_sJJV ww1_sJK0 w1_sJJP ->
      case w1_sJJP of wild_aIOn {
        Bin dt_aIOp y_aIOq l_aIOr r_aIOs ->
          case y_aIOq of wild1_sJYM { V2 b1_sJYN b2_sJYO ->
          case b1_sJYN of { I# y#_sJYR ->
          case b2_sJYO of { I# y#1_sJYU ->
          join {
            $j_sITp
              = case $w$sgo4 w_sJJN ww_sJJV ww1_sJK0 l_aIOr of l'_aIOx
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aIOx l_aIOr of {
                  __DEFAULT -> balanceL wild1_sJYM l'_aIOx r_aIOs;
                  1# -> wild_aIOn
                }
                } } in
          case <# ww_sJJV y#_sJYR of {
            __DEFAULT ->
              join {
                $j1_sITr
                  = case $w$sgo4 w_sJJN ww_sJJV ww1_sJK0 r_aIOs of r'_aIOF
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aIOF r_aIOs of {
                      __DEFAULT -> balanceR wild1_sJYM l_aIOr r'_aIOF;
                      1# -> wild_aIOn
                    }
                    } } in
              case ==# ww_sJJV y#_sJYR of {
                __DEFAULT -> jump $j1_sITr;
                1# ->
                  case <# ww1_sJK0 y#1_sJYU of {
                    __DEFAULT ->
                      case ==# ww1_sJK0 y#1_sJYU of {
                        __DEFAULT -> jump $j1_sITr;
                        1# ->
                          case lazy w_sJJN of wild2_aIOB { V2 ipv_sITf ipv1_sITg ->
                          case reallyUnsafePtrEquality# w_sJJN wild1_sJYM of {
                            __DEFAULT -> Bin dt_aIOp wild2_aIOB l_aIOr r_aIOs;
                            1# -> wild_aIOn
                          }
                          }
                      };
                    1# -> jump $j_sITp
                  }
              };
            1# -> jump $j_sITp
          }
          }
          }
          };
        Tip ->
          case lazy w_sJJN of dt_XIms { V2 ipv_sITD ipv1_sITE ->
          Bin 1# dt_XIms Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 183, types: 328, coercions: 0, joins: 1/1}
$wcreate_rK8G
  = \ ww_sJK8 w_sJK5 ->
      case w_sJK5 of wild6_aInb {
        [] -> (# Tip, [], [] #);
        : ipv8_aIne ipv9_aInf ->
          case ww_sJK8 of wild_X21 {
            __DEFAULT ->
              case $wcreate_rK8G (uncheckedIShiftRA# wild_X21 1#) wild6_aInb of
              { (# ww2_sJKK, ww3_sJKL, ww4_sJKM #) ->
              case ww3_sJKL of wild9_aIsB {
                [] -> (# ww2_sJKK, [], ww4_sJKM #);
                : y_aIsF ds11_aIsG ->
                  case ds11_aIsG of wild10_aIsI {
                    [] -> (# insertMax y_aIsF ww2_sJKK, [], ww4_sJKM #);
                    : ipv10_aIsM ipv11_aIsN ->
                      case y_aIsF of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                      case a1_aIGn of { I# x#_sJZ3 ->
                      case a2_aIGo of { I# x_sJZ9 ->
                      case ipv10_aIsM of { V2 b1_aIGs b2_aIGt ->
                      case b1_aIGs of { I# y#_sJZ6 ->
                      case b2_aIGt of { I# y1_sJZc ->
                      join {
                        $j_sISj
                          = case $wcreate_rK8G (uncheckedIShiftRA# wild_X21 1#) wild10_aIsI
                            of
                            { (# ww6_XJNn, ww7_XJNp, ww8_XJNr #) ->
                            (# link wild1_aIGl ww2_sJKK ww6_XJNn, ww7_XJNp, ww8_XJNr #)
                            } } in
                      case <# x#_sJZ3 y#_sJZ6 of {
                        __DEFAULT ->
                          case ==# x#_sJZ3 y#_sJZ6 of {
                            __DEFAULT -> (# ww2_sJKK, [], wild9_aIsB #);
                            1# ->
                              case <# x_sJZ9 y1_sJZc of {
                                __DEFAULT -> (# ww2_sJKK, [], wild9_aIsB #);
                                1# -> jump $j_sISj
                              }
                          };
                        1# -> jump $j_sISj
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                  }
              }
              };
            1# ->
              case ipv9_aInf of wild8_aIt5 {
                [] ->
                  (# case ipv8_aIne of dt_XIms { V2 ipv_sISo ipv1_sISp ->
                     Bin 1# dt_XIms Tip Tip
                     },
                     [], [] #);
                : y_aIt9 ds8_aIta ->
                  case ipv8_aIne of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                  case a1_aIGn of { I# x#_sJZf ->
                  case a2_aIGo of { I# x_sJZl ->
                  case y_aIt9 of { V2 b1_aIGs b2_aIGt ->
                  case b1_aIGs of { I# y#_sJZi ->
                  case b2_aIGt of { I# y1_sJZo ->
                  case <# x#_sJZf y#_sJZi of {
                    __DEFAULT ->
                      case ==# x#_sJZf y#_sJZi of {
                        __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                        1# ->
                          case <# x_sJZl y1_sJZo of {
                            __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                            1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                          }
                      };
                    1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                  }
                  }
                  }
                  }
                  }
                  }
                  }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go_rK8H
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZV ->
          case ww2_sJJX of { I# ww6_sJZY ->
          go_rK8H ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZV ww6_sJZY eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go1_rK8I
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZH ->
          case ww2_sJJX of { I# ww6_sJZK ->
          go1_rK8I ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZH ww6_sJZK eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go2_rK8J
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sJZz ->
          case ww2_sJJX of { I# ww6_sJZC ->
          go2_rK8J ys_a9mP ($w$sgo4 ww_sJJR ww4_sJZz ww6_sJZC eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 84, types: 81, coercions: 0, joins: 1/1}
$wgo4
  = \ ww_sJKp w_sJKl w1_sJKm ->
      case w1_sJKm of wild3_aImM {
        [] -> w_sJKl;
        : ipv3_aImQ ipv4_aImR ->
          case ipv4_aImR of wild4_aImT {
            [] -> insertMax ipv3_aImQ w_sJKl;
            : ipv5_aImY ipv6_aImZ ->
              case ipv3_aImQ of wild_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sJZr ->
              case a2_aIGo of { I# x_sJZN ->
              case ipv5_aImY of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sJZu ->
              case b2_aIGt of { I# y_sJZQ ->
              join {
                $j_sISJ
                  = case $wcreate_rK8G ww_sJKp wild4_aImT of
                    { (# ww2_sJKK, ww3_sJKL, ww4_sJKM #) ->
                    case ww4_sJKM of wild8_aItn {
                      [] ->
                        $wgo4
                          (uncheckedIShiftL# ww_sJKp 1#)
                          (link wild_aIGl w_sJKl ww2_sJKK)
                          ww3_sJKL;
                      : ipv7_aItu ipv8_aItv ->
                        go2_rK8J wild8_aItn (link wild_aIGl w_sJKl ww2_sJKK)
                    }
                    } } in
              case <# x#_sJZr y#_sJZu of {
                __DEFAULT ->
                  case ==# x#_sJZr y#_sJZu of {
                    __DEFAULT -> go1_rK8I wild3_aImM w_sJKl;
                    1# ->
                      case <# x_sJZN y_sJZQ of {
                        __DEFAULT -> go_rK8H wild3_aImM w_sJKl;
                        1# -> jump $j_sISJ
                      }
                  };
                1# -> jump $j_sISJ
              }
              }
              }
              }
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
$sfromList_go
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sJJR { V2 ww1_sJJS ww2_sJJX ->
          case ww1_sJJS of { I# ww4_sK09 ->
          case ww2_sJJX of { I# ww6_sK0c ->
          $sfromList_go ys_a9mP ($w$sgo4 ww_sJJR ww4_sK09 ww6_sK0c eta_B1)
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 84, types: 74, coercions: 0, joins: 0/0}
$sfromList
  = \ ds_aImf ->
      case ds_aImf of {
        [] -> Tip;
        : x_aImr ds1_aIms ->
          case ds1_aIms of wild1_aImu {
            [] ->
              case x_aImr of dt_XIms { V2 ipv_sISQ ipv1_sISR ->
              Bin 1# dt_XIms Tip Tip
              };
            : ipv_aImy ipv1_aImz ->
              case x_aImr of wild2_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sK01 ->
              case a2_aIGo of { I# x1_sK0f ->
              case ipv_aImy of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sK04 ->
              case b2_aIGt of { I# y_sK0i ->
              case <# x#_sK01 y#_sK04 of {
                __DEFAULT ->
                  case ==# x#_sK01 y#_sK04 of {
                    __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                    1# ->
                      case <# x1_sK0f y_sK0i of {
                        __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                        1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
                      }
                  };
                1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
              }
              }
              }
              }
              }
              }
              }
          }
      }

-- RHS size: {terms: 2, types: 2, coercions: 0, joins: 0/0}
visitedPositions1 = $sfromList []

-- RHS size: {terms: 44, types: 44, coercions: 0, joins: 2/3}
visitedPositions
  = \ gs_aI5g steps_aI5h ->
      let { rayVisitedIndexes_sIM3 = map snd steps_aI5h } in
      join {
        $j_sJEz y_atEF
          = case <# 0# y_atEF of {
              __DEFAULT -> visitedPositions1;
              1# -> $sfromList ($wunsafeTake y_atEF rayVisitedIndexes_sIM3)
            } } in
      joinrec {
        $wgo1_sJKE w_sJKy ww_sJKC
          = case w_sJKy of {
              [] -> jump $j_sJEz ww_sJKC;
              : y_a9mO ys_a9mP ->
                case y_a9mO of {
                  __DEFAULT -> jump $wgo1_sJKE ys_a9mP (+# ww_sJKC 1#);
                  FW -> jump $j_sJEz ww_sJKC
                }
            }; } in
      jump $wgo1_sJKE (wallSamples gs_aI5g rayVisitedIndexes_sIM3) 0#


------ Local rules for imported ids --------
"SPEC cameraPlaneSweep @ CInt @ Float"
    forall $dEnum_sIMw $dFractional_sIMv $dIntegral_sIMu.
      cameraPlaneSweep $dIntegral_sIMu $dFractional_sIMv $dEnum_sIMw
      = cameraPlaneSweep_$scameraPlaneSweep
"SPEC/Obelisk.Engine.Ray fromList @ (V2 Int)"
    forall $dOrd_sINz. fromList $dOrd_sINz = $sfromList


[10 of 17] Compiling Obelisk.Graphics.DebugUI ( src\Obelisk\Graphics\DebugUI.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Graphics\DebugUI.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 1,698, types: 2,020, coercions: 83, joins: 4/20}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
playerGraphic2 = "Player Graphic"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerGraphic1 = unpackCString# playerGraphic2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
cameraPlaneGraphic2 = "Camera Graphic"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
cameraPlaneGraphic1 = unpackCString# cameraPlaneGraphic2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic12 = I32# 1#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic8 = F# 5.66#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic9 = F# 5.25#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
singleRaycastGraphic_p
  = V2 singleRaycastGraphic9 singleRaycastGraphic8

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic11 = F# 1.0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
singleRaycastGraphic_r
  = V2 playerArrowGraphic11 playerArrowGraphic11

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic5 = F# 0.0#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic20 = "Grid Lines"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic19 = unpackCString# singleRaycastGraphic20

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
gridColor1 = W8# 63##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
gridColor
  = V4 gridColor1 gridColor1 gridColor1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 63, types: 76, coercions: 7, joins: 0/4}
$wworldGridGraphic
  = \ w_sRvo ->
      (# CO: <Shape Float>_N, singleRaycastGraphic19,
         let {
           worldSize_sQfg
             = case w_sRvo `cast` <Co:1> of { I32# x#_ajEP ->
               F# (int2Float# x#_ajEP)
               } } in
         let {
           z_a9mH
             = letrec {
                 go3_a9mI
                   = \ ds_a9mJ ->
                       case ds_a9mJ of {
                         [] -> [];
                         : y_a9mO ys_a9mP ->
                           : (Prim
                                @~ <Co:2>
                                (Line
                                   (case y_a9mO of dt_XdOE { F# ipv_sQtC ->
                                    V2 playerArrowGraphic5 dt_XdOE
                                    })
                                   ($WV2 worldSize_sQfg y_a9mO)
                                   gridColor))
                             (go3_a9mI ys_a9mP)
                       }; } in
               go3_a9mI ($w$cenumFromTo1 0.0# worldSize_sQfg) } in
         letrec {
           go3_a9mI
             = \ ds_a9mJ ->
                 case ds_a9mJ of {
                   [] -> z_a9mH;
                   : y_a9mO ys_a9mP ->
                     : (Prim
                          @~ <Co:2>
                          (Line
                             (case y_a9mO of dt_XdOC { F# ipv_sQtz ->
                              V2 dt_XdOC playerArrowGraphic5
                              })
                             ($WV2 y_a9mO worldSize_sQfg)
                             gridColor))
                       (go3_a9mI ys_a9mP)
                 }; } in
         go3_a9mI ($w$cenumFromTo1 0.0# worldSize_sQfg) #)

-- RHS size: {terms: 8, types: 37, coercions: 2, joins: 0/0}
worldGridGraphic
  = \ w_sRvo ->
      case $wworldGridGraphic w_sRvo of
      { (# ww1_sRza, ww2_sRzb, ww3_sRzc #) ->
      GroupPrim @~ <Co:2> ww2_sRzb ww3_sRzc
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic4 = F# 6.0e-2#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic3 = V2 playerArrowGraphic5 playerArrowGraphic4

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic7 = F# 0.25#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic6 = V2 playerArrowGraphic7 playerArrowGraphic5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic9 = F# -6.0e-2#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic8 = V2 playerArrowGraphic5 playerArrowGraphic9

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic16 = F# 10.0#

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic15 = V2 playerArrowGraphic16 playerArrowGraphic5

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic17 = V2 playerArrowGraphic5 playerArrowGraphic5

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic19 = "Player Arrow"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
playerArrowGraphic18 = unpackCString# playerArrowGraphic19

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
black1 = W8# 0##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
red
  = V4
      $fBoundedWord8_$cmaxBound black1 black1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic14
  = Line playerArrowGraphic17 playerArrowGraphic15 red

-- RHS size: {terms: 2, types: 2, coercions: 2, joins: 0/0}
playerArrowGraphic13 = Prim @~ <Co:2> playerArrowGraphic14

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
arrowColor1 = W8# 51##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
arrowColor2 = W8# 255##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
arrowColor
  = V4 arrowColor2 arrowColor1 arrowColor1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic2
  = FillTriangle
      playerArrowGraphic8
      playerArrowGraphic6
      playerArrowGraphic3
      arrowColor

-- RHS size: {terms: 2, types: 2, coercions: 2, joins: 0/0}
playerArrowGraphic1 = Prim @~ <Co:2> playerArrowGraphic2

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic12
  = V3 playerArrowGraphic5 playerArrowGraphic11 playerArrowGraphic5

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
playerArrowGraphic10
  = V3 playerArrowGraphic5 playerArrowGraphic5 playerArrowGraphic11

-- RHS size: {terms: 140, types: 71, coercions: 2, joins: 0/3}
$wplayerArrowGraphic
  = \ w_sRwO ->
      (# case w_sRwO of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
         case ds1_dEkE of { V2 a1_aIzh b_aIzi ->
         case a1_aIzh of ww_sRVs { F# ww1_sRVt ->
         case b_aIzi of ww2_sRVv { F# ww3_sRVw ->
         case ds2_dEkF of { V2 ww5_spDG ww6_spDL ->
         case ww5_spDG of { F# ww8_sRVn ->
         case ww6_spDL of { F# ww10_sRVq ->
         case $wvectorAngle ww8_sRVn ww10_sRVq of ww11_spDT { __DEFAULT ->
         let { ww12_sRA1 = cosFloat# ww11_spDT } in
         let { ww13_sRA5 = sinFloat# ww11_spDT } in
         let { ww14_sRA3 = negateFloat# (sinFloat# ww11_spDT) } in
         V3
           (V3
              (F#
                 (plusFloat#
                    (plusFloat# ww12_sRA1 (timesFloat# 0.0# ww13_sRA5))
                    (timesFloat# ww1_sRVt 0.0#)))
              (F#
                 (plusFloat#
                    (plusFloat# ww14_sRA3 (timesFloat# 0.0# ww12_sRA1))
                    (timesFloat# ww1_sRVt 0.0#)))
              ww_sRVs)
           (V3
              (F#
                 (plusFloat#
                    (plusFloat# (timesFloat# 0.0# ww12_sRA1) ww13_sRA5)
                    (timesFloat# ww3_sRVw 0.0#)))
              (F#
                 (plusFloat#
                    (plusFloat# (timesFloat# 0.0# ww14_sRA3) ww12_sRA1)
                    (timesFloat# ww3_sRVw 0.0#)))
              ww2_sRVv)
           (V3
              (F#
                 (plusFloat#
                    (timesFloat# 0.0# ww12_sRA1) (timesFloat# 0.0# ww13_sRA5)))
              (F#
                 (plusFloat#
                    (timesFloat# 0.0# ww14_sRA3) (timesFloat# 0.0# ww12_sRA1)))
              playerArrowGraphic11)
         }
         }
         }
         }
         }
         }
         }
         },
         GroupPrim
           @~ <Co:2>
           playerArrowGraphic18
           (: playerArrowGraphic13
              (: (AffineT
                    (case w_sRwO of { PVars ds1_dEkI ds2_dEkJ ds3_dEkK ->
                     case ds2_dEkJ of { V2 ww11_aQg0 ww12_aQg1 ->
                     case ww11_aQg0 of { F# x_sRVA ->
                     case ww12_aQg1 of { F# x1_sRVD ->
                     V3
                       (V3
                          playerArrowGraphic11
                          playerArrowGraphic5
                          (F#
                             (minusFloat#
                                (timesFloat#
                                   1.05#
                                   (sqrtFloat#
                                      (plusFloat#
                                         (timesFloat# x_sRVA x_sRVA)
                                         (timesFloat# x1_sRVD x1_sRVD))))
                                0.25#)))
                       playerArrowGraphic12
                       playerArrowGraphic10
                     }
                     }
                     }
                     })
                    playerArrowGraphic1)
                 [])) #)

-- RHS size: {terms: 8, types: 16, coercions: 0, joins: 0/0}
playerArrowGraphic
  = \ w_sRwO ->
      case $wplayerArrowGraphic w_sRwO of { (# ww1_sRzi, ww2_sRzj #) ->
      AffineT ww1_sRzi ww2_sRzj
      }

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
blue
  = V4
      black1 black1 $fBoundedWord8_$cmaxBound $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
black = V4 black1 black1 black1 black1

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
midlineRaycastIntersectionsGraphic2 = I32# 3#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
midlineRaycastIntersectionsGraphic4
  = "Midline Intersections Graphic"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
midlineRaycastIntersectionsGraphic3
  = unpackCString# midlineRaycastIntersectionsGraphic4

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
yellow
  = V4 arrowColor2 arrowColor2 black1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 9, types: 17, coercions: 4, joins: 0/0}
midlineRaycastIntersectionsGraphic1
  = \ x_a9ku ->
      Prim
        @~ <Co:2>
        (Circle
           (case x_a9ku of { (x1_aQ6g, ds1_aQ6h) -> x1_aQ6g })
           (midlineRaycastIntersectionsGraphic2 `cast` <Co:2>)
           yellow)

-- RHS size: {terms: 20, types: 28, coercions: 3, joins: 0/0}
midlineRaycastIntersectionsGraphic
  = \ w_sRwT w1_sRwU ->
      GroupPrim
        @~ <Co:2>
        midlineRaycastIntersectionsGraphic3
        (map
           midlineRaycastIntersectionsGraphic1
           (shootRay'
              (case w1_sRwU `cast` <Co:1> of { I32# x#_ajEP -> I# x#_ajEP })
              (case w_sRwT of { PVars ds1_dEkE ds2_dEkF ds3_dEkG -> ds1_dEkE })
              (case w_sRwT of { PVars ds1_dEkI ds2_dEkJ ds3_dEkK -> ds2_dEkJ })))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rSbY = "World Grid Tiles"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl1_rSbZ = unpackCString# lvl_rSbY

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
backgroundColor1 = W8# 34##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
backgroundColor
  = V4
      backgroundColor1
      backgroundColor1
      backgroundColor1
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
doorTileColor1 = W8# 102##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
filledTileColor
  = V4
      arrowColor1 arrowColor1 doorTileColor1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
doorTileColor
  = V4
      doorTileColor1 arrowColor1 doorTileColor1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
wallTypeToColor
  = \ ds_dQ4U ->
      case ds_dQ4U of {
        EW -> backgroundColor;
        FW -> filledTileColor;
        DW -> doorTileColor
      }

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
white
  = V4
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 4, types: 1, coercions: 2, joins: 0/0}
playerCircleGraphic2
  = Circle
      playerArrowGraphic17
      (midlineRaycastIntersectionsGraphic2 `cast` <Co:2>)
      white

-- RHS size: {terms: 2, types: 2, coercions: 2, joins: 0/0}
playerCircleGraphic1 = Prim @~ <Co:2> playerCircleGraphic2

-- RHS size: {terms: 19, types: 18, coercions: 0, joins: 0/0}
playerCircleGraphic
  = \ w_sRwZ ->
      AffineT
        (case w_sRwZ of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
         case ds1_dEkE of { V2 a1_aIzh b_aIzi ->
         V3
           (V3 playerArrowGraphic11 playerArrowGraphic5 a1_aIzh)
           (V3 playerArrowGraphic5 playerArrowGraphic11 b_aIzi)
           playerArrowGraphic10
         }
         })
        playerCircleGraphic1

-- RHS size: {terms: 203, types: 178, coercions: 8, joins: 0/1}
$wcameraPlaneGraphic
  = \ w_sRx4 ->
      let {
        ppos_sQfe
          = case w_sRx4 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
            ds1_dEkE
            } } in
      (# CO: <Shape Float>_N, cameraPlaneGraphic1,
         : (Prim
              @~ <Co:2>
              (Line
                 (case w_sRx4 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
                  case ds1_dEkE of { V2 a1_aIzD b1_aIzE ->
                  case a1_aIzD of { F# x_sRVR ->
                  case b1_aIzE of { F# x1_sRVX ->
                  case ds2_dEkF of { V2 d_aIMX e_aIMY ->
                  case d_aIMX of { F# y_sRVU ->
                  case e_aIMY of { F# y1_sRW0 ->
                  case ds3_dEkG of { V2 d1_XITW e1_XITY ->
                  case d1_XITW of { F# y2_sRW3 ->
                  case e1_XITY of { F# y3_sRW6 ->
                  V2
                    (F# (minusFloat# (plusFloat# x_sRVR y_sRVU) y2_sRW3))
                    (F# (minusFloat# (plusFloat# x1_sRVX y1_sRW0) y3_sRW6))
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  })
                 (case w_sRx4 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
                  case ds1_dEkE of { V2 a1_aIzD b1_aIzE ->
                  case a1_aIzD of { F# x_sRW9 ->
                  case b1_aIzE of { F# x1_sRWf ->
                  case ds2_dEkF of { V2 d_aIMX e_aIMY ->
                  case d_aIMX of { F# y_sRWc ->
                  case e_aIMY of { F# y1_sRWi ->
                  case ds3_dEkG of { V2 d1_XITZ e1_XIU1 ->
                  case d1_XITZ of { F# y2_sRWl ->
                  case e1_XIU1 of { F# y3_sRWo ->
                  V2
                    (F# (plusFloat# (plusFloat# x_sRW9 y_sRWc) y2_sRWl))
                    (F# (plusFloat# (plusFloat# x1_sRWf y1_sRWi) y3_sRWo))
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  }
                  })
                 white))
           (: (Prim
                 @~ <Co:2>
                 (Line
                    ppos_sQfe
                    (case w_sRx4 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
                     case ds1_dEkE of { V2 a1_aIzD b1_aIzE ->
                     case a1_aIzD of { F# x_sRWD ->
                     case b1_aIzE of { F# x1_sRWG ->
                     case ds2_dEkF of { V2 a2_XIFV b2_XIFX ->
                     case a2_XIFV of { F# x2_sRWr ->
                     case b2_XIFX of { F# x3_sRWu ->
                     case ds3_dEkG of { V2 d_aIMX e_aIMY ->
                     case d_aIMX of { F# y_sRWx ->
                     case e_aIMY of { F# y1_sRWA ->
                     V2
                       (F#
                          (plusFloat#
                             x_sRWD (timesFloat# 10.0# (minusFloat# x2_sRWr y_sRWx))))
                       (F#
                          (plusFloat#
                             x1_sRWG (timesFloat# 10.0# (minusFloat# x3_sRWu y1_sRWA))))
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     })
                    gridColor))
              (: (Prim
                    @~ <Co:2>
                    (Line
                       ppos_sQfe
                       (case w_sRx4 of { PVars ds1_dEkE ds2_dEkF ds3_dEkG ->
                        case ds1_dEkE of { V2 a1_aIzD b1_aIzE ->
                        case a1_aIzD of { F# x_sRWV ->
                        case b1_aIzE of { F# x1_sRWY ->
                        case ds2_dEkF of { V2 a2_XIFY b2_XIG0 ->
                        case a2_XIFY of { F# x2_sRWJ ->
                        case b2_XIG0 of { F# x3_sRWP ->
                        case ds3_dEkG of { V2 d_aIMX e_aIMY ->
                        case d_aIMX of { F# y_sRWM ->
                        case e_aIMY of { F# y1_sRWS ->
                        V2
                          (F#
                             (plusFloat#
                                x_sRWV (timesFloat# 10.0# (plusFloat# x2_sRWJ y_sRWM))))
                          (F#
                             (plusFloat#
                                x1_sRWY (timesFloat# 10.0# (plusFloat# x3_sRWP y1_sRWS))))
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                        }
                        })
                       gridColor))
                 [])) #)

-- RHS size: {terms: 8, types: 37, coercions: 2, joins: 0/0}
cameraPlaneGraphic
  = \ w_sRx4 ->
      case $wcameraPlaneGraphic w_sRx4 of
      { (# ww1_sRzs, ww2_sRzt, ww3_sRzu #) ->
      GroupPrim @~ <Co:2> ww2_sRzt ww3_sRzu
      }

-- RHS size: {terms: 13, types: 15, coercions: 2, joins: 0/0}
playerGraphic
  = \ w_sRx9 ->
      GroupPrim
        @~ <Co:2>
        playerGraphic1
        (: (playerCircleGraphic w_sRx9)
           (: (cameraPlaneGraphic w_sRx9) (: (playerArrowGraphic w_sRx9) [])))

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Graphics.DebugUI"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

Rec {
-- RHS size: {terms: 108, types: 78, coercions: 0, joins: 2/2}
$w$sgo4
  = \ w_sRxB ww_sRxJ ww1_sRxO w1_sRxD ->
      case w1_sRxD of wild_aIOn {
        Bin dt_aIOp y_aIOq l_aIOr r_aIOs ->
          case y_aIOq of wild1_sRYJ { V2 b1_sRYK b2_sRYL ->
          case b1_sRYK of { I# y#_sRYO ->
          case b2_sRYL of { I# y#1_sRYR ->
          join {
            $j_sQmd
              = case $w$sgo4 w_sRxB ww_sRxJ ww1_sRxO l_aIOr of l'_aIOx
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aIOx l_aIOr of {
                  __DEFAULT -> balanceL wild1_sRYJ l'_aIOx r_aIOs;
                  1# -> wild_aIOn
                }
                } } in
          case <# ww_sRxJ y#_sRYO of {
            __DEFAULT ->
              join {
                $j1_sQmf
                  = case $w$sgo4 w_sRxB ww_sRxJ ww1_sRxO r_aIOs of r'_aIOF
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aIOF r_aIOs of {
                      __DEFAULT -> balanceR wild1_sRYJ l_aIOr r'_aIOF;
                      1# -> wild_aIOn
                    }
                    } } in
              case ==# ww_sRxJ y#_sRYO of {
                __DEFAULT -> jump $j1_sQmf;
                1# ->
                  case <# ww1_sRxO y#1_sRYR of {
                    __DEFAULT ->
                      case ==# ww1_sRxO y#1_sRYR of {
                        __DEFAULT -> jump $j1_sQmf;
                        1# ->
                          case lazy w_sRxB of wild2_aIOB { V2 ipv_sQm3 ipv1_sQm4 ->
                          case reallyUnsafePtrEquality# w_sRxB wild1_sRYJ of {
                            __DEFAULT -> Bin dt_aIOp wild2_aIOB l_aIOr r_aIOs;
                            1# -> wild_aIOn
                          }
                          }
                      };
                    1# -> jump $j_sQmd
                  }
              };
            1# -> jump $j_sQmd
          }
          }
          }
          };
        Tip ->
          case lazy w_sRxB of dt_XIms { V2 ipv_sQmn ipv1_sQmo ->
          Bin 1# dt_XIms Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 183, types: 328, coercions: 0, joins: 1/1}
$wcreate_rSc0
  = \ ww_sRxW w_sRxT ->
      case w_sRxT of wild6_aInb {
        [] -> (# Tip, [], [] #);
        : ipv8_aIne ipv9_aInf ->
          case ww_sRxW of wild_X3R {
            __DEFAULT ->
              case $wcreate_rSc0 (uncheckedIShiftRA# wild_X3R 1#) wild6_aInb of
              { (# ww2_sRzE, ww3_sRzF, ww4_sRzG #) ->
              case ww3_sRzF of wild9_aIsB {
                [] -> (# ww2_sRzE, [], ww4_sRzG #);
                : y_aIsF ds11_aIsG ->
                  case ds11_aIsG of wild10_aIsI {
                    [] -> (# insertMax y_aIsF ww2_sRzE, [], ww4_sRzG #);
                    : ipv10_aIsM ipv11_aIsN ->
                      case y_aIsF of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                      case a1_aIGn of { I# x#_sRZ0 ->
                      case a2_aIGo of { I# x_sRZ6 ->
                      case ipv10_aIsM of { V2 b1_aIGs b2_aIGt ->
                      case b1_aIGs of { I# y#_sRZ3 ->
                      case b2_aIGt of { I# y1_sRZ9 ->
                      join {
                        $j_sQla
                          = case $wcreate_rSc0 (uncheckedIShiftRA# wild_X3R 1#) wild10_aIsI
                            of
                            { (# ww6_XREK, ww7_XREM, ww8_XREO #) ->
                            (# link wild1_aIGl ww2_sRzE ww6_XREK, ww7_XREM, ww8_XREO #)
                            } } in
                      case <# x#_sRZ0 y#_sRZ3 of {
                        __DEFAULT ->
                          case ==# x#_sRZ0 y#_sRZ3 of {
                            __DEFAULT -> (# ww2_sRzE, [], wild9_aIsB #);
                            1# ->
                              case <# x_sRZ6 y1_sRZ9 of {
                                __DEFAULT -> (# ww2_sRzE, [], wild9_aIsB #);
                                1# -> jump $j_sQla
                              }
                          };
                        1# -> jump $j_sQla
                      }
                      }
                      }
                      }
                      }
                      }
                      }
                  }
              }
              };
            1# ->
              case ipv9_aInf of wild8_aIt5 {
                [] ->
                  (# case ipv8_aIne of dt_XIms { V2 ipv_sQlf ipv1_sQlg ->
                     Bin 1# dt_XIms Tip Tip
                     },
                     [], [] #);
                : y_aIt9 ds8_aIta ->
                  case ipv8_aIne of wild1_aIGl { V2 a1_aIGn a2_aIGo ->
                  case a1_aIGn of { I# x#_sRZc ->
                  case a2_aIGo of { I# x_sRZi ->
                  case y_aIt9 of { V2 b1_aIGs b2_aIGt ->
                  case b1_aIGs of { I# y#_sRZf ->
                  case b2_aIGt of { I# y1_sRZl ->
                  case <# x#_sRZc y#_sRZf of {
                    __DEFAULT ->
                      case ==# x#_sRZc y#_sRZf of {
                        __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                        1# ->
                          case <# x_sRZi y1_sRZl of {
                            __DEFAULT -> (# Bin 1# wild1_aIGl Tip Tip, [], wild8_aIt5 #);
                            1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                          }
                      };
                    1# -> (# Bin 1# wild1_aIGl Tip Tip, wild8_aIt5, [] #)
                  }
                  }
                  }
                  }
                  }
                  }
                  }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go_rSc1
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sRxF { V2 ww1_sRxG ww2_sRxL ->
          case ww1_sRxG of { I# ww4_sRZS ->
          case ww2_sRxL of { I# ww6_sRZV ->
          go_rSc1 ys_a9mP ($w$sgo4 ww_sRxF ww4_sRZS ww6_sRZV eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go1_rSc2
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sRxF { V2 ww1_sRxG ww2_sRxL ->
          case ww1_sRxG of { I# ww4_sRZE ->
          case ww2_sRxL of { I# ww6_sRZH ->
          go1_rSc2 ys_a9mP ($w$sgo4 ww_sRxF ww4_sRZE ww6_sRZH eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
go2_rSc3
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sRxF { V2 ww1_sRxG ww2_sRxL ->
          case ww1_sRxG of { I# ww4_sRZw ->
          case ww2_sRxL of { I# ww6_sRZz ->
          go2_rSc3 ys_a9mP ($w$sgo4 ww_sRxF ww4_sRZw ww6_sRZz eta_B1)
          }
          }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 84, types: 81, coercions: 0, joins: 1/1}
$wgo4
  = \ ww_sRyd w_sRy9 w1_sRya ->
      case w1_sRya of wild3_aImM {
        [] -> w_sRy9;
        : ipv3_aImQ ipv4_aImR ->
          case ipv4_aImR of wild4_aImT {
            [] -> insertMax ipv3_aImQ w_sRy9;
            : ipv5_aImY ipv6_aImZ ->
              case ipv3_aImQ of wild_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sRZo ->
              case a2_aIGo of { I# x_sRZK ->
              case ipv5_aImY of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sRZr ->
              case b2_aIGt of { I# y_sRZN ->
              join {
                $j_sQlA
                  = case $wcreate_rSc0 ww_sRyd wild4_aImT of
                    { (# ww2_sRzE, ww3_sRzF, ww4_sRzG #) ->
                    case ww4_sRzG of wild8_aItn {
                      [] ->
                        $wgo4
                          (uncheckedIShiftL# ww_sRyd 1#)
                          (link wild_aIGl w_sRy9 ww2_sRzE)
                          ww3_sRzF;
                      : ipv7_aItu ipv8_aItv ->
                        go2_rSc3 wild8_aItn (link wild_aIGl w_sRy9 ww2_sRzE)
                    }
                    } } in
              case <# x#_sRZo y#_sRZr of {
                __DEFAULT ->
                  case ==# x#_sRZo y#_sRZr of {
                    __DEFAULT -> go1_rSc2 wild3_aImM w_sRy9;
                    1# ->
                      case <# x_sRZK y_sRZN of {
                        __DEFAULT -> go_rSc1 wild3_aImM w_sRy9;
                        1# -> jump $j_sQlA
                      }
                  };
                1# -> jump $j_sQlA
              }
              }
              }
              }
              }
              }
              }
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 23, types: 22, coercions: 0, joins: 0/0}
$sfromList_go
  = \ ds_a9mJ eta_B1 ->
      case ds_a9mJ of {
        [] -> eta_B1;
        : y_a9mO ys_a9mP ->
          case y_a9mO of ww_sRxF { V2 ww1_sRxG ww2_sRxL ->
          case ww1_sRxG of { I# ww4_sS06 ->
          case ww2_sRxL of { I# ww6_sS09 ->
          $sfromList_go ys_a9mP ($w$sgo4 ww_sRxF ww4_sS06 ww6_sS09 eta_B1)
          }
          }
          }
      }
end Rec }

-- RHS size: {terms: 84, types: 74, coercions: 0, joins: 0/0}
$sfromList
  = \ ds_aImf ->
      case ds_aImf of {
        [] -> Tip;
        : x_aImr ds1_aIms ->
          case ds1_aIms of wild1_aImu {
            [] ->
              case x_aImr of dt_XIms { V2 ipv_sQlH ipv1_sQlI ->
              Bin 1# dt_XIms Tip Tip
              };
            : ipv_aImy ipv1_aImz ->
              case x_aImr of wild2_aIGl { V2 a1_aIGn a2_aIGo ->
              case a1_aIGn of { I# x#_sRZY ->
              case a2_aIGo of { I# x1_sS0c ->
              case ipv_aImy of { V2 b1_aIGs b2_aIGt ->
              case b1_aIGs of { I# y#_sS01 ->
              case b2_aIGt of { I# y_sS0f ->
              case <# x#_sRZY y#_sS01 of {
                __DEFAULT ->
                  case ==# x#_sRZY y#_sS01 of {
                    __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                    1# ->
                      case <# x1_sS0c y_sS0f of {
                        __DEFAULT -> $sfromList_go wild1_aImu (Bin 1# wild2_aIGl Tip Tip);
                        1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
                      }
                  };
                1# -> $wgo4 1# (Bin 1# wild2_aIGl Tip Tip) wild1_aImu
              }
              }
              }
              }
              }
              }
              }
          }
      }

Rec {
-- RHS size: {terms: 58, types: 29, coercions: 0, joins: 0/0}
$wgo1
  = \ ww_sRys ww1_sRyx w_sRym ->
      case w_sRym of {
        Bin ipv_aQ5i ipv1_aQ5j ipv2_aQ5k ipv3_aQ5l ->
          case ipv1_aQ5j of { V2 b1_sS0O b2_sS0P ->
          case b1_sS0O of { I# y#_sS0S ->
          case b2_sS0P of { I# y#1_sS0V ->
          case <# ww_sRys y#_sS0S of {
            __DEFAULT ->
              case ==# ww_sRys y#_sS0S of {
                __DEFAULT -> $wgo1 ww_sRys ww1_sRyx ipv3_aQ5l;
                1# ->
                  case <# ww1_sRyx y#1_sS0V of {
                    __DEFAULT ->
                      case ==# ww1_sRyx y#1_sS0V of {
                        __DEFAULT -> $wgo1 ww_sRys ww1_sRyx ipv3_aQ5l;
                        1# -> True
                      };
                    1# -> $wgo1 ww_sRys ww1_sRyx ipv2_aQ5k
                  }
              };
            1# -> $wgo1 ww_sRys ww1_sRyx ipv2_aQ5k
          }
          }
          }
          };
        Tip -> False
      }
end Rec }

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl2_rSc4
  = V4 backgroundColor1 backgroundColor1 backgroundColor1 arrowColor2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_rSc5 = W8# 54##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl4_rSc6 = V4 lvl3_rSc5 lvl3_rSc5 lvl3_rSc5 arrowColor2

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl5_rSc7 = V4 arrowColor1 arrowColor1 doorTileColor1 arrowColor2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl6_rSc8 = W8# 71##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl7_rSc9 = W8# 122##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl8_rSca = V4 lvl6_rSc8 lvl6_rSc8 lvl7_rSc9 arrowColor2

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl9_rScb
  = V4 doorTileColor1 arrowColor1 doorTileColor1 arrowColor2

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl10_rScc = V4 lvl7_rSc9 lvl6_rSc8 lvl7_rSc9 arrowColor2

-- RHS size: {terms: 196, types: 278, coercions: 15, joins: 0/8}
$wworldGridTilesGraphic
  = \ w_sRz4 w1_sRz5 ->
      (# CO: <Shape Float>_N, lvl1_rSbZ,
         case w_sRz4 of { WorldTiles ds1_dEkB ds2_dEkC ->
         case ds2_dEkC `cast` <Co:1> of { I32# x#_akbm ->
         let {
           lvl11_sQi8 = $w$cenumFromTo1 0# (narrow32Int# (-# x#_akbm 1#)) } in
         letrec {
           go3_a9mI
             = \ ds_a9mJ eta_B1 ->
                 case ds_a9mJ of {
                   [] -> [];
                   : y_a9mO ys_a9mP ->
                     letrec {
                       go4_X9rh
                         = \ ds4_X9rj eta1_X4m ->
                             case ds4_X9rj of {
                               [] -> go3_a9mI ys_a9mP eta1_X4m;
                               : y1_X9rr ys1_X9rt ->
                                 case eta1_X4m of {
                                   [] -> [];
                                   : y2_aQao ys2_aQap ->
                                     case y2_aQao of { (vA_aPIS, vB_aPIT, vC_aPIU, vD_aPIV) ->
                                     let {
                                       tileColor_sQfr
                                         = case ds1_dEkB of
                                           { Array ww4_sFtF ww5_sFtK ww6_sFtP ww7_sFtQ ->
                                           case ww4_sFtF of { I# ww9_sS14 ->
                                           case ww5_sFtK of { I# ww11_sS17 ->
                                           case y_a9mO `cast` <Co:1> of { I32# x#1_ajEP ->
                                           case y1_X9rr `cast` <Co:1> of { I32# x#2_XjKd ->
                                           case $waccessMap
                                                  ww9_sS14
                                                  ww11_sS17
                                                  ww6_sFtP
                                                  ww7_sFtQ
                                                  x#_akbm
                                                  x#1_ajEP
                                                  x#2_XjKd
                                           of {
                                             EW ->
                                               case $wgo1 x#1_ajEP x#2_XjKd w1_sRz5 of {
                                                 False -> lvl2_rSc4;
                                                 True -> lvl4_rSc6
                                               };
                                             FW ->
                                               case $wgo1 x#1_ajEP x#2_XjKd w1_sRz5 of {
                                                 False -> lvl5_rSc7;
                                                 True -> lvl8_rSca
                                               };
                                             DW ->
                                               case $wgo1 x#1_ajEP x#2_XjKd w1_sRz5 of {
                                                 False -> lvl9_rScb;
                                                 True -> lvl10_rScc
                                               }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           } } in
                                     ++_$s++
                                       (go4_X9rh ys1_X9rt ys2_aQap)
                                       (Prim
                                          @~ <Co:2>
                                          (FillTriangle vA_aPIS vB_aPIT vC_aPIU tileColor_sQfr))
                                       (: (Prim
                                             @~ <Co:2>
                                             (FillTriangle vB_aPIT vC_aPIU vD_aPIV tileColor_sQfr))
                                          [])
                                     }
                                 }
                             }; } in
                     go4_X9rh (lvl11_sQi8 `cast` <Co:3>) eta_B1
                 }; } in
         go3_a9mI
           (lvl11_sQi8 `cast` <Co:3>)
           (let {
              lvl12_sQib
                = $w$cenumFromTo1
                    0.0# (F# (minusFloat# (int2Float# x#_akbm) 1.0#)) } in
            letrec {
              go4_X9r9
                = \ ds_a9mJ ->
                    case ds_a9mJ of {
                      [] -> [];
                      : y_a9mO ys_a9mP ->
                        let { z_X9rh = go4_X9r9 ys_a9mP } in
                        letrec {
                          go5_X9rk
                            = \ ds4_X9rm ->
                                case ds4_X9rm of {
                                  [] -> z_X9rh;
                                  : y1_X9ru ys1_X9rw ->
                                    : ($WV2 y_a9mO y1_X9ru,
                                       case y_a9mO of { F# x_ajOn ->
                                       case y1_X9ru of dt_XdOE { F# ipv_sQre ->
                                       V2 (F# (plusFloat# x_ajOn 1.0#)) dt_XdOE
                                       }
                                       },
                                       case y_a9mO of dt_XdOC { F# ipv_sQrh ->
                                       case y1_X9ru of { F# x_ajOn ->
                                       V2 dt_XdOC (F# (plusFloat# x_ajOn 1.0#))
                                       }
                                       },
                                       case y_a9mO of { F# x_ajOn ->
                                       case y1_X9ru of { F# x1_XjTk ->
                                       V2
                                         (F# (plusFloat# x_ajOn 1.0#))
                                         (F# (plusFloat# x1_XjTk 1.0#))
                                       }
                                       })
                                      (go5_X9rk ys1_X9rw)
                                }; } in
                        go5_X9rk lvl12_sQib
                    }; } in
            go4_X9r9 lvl12_sQib)
         }
         } #)

-- RHS size: {terms: 10, types: 40, coercions: 2, joins: 0/0}
worldGridTilesGraphic
  = \ w_sRz4 w1_sRz5 ->
      case $wworldGridTilesGraphic w_sRz4 w1_sRz5 of
      { (# ww1_sRzI, ww2_sRzJ, ww3_sRzK #) ->
      GroupPrim @~ <Co:2> ww2_sRzJ ww3_sRzK
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic23 = I# 10#

-- RHS size: {terms: 7, types: 11, coercions: 0, joins: 0/0}
singleRaycastGraphic22
  = $sfromList
      (map
         snd
         (shootRay'
            singleRaycastGraphic23
            singleRaycastGraphic_p
            singleRaycastGraphic_r))

-- RHS size: {terms: 8, types: 36, coercions: 2, joins: 0/0}
singleRaycastGraphic21
  = case $wworldGridTilesGraphic emptyMap singleRaycastGraphic22 of
    { (# ww1_sRzI, ww2_sRzJ, ww3_sRzK #) ->
    GroupPrim @~ <Co:2> ww2_sRzJ ww3_sRzK
    }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
singleRaycastGraphic10 = I32# 10#

-- RHS size: {terms: 7, types: 36, coercions: 4, joins: 0/0}
singleRaycastGraphic18
  = case $wworldGridGraphic (singleRaycastGraphic10 `cast` <Co:2>) of
    { (# ww1_sRza, ww2_sRzb, ww3_sRzc #) ->
    GroupPrim @~ <Co:2> ww2_sRzb ww3_sRzc
    }

-- RHS size: {terms: 4, types: 1, coercions: 2, joins: 0/0}
singleRaycastGraphic17
  = Circle
      singleRaycastGraphic_p (singleRaycastGraphic12 `cast` <Co:2>) white

-- RHS size: {terms: 2, types: 2, coercions: 2, joins: 0/0}
singleRaycastGraphic16 = Prim @~ <Co:2> singleRaycastGraphic17

-- RHS size: {terms: 6, types: 5, coercions: 4, joins: 0/0}
singleRaycastGraphic15
  = \ c_aPJx ->
      Prim
        @~ <Co:2>
        (Circle c_aPJx (singleRaycastGraphic12 `cast` <Co:2>) blue)

-- RHS size: {terms: 7, types: 5, coercions: 2, joins: 0/0}
singleRaycastGraphic14
  = map
      singleRaycastGraphic15
      (clipWorld
         (singleRaycastGraphic10 `cast` <Co:2>)
         (xRayGridIntersections
            singleRaycastGraphic_p singleRaycastGraphic_r))

-- RHS size: {terms: 3, types: 3, coercions: 2, joins: 0/0}
singleRaycastGraphic13
  = GroupPrim @~ <Co:2> [] singleRaycastGraphic14

-- RHS size: {terms: 6, types: 5, coercions: 4, joins: 0/0}
singleRaycastGraphic11
  = \ c_aPJy ->
      Prim
        @~ <Co:2>
        (Circle c_aPJy (singleRaycastGraphic12 `cast` <Co:2>) red)

-- RHS size: {terms: 7, types: 5, coercions: 2, joins: 0/0}
singleRaycastGraphic7
  = map
      singleRaycastGraphic11
      (clipWorld
         (singleRaycastGraphic10 `cast` <Co:2>)
         (yRayGridIntersections
            singleRaycastGraphic_p singleRaycastGraphic_r))

-- RHS size: {terms: 3, types: 3, coercions: 2, joins: 0/0}
singleRaycastGraphic6
  = GroupPrim @~ <Co:2> [] singleRaycastGraphic7

-- RHS size: {terms: 3, types: 6, coercions: 0, joins: 0/0}
singleRaycastGraphic5 = : singleRaycastGraphic6 []

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
singleRaycastGraphic4
  = : singleRaycastGraphic13 singleRaycastGraphic5

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
singleRaycastGraphic3
  = : singleRaycastGraphic16 singleRaycastGraphic4

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
singleRaycastGraphic2
  = : singleRaycastGraphic18 singleRaycastGraphic3

-- RHS size: {terms: 3, types: 3, coercions: 0, joins: 0/0}
singleRaycastGraphic1
  = : singleRaycastGraphic21 singleRaycastGraphic2

-- RHS size: {terms: 3, types: 3, coercions: 2, joins: 0/0}
singleRaycastGraphic = GroupPrim @~ <Co:2> [] singleRaycastGraphic1


------ Local rules for imported ids --------
"SPEC/Obelisk.Graphics.DebugUI fromList @ (V2 Int)"
    forall $dOrd_sQgh. fromList $dOrd_sQgh = $sfromList


[11 of 17] Compiling Obelisk.Wrapper.SDLFont ( src\Obelisk\Wrapper\SDLFont.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Wrapper\SDLFont.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 127, types: 104, coercions: 0, joins: 0/0}

-- RHS size: {terms: 6, types: 16, coercions: 0, joins: 0/0}
$p1SDLFont
  = \ @ m_aT9d[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLFont v_B2 v_B3 -> v_B2 }

-- RHS size: {terms: 6, types: 16, coercions: 0, joins: 0/0}
renderSolidText
  = \ @ m_aT9d[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLFont v_B2 v_B3 -> v_B3 }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
renderSolidText' = solid

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Wrapper.SDLFont"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rTdq = KindRepTyConApp $tcSurface []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rTfd = KindRepTyConApp $tcText []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rTfe = KindRepTyConApp $tcWord8 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rTff = KindRepTyConApp $tcFont []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rTfg = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_rTfh = : $krep2_rTfe []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rTfi = KindRepTyConApp $tcV4 $krep5_rTfh

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcSDLFont1 = KindRepFun krep$*Arr* $krep4_rTfg

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep7_rTfj = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rTfk = KindRepApp $krep7_rTfj $krep_rTdq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rTfl = KindRepFun $krep1_rTfd $krep8_rTfk

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rTfm = KindRepFun $krep6_rTfi $krep9_rTfl

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rTfn = KindRepFun $krep3_rTff $krep10_rTfm

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_rTfo = : $krep7_rTfj []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rTfp = KindRepTyConApp $tcMonad $krep12_rTfo

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSDLFont3 = "SDLFont"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSDLFont2 = TrNameS $tcSDLFont3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcSDLFont
  = TyCon
      14805335390490441691##
      8801233812663953729##
      $trModule
      $tcSDLFont2
      0#
      $tcSDLFont1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rTfq = KindRepTyConApp $tcSDLFont $krep12_rTfo

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rTfr = KindRepFun $krep11_rTfn $krep14_rTfq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLFont1 = KindRepFun $krep13_rTfp $krep15_rTfr

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLFont3 = "'C:SDLFont"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLFont2 = TrNameS $tc'C:SDLFont3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLFont
  = TyCon
      13961244686249339294##
      376741203565684883##
      $trModule
      $tc'C:SDLFont2
      1#
      $tc'C:SDLFont1



[12 of 17] Compiling Obelisk.Wrapper.SDLInput ( src\Obelisk\Wrapper\SDLInput.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Wrapper\SDLInput.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 225, types: 334, coercions: 61, joins: 0/0}

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
$p1SDLInput
  = \ @ m_aThu[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLInput v_B2 v_B3 v_B4 v_B5 v_B6 -> v_B2 }

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
pollEventPayloads
  = \ @ m_aThu[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLInput v_B2 v_B3 v_B4 v_B5 v_B6 -> v_B3 }

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
checkQuitSignal
  = \ @ m_aThu[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLInput v_B2 v_B3 v_B4 v_B5 v_B6 -> v_B4 }

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
getTime
  = \ @ m_aThu[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLInput v_B2 v_B3 v_B4 v_B5 v_B6 -> v_B5 }

-- RHS size: {terms: 6, types: 21, coercions: 0, joins: 0/0}
getMouseAbsoluteLoc
  = \ @ m_aThu[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:SDLInput v_B2 v_B3 v_B4 v_B5 v_B6 -> v_B6 }

-- RHS size: {terms: 15, types: 30, coercions: 27, joins: 0/0}
pollEventPayloads'1
  = \ s_aTsc ->
      case (($wpollEvents
               $fApplicativeIO
               ($fMonadIO1 `cast` <Co:16>)
               ($fApplicativeIO4 `cast` <Co:8>)
               (\ @ a_aTsi -> id))
            `cast` <Co:3>)
             s_aTsc
      of
      { (# ipv_aTsf, ipv1_aTsg #) ->
      (# ipv_aTsf, map eventPayload ipv1_aTsg #)
      }

-- RHS size: {terms: 5, types: 9, coercions: 4, joins: 0/0}
pollEventPayloads'
  = \ @ m_aTpQ $dMonadIO_aTpS ->
      liftIO $dMonadIO_aTpS (pollEventPayloads'1 `cast` <Co:4>)

-- RHS size: {terms: 18, types: 30, coercions: 27, joins: 0/0}
checkQuitSignal'1
  = \ s_aTsc ->
      case (($wpollEvents
               $fApplicativeIO
               ($fMonadIO1 `cast` <Co:16>)
               ($fApplicativeIO4 `cast` <Co:8>)
               (\ @ a_aTsi -> id))
            `cast` <Co:3>)
             s_aTsc
      of
      { (# ipv_aTsf, ipv1_aTsg #) ->
      (# ipv_aTsf,
         elem $fEqEventPayload QuitEvent (map eventPayload ipv1_aTsg) #)
      }

-- RHS size: {terms: 5, types: 8, coercions: 3, joins: 0/0}
checkQuitSignal'
  = \ @ m_aTl8 $dMonadIO_aTla ->
      liftIO $dMonadIO_aTla (checkQuitSignal'1 `cast` <Co:3>)

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getTime' = getTicks

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
getMouseAbsoluteLoc' = getAbsoluteMouseLocation

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Wrapper.SDLInput"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rTuW = KindRepTyConApp $tcCInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rTuX = KindRepTyConApp $tcWord32 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rTuY = KindRepTyConApp $tcBool []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rTuZ = KindRepTyConApp $tcEventPayload []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rTv0 = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep5_rTv1 = : $krep3_rTuZ []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rTv2 = KindRepTyConApp $tc[] $krep5_rTv1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcSDLInput1 = KindRepFun krep$*Arr* $krep4_rTv0

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep7_rTv3 = KindRepTyConApp $tcV2 []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep8_rTv4 = : $krep_rTuW []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_rTv5 = : $krep7_rTv3 $krep8_rTv4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rTv6 = KindRepTyConApp $tcPoint $krep9_rTv5

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep11_rTv7 = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rTv8 = KindRepApp $krep11_rTv7 $krep10_rTv6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rTv9 = KindRepApp $krep11_rTv7 $krep6_rTv2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_rTva = KindRepApp $krep11_rTv7 $krep2_rTuY

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_rTvb = KindRepApp $krep11_rTv7 $krep1_rTuX

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep16_rTvc = : $krep11_rTv7 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_rTvd = KindRepTyConApp $tcMonad $krep16_rTvc

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSDLInput3 = "SDLInput"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSDLInput2 = TrNameS $tcSDLInput3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcSDLInput
  = TyCon
      8786456088849509953##
      7559042276248737356##
      $trModule
      $tcSDLInput2
      0#
      $tcSDLInput1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_rTve = KindRepTyConApp $tcSDLInput $krep16_rTvc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_rTvf = KindRepFun $krep12_rTv8 $krep18_rTve

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_rTvg = KindRepFun $krep15_rTvb $krep19_rTvf

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_rTvh = KindRepFun $krep14_rTva $krep20_rTvg

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_rTvi = KindRepFun $krep13_rTv9 $krep21_rTvh

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLInput1 = KindRepFun $krep17_rTvd $krep22_rTvi

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLInput3 = "'C:SDLInput"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLInput2 = TrNameS $tc'C:SDLInput3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLInput
  = TyCon
      15281329114346835986##
      776828623297372043##
      $trModule
      $tc'C:SDLInput2
      1#
      $tc'C:SDLInput1



[13 of 17] Compiling Obelisk.Manager.Input ( src\Obelisk\Manager\Input.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Manager\Input.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 295, types: 493, coercions: 1, joins: 0/0}

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
$p1HasInput
  = \ @ m_aTAz[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:HasInput v_B2 v_B3 v_B4 v_B5 -> v_B2 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
updateInput
  = \ @ m_aTAz[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:HasInput v_B2 v_B3 v_B4 v_B5 -> v_B3 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
setInput
  = \ @ m_aTAz[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:HasInput v_B2 v_B3 v_B4 v_B5 -> v_B4 }

-- RHS size: {terms: 6, types: 17, coercions: 0, joins: 0/0}
getInput
  = \ @ m_aTAz[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:HasInput v_B2 v_B3 v_B4 v_B5 -> v_B5 }

-- RHS size: {terms: 12, types: 31, coercions: 0, joins: 0/0}
$wgetInput'
  = \ @ m_sUfE ww_sUfM ww1_sUfO ww2_sUfQ ->
      ww_sUfM
        ww2_sUfQ
        (\ s1_aUen ->
           ww1_sUfO
             (case s1_aUen of { Vars ds1_dEkt ds2_dEku ds3_dEkv ds4_dEkw ->
              ds4_dEkw
              }))

-- RHS size: {terms: 12, types: 56, coercions: 0, joins: 0/0}
getInput'
  = \ @ m_sUfE w_sUfF ->
      case w_sUfF of
      { C:MonadState ww1_sUfI ww2_sUfQ ww3_sUfR ww4_sUfS ->
      case ww1_sUfI of { C:Monad ww6_sUfL ww7_sUfM ww8_sUfN ww9_sUfO ->
      $wgetInput' ww7_sUfM ww9_sUfO ww2_sUfQ
      }
      }

-- RHS size: {terms: 16, types: 19, coercions: 0, joins: 0/0}
setInput'
  = \ @ m_aTHQ $dMonadState_aTHS input_aTDc ->
      state
        $dMonadState_aTHS
        (\ s1_aUbW ->
           ((),
            case s1_aUbW of { Vars ds_dUbY ds1_dUbZ ds2_dUc0 ds3_dUc1 ->
            Vars ds_dUbY ds1_dUbZ ds2_dUc0 input_aTDc
            }))

Rec {
-- RHS size: {terms: 68, types: 50, coercions: 1, joins: 0/0}
$wstepControl
  = \ w_sUfV ww_sUfZ ww1_sUg0 ww2_sUg1 ww3_sUg2 ->
      case w_sUfV of {
        [] -> (# ww_sUfZ, ww1_sUg0, ww2_sUg1, ww3_sUg2 #);
        : ds_dUay xs_aTDe ->
          case ds_dUay of {
            __DEFAULT -> (# ww_sUfZ, ww1_sUg0, ww2_sUg1, ww3_sUg2 #);
            KeyboardEvent ds1_dUaz ->
              case ds1_dUaz of
              { KeyboardEventData ds2_sUhv ds3_sUhw ds4_sUhx ds5_sUhy ->
              case ds5_sUhy of { Keysym ds6_sUhB ds7_sUhC ds8_sUhD ->
              case ds7_sUhC `cast` <Co:1> of { I32# x_aUbN ->
              case x_aUbN of {
                __DEFAULT -> (# ww_sUfZ, ww1_sUg0, ww2_sUg1, ww3_sUg2 #);
                27# -> $wstepControl xs_aTDe ww_sUfZ ww1_sUg0 True ww3_sUg2;
                97# -> $wstepControl xs_aTDe True ww1_sUg0 ww2_sUg1 ww3_sUg2;
                100# -> $wstepControl xs_aTDe ww_sUfZ True ww2_sUg1 ww3_sUg2;
                112# -> $wstepControl xs_aTDe ww_sUfZ ww1_sUg0 ww2_sUg1 True
              }
              }
              }
              }
          }
      }
end Rec }

-- RHS size: {terms: 18, types: 21, coercions: 0, joins: 0/0}
stepControl
  = \ w_sUfV w1_sUfW ->
      case w1_sUfW of { Input ww1_sUfZ ww2_sUg0 ww3_sUg1 ww4_sUg2 ->
      case $wstepControl w_sUfV ww1_sUfZ ww2_sUg0 ww3_sUg1 ww4_sUg2 of
      { (# ww6_sUgq, ww7_sUgr, ww8_sUgs, ww9_sUgt #) ->
      Input ww6_sUgq ww7_sUgr ww8_sUgs ww9_sUgt
      }
      }

-- RHS size: {terms: 22, types: 39, coercions: 0, joins: 0/0}
$wupdateInput'
  = \ @ m_sUg8 ww_sUgh ww1_sUgm w_sUga ->
      ww_sUgh
        (pollEventPayloads w_sUga)
        (\ events_aTDb ->
           ww1_sUgm
             (case $wstepControl events_aTDb False False False False of
              { (# ww3_sUgq, ww4_sUgr, ww5_sUgs, ww6_sUgt #) ->
              Input ww3_sUgq ww4_sUgr ww5_sUgs ww6_sUgt
              }))

-- RHS size: {terms: 13, types: 50, coercions: 0, joins: 0/0}
updateInput'
  = \ @ m_sUg8 w_sUg9 w1_sUga ->
      case w_sUg9 of { C:HasInput ww1_sUgd ww2_sUgl ww3_sUgm ww4_sUgn ->
      case ww1_sUgd of { C:Monad ww6_sUgg ww7_sUgh ww8_sUgi ww9_sUgj ->
      $wupdateInput' ww7_sUgh ww3_sUgm w1_sUga
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Manager.Input"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rUaK = KindRepTyConApp $tcInput []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rUiq = KindRepTyConApp $tc() []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rUir = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcHasInput1 = KindRepFun krep$*Arr* $krep2_rUir

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep3_rUis = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep4_rUit = KindRepApp $krep3_rUis $krep1_rUiq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_rUiu = KindRepFun $krep_rUaK $krep4_rUit

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep6_rUiv = KindRepApp $krep3_rUis $krep_rUaK

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rUiw = : $krep3_rUis []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rUix = KindRepTyConApp $tcMonad $krep7_rUiw

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcHasInput3 = "HasInput"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcHasInput2 = TrNameS $tcHasInput3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcHasInput
  = TyCon
      10114888649823885653##
      1208203940834747464##
      $trModule
      $tcHasInput2
      0#
      $tcHasInput1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep9_rUiy = KindRepTyConApp $tcHasInput $krep7_rUiw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rUiz = KindRepFun $krep6_rUiv $krep9_rUiy

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rUiA = KindRepFun $krep5_rUiu $krep10_rUiz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_rUiB = KindRepFun $krep4_rUit $krep11_rUiA

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:HasInput1 = KindRepFun $krep8_rUix $krep12_rUiB

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:HasInput3 = "'C:HasInput"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:HasInput2 = TrNameS $tc'C:HasInput3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:HasInput
  = TyCon
      4221620398969441473##
      17366225587319841947##
      $trModule
      $tc'C:HasInput2
      1#
      $tc'C:HasInput1



[14 of 17] Compiling Obelisk.Wrapper.SDLRenderer ( src\Obelisk\Wrapper\SDLRenderer.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Wrapper\SDLRenderer.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 498, types: 1,190, coercions: 15, joins: 0/0}

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
$p1SDLRenderer
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B2
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
updateWindowSurface
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B3
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
surfaceFillScreenRect
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B4
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
clearRenderer
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B5
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
drawLine
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B6
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
fillTriangle
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B7
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
circle
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B8
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
fillCircle
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_B9
      }

-- RHS size: {terms: 6, types: 58, coercions: 0, joins: 0/0}
surfaceBlit
  = \ @ m_aUrl[sk:1] v_B1 ->
      case v_B1 of v_B1
      { C:SDLRenderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 v_B8 v_B9 v_Ba ->
      v_Ba
      }

-- RHS size: {terms: 30, types: 53, coercions: 4, joins: 0/0}
$wupdateWindowSurface'
  = \ @ m_sVwZ ww_sVx5 w_sVx1 ->
      ww_sVx5
        ((\ s_aVlv ->
            case w_sVx1 `cast` <Co:1> of { Ptr ds8_aVkY ->
            case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aVkX
                   ds8_aVkY s_aVlv
            of
            { (# ds10_aVl2, ds11_aVl3 #) ->
            case <# (narrow32Int# ds11_aVl3) 0# of {
              __DEFAULT -> (# ds10_aVl2, () #);
              1# ->
                case updateWindowSurface1 ds10_aVl2 of
                { (# ipv_aVly, ipv1_aVlz #) ->
                (# ipv_aVly, () #)
                }
            }
            }
            })
         `cast` <Co:3>)

-- RHS size: {terms: 9, types: 18, coercions: 0, joins: 0/0}
updateWindowSurface'
  = \ @ m_sVwZ w_sVx0 w1_sVx1 ->
      case w_sVx0 of { C:MonadIO ww1_sVx4 ww2_sVx5 ->
      $wupdateWindowSurface' ww2_sVx5 w1_sVx1
      }

-- RHS size: {terms: 15, types: 19, coercions: 0, joins: 0/0}
$wsurfaceFillScreenRect'
  = \ @ m_sVx8
      ww_sVxf
      ww1_sVxj
      ww2_sVxr
      ww3_sVxw
      ww4_sVxB
      ww5_sVxG ->
      $wsurfaceFillRect
        ww_sVxf ww1_sVxj Nothing ww2_sVxr ww3_sVxw ww4_sVxB ww5_sVxG

-- RHS size: {terms: 32, types: 38, coercions: 0, joins: 0/0}
surfaceFillScreenRect'
  = \ @ m_sVx8 w_sVx9 w1_sVxa w2_sVxb ->
      case w_sVx9 of { C:MonadIO ww1_sVxe ww2_sVxf ->
      case w1_sVxa of { Surface ww4_sVxj ww5_sVxk ->
      case w2_sVxb of { V4 ww7_sVxo ww8_sVxt ww9_sVxy ww10_sVxD ->
      case ww7_sVxo of { W8# ww12_sVzM ->
      case ww8_sVxt of { W8# ww14_sVzP ->
      case ww9_sVxy of { W8# ww16_sVzS ->
      case ww10_sVxD of { W8# ww18_sVzV ->
      $wsurfaceFillScreenRect'
        ww2_sVxf ww4_sVxj ww12_sVzM ww14_sVzP ww16_sVzS ww18_sVzV
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl_rVAG = "SDL.Video.clear"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
caller12_rVAH = unpackCString# lvl_rVAG

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_rVAI = "SDL_RenderClear"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
funName12_rVAJ = unpackCString# lvl1_rVAI

-- RHS size: {terms: 4, types: 9, coercions: 0, joins: 0/0}
clearRenderer'2 = \ s_aUGu -> (# s_aUGu, () #)

-- RHS size: {terms: 9, types: 5, coercions: 0, joins: 0/0}
lvl2_rVAK
  = \ ipv_aUKI ipv1_aUKJ ->
      raiseIO#
        ($fExceptionSDLException_$ctoException
           ($WSDLCallFailed caller12_rVAH funName12_rVAJ ipv1_aUKJ))
        ipv_aUKI

-- RHS size: {terms: 8, types: 13, coercions: 0, joins: 0/0}
clearRenderer'1
  = \ s_aUGx ->
      case getError1 s_aUGx of { (# ipv_aUKI, ipv1_aUKJ #) ->
      lvl2_rVAK ipv_aUKI ipv1_aUKJ
      }

-- RHS size: {terms: 41, types: 73, coercions: 11, joins: 0/0}
$wclearRenderer'
  = \ @ m_sVy1 ww_sVya ww1_sVyb ww2_sVyc ww3_sVye w_sVy3 ->
      ww1_sVyb
        (ww_sVya
           (ww3_sVye
              (case w_sVy3 `cast` <Co:1> of { Ptr ds10_aUGj ->
               (\ ds11_aUGh ->
                  case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aUGi
                         ds10_aUGj ds11_aUGh
                  of
                  { (# ds12_aUGn, ds13_aUGo #) ->
                  (# ds12_aUGn, I32# (narrow32Int# ds13_aUGo) #)
                  })
               `cast` <Co:3>
               }))
           (\ a1_aUGq ->
              ww1_sVyb
                (ww3_sVye
                   (case a1_aUGq `cast` <Co:1> of { I32# x_aUW9 ->
                    case <# x_aUW9 0# of {
                      __DEFAULT -> clearRenderer'2 `cast` <Co:3>;
                      1# -> clearRenderer'1 `cast` <Co:3>
                    }
                    }))
                (ww2_sVyc a1_aUGq)))
        (ww2_sVyc ())

-- RHS size: {terms: 15, types: 48, coercions: 0, joins: 0/0}
clearRenderer'
  = \ @ m_sVy1 w_sVy2 w1_sVy3 ->
      case w_sVy2 of { C:MonadIO ww1_sVy6 ww2_sVye ->
      case ww1_sVy6 of { C:Monad ww4_sVy9 ww5_sVya ww6_sVyb ww7_sVyc ->
      $wclearRenderer' ww5_sVya ww6_sVyb ww7_sVyc ww2_sVye w1_sVy3
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
drawLine' = line

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fillTriangle' = fillTriangle

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
circle' = circle

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
fillCircle' = fillCircle

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
surfaceBlit' = surfaceBlit

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Wrapper.SDLRenderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_rVAL = KindRepTyConApp $tcCInt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep1_rVAM = KindRepTyConApp $tcRenderer []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep2_rVAN = KindRepTyConApp $tcWord8 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_rVAO = KindRepTyConApp $tcSurface []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_rVAP = KindRepTyConApp $tc() []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_rVAQ = KindRepTyConApp $tcWindow []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_rVAR = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep7_rVAS = : $krep_rVAL []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep8_rVAT = KindRepTyConApp $tcRectangle $krep7_rVAS

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_rVAU = : $krep8_rVAT []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_rVAV = KindRepTyConApp $tcMaybe $krep9_rVAU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_rVAW = KindRepTyConApp $tcV2 $krep7_rVAS

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep12_rVAX = : $krep2_rVAN []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_rVAY = KindRepTyConApp $tcV4 $krep12_rVAX

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcSDLRenderer1 = KindRepFun krep$*Arr* $krep6_rVAR

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep14_rVAZ = KindRepTyConApp $tcV2 []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep15_rVB0 = : $krep14_rVAZ $krep7_rVAS

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_rVB1 = KindRepTyConApp $tcPoint $krep15_rVB0

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep17_rVB2 = : $krep16_rVB1 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_rVB3 = KindRepTyConApp $tcMaybe $krep17_rVB2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep19_rVB4 = KindRepVar 0#

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep20_rVB5 = KindRepApp $krep19_rVB4 $krep10_rVAV

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep21_rVB6 = KindRepFun $krep18_rVB3 $krep20_rVB5

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep22_rVB7 = KindRepFun $krep3_rVAO $krep21_rVB6

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep23_rVB8 = KindRepFun $krep10_rVAV $krep22_rVB7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep24_rVB9 = KindRepFun $krep3_rVAO $krep23_rVB8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep25_rVBa = KindRepApp $krep19_rVB4 $krep4_rVAP

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep26_rVBb = KindRepFun $krep13_rVAY $krep25_rVBa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep27_rVBc = KindRepFun $krep11_rVAW $krep26_rVBb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep28_rVBd = KindRepFun $krep11_rVAW $krep27_rVBc

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep29_rVBe = KindRepFun $krep11_rVAW $krep28_rVBd

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep30_rVBf = KindRepFun $krep1_rVAM $krep29_rVBe

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep31_rVBg = KindRepFun $krep1_rVAM $krep28_rVBd

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep32_rVBh = KindRepFun $krep_rVAL $krep26_rVBb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep33_rVBi = KindRepFun $krep11_rVAW $krep32_rVBh

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep34_rVBj = KindRepFun $krep1_rVAM $krep33_rVBi

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep35_rVBk = KindRepFun $krep3_rVAO $krep26_rVBb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep36_rVBl = KindRepFun $krep5_rVAQ $krep25_rVBa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep37_rVBm = KindRepFun $krep1_rVAM $krep25_rVBa

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep38_rVBn = : $krep19_rVB4 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep39_rVBo = KindRepTyConApp $tcMonad $krep38_rVBn

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcSDLRenderer3 = "SDLRenderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcSDLRenderer2 = TrNameS $tcSDLRenderer3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcSDLRenderer
  = TyCon
      14388960452145102129##
      18370792896576722753##
      $trModule
      $tcSDLRenderer2
      0#
      $tcSDLRenderer1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep40_rVBp = KindRepTyConApp $tcSDLRenderer $krep38_rVBn

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep41_rVBq = KindRepFun $krep24_rVB9 $krep40_rVBp

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep42_rVBr = KindRepFun $krep34_rVBj $krep41_rVBq

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep43_rVBs = KindRepFun $krep34_rVBj $krep42_rVBr

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep44_rVBt = KindRepFun $krep30_rVBf $krep43_rVBs

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep45_rVBu = KindRepFun $krep31_rVBg $krep44_rVBt

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep46_rVBv = KindRepFun $krep37_rVBm $krep45_rVBu

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep47_rVBw = KindRepFun $krep35_rVBk $krep46_rVBv

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep48_rVBx = KindRepFun $krep36_rVBl $krep47_rVBw

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLRenderer1 = KindRepFun $krep39_rVBo $krep48_rVBx

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLRenderer3 = "'C:SDLRenderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLRenderer2 = TrNameS $tc'C:SDLRenderer3

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:SDLRenderer
  = TyCon
      14578005759277500500##
      11137044661335671440##
      $trModule
      $tc'C:SDLRenderer2
      1#
      $tc'C:SDLRenderer1



[15 of 17] Compiling Obelisk.Effect.Renderer ( src\Obelisk\Effect\Renderer.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Effect\Renderer.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 3,974, types: 3,853, coercions: 85, joins: 16/105}

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
$p1Renderer
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B2
      }

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
clearScreen
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B3
      }

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
drawScreen
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B4
      }

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
fillBackground
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B5
      }

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
drawDebug
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B6
      }

-- RHS size: {terms: 6, types: 24, coercions: 0, joins: 0/0}
drawGraphicDebug
  = \ @ m_aVUp[sk:1] v_B1 ->
      case v_B1 of v_B1 { C:Renderer v_B2 v_B3 v_B4 v_B5 v_B6 v_B7 ->
      v_B7
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl_r10RK = I32# 320#

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl1_r10RL = "Debug UI"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl2_r10RM = unpackCString# lvl1_r10RL

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
centerScreenOnWorldGrid2 = F# 0.0#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
centerScreenOnWorldGrid_dt = F# 1.0#

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
centerScreenOnWorldGrid1
  = V3
      centerScreenOnWorldGrid2
      centerScreenOnWorldGrid2
      centerScreenOnWorldGrid_dt

-- RHS size: {terms: 26, types: 10, coercions: 2, joins: 0/0}
translateToPDCenter
  = \ w_sZbF w1_sZbG ->
      case w_sZbF `cast` <Co:1> of { I32# ww1_sZbJ ->
      case w1_sZbG `cast` <Co:1> of { I32# ww3_sZbN ->
      V3
        (V3
           centerScreenOnWorldGrid_dt
           centerScreenOnWorldGrid2
           (F# (divideFloat# (int2Float# ww1_sZbJ) 2.0#)))
        (V3
           centerScreenOnWorldGrid2
           centerScreenOnWorldGrid_dt
           (F# (divideFloat# (int2Float# ww3_sZbN) 2.0#)))
        centerScreenOnWorldGrid1
      }
      }

-- RHS size: {terms: 743, types: 171, coercions: 1, joins: 0/46}
gridT
  = \ worldSize_aVVz
      zoomFactor_aVVA
      rotationFactor_aVVB
      ds_dWxt
      translateToPDCenter1_aVVC ->
      case ds_dWxt of {
        Nothing ->
          case translateToPDCenter1_aVVC of { V3 a1_ajzt b1_ajzu c_ajzv ->
          case a1_ajzt of { V3 ww1_s10fq ww2_s10fr ww3_s10fs ->
          case ww1_s10fq of { F# ww5_s10fv ->
          case ww2_s10fr of { F# ww7_s10fy ->
          case ww3_s10fs of { F# ww9_s10fB ->
          case b1_ajzu of { V3 ww11_s10fE ww12_s10fF ww13_s10fG ->
          case ww11_s10fE of { F# ww15_s10fJ ->
          case ww12_s10fF of { F# ww17_s10fM ->
          case ww13_s10fG of { F# ww19_s10fP ->
          case c_ajzv of { V3 ww21_s10fS ww22_s10fT ww23_s10fU ->
          case ww21_s10fS of { F# ww25_s10fX ->
          case ww22_s10fT of { F# ww27_s10g0 ->
          case ww23_s10fU of { F# ww29_s10g3 ->
          case rotationFactor_aVVB of { F# ww31_skyh ->
          case zoomFactor_aVVA of { F# ipv_sXkP ->
          case worldSize_aVVz `cast` <Co:1> of { I32# x#_ajEP ->
          let { ww32_sZxs = cosFloat# ww31_skyh } in
          let { ww33_sZxu = negateFloat# (sinFloat# ww31_skyh) } in
          let { ww34_sZxw = sinFloat# ww31_skyh } in
          let {
            ipv1_sZyn
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww25_s10fX 0.0#) (timesFloat# ww27_s10g0 0.0#))
                  ww29_s10g3 } in
          let {
            ipv2_sZym
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww25_s10fX ww33_sZxu)
                     (timesFloat# ww27_s10g0 ww32_sZxs))
                  (timesFloat# ww29_s10g3 0.0#) } in
          let {
            ipv3_sZyl
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww25_s10fX ww32_sZxs)
                     (timesFloat# ww27_s10g0 ww34_sZxw))
                  (timesFloat# ww29_s10g3 0.0#) } in
          let {
            ww35_sZzb
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv3_sZyl 0.0#) (timesFloat# ipv2_sZym 0.0#))
                  ipv1_sZyn } in
          let {
            ww36_sZza
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv3_sZyl 0.0#) (timesFloat# ipv2_sZym ipv_sXkP))
                  (timesFloat# ipv1_sZyn 0.0#) } in
          let {
            ww37_sZz9
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv3_sZyl ipv_sXkP) (timesFloat# ipv2_sZym 0.0#))
                  (timesFloat# ipv1_sZyn 0.0#) } in
          let {
            ipv4_sZyg
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww15_s10fJ 0.0#) (timesFloat# ww17_s10fM 0.0#))
                  ww19_s10fP } in
          let {
            ipv5_sZyf
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww15_s10fJ ww33_sZxu)
                     (timesFloat# ww17_s10fM ww32_sZxs))
                  (timesFloat# ww19_s10fP 0.0#) } in
          let {
            ipv6_sZye
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww15_s10fJ ww32_sZxs)
                     (timesFloat# ww17_s10fM ww34_sZxw))
                  (timesFloat# ww19_s10fP 0.0#) } in
          let {
            ww38_sZz5
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv6_sZye 0.0#) (timesFloat# ipv5_sZyf 0.0#))
                  ipv4_sZyg } in
          let {
            ww39_sZz4
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv6_sZye 0.0#) (timesFloat# ipv5_sZyf ipv_sXkP))
                  (timesFloat# ipv4_sZyg 0.0#) } in
          let {
            ww40_sZz3
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv6_sZye ipv_sXkP) (timesFloat# ipv5_sZyf 0.0#))
                  (timesFloat# ipv4_sZyg 0.0#) } in
          let {
            ipv7_sZy9
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww5_s10fv 0.0#) (timesFloat# ww7_s10fy 0.0#))
                  ww9_s10fB } in
          let {
            ipv8_sZy8
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww5_s10fv ww33_sZxu)
                     (timesFloat# ww7_s10fy ww32_sZxs))
                  (timesFloat# ww9_s10fB 0.0#) } in
          let {
            ipv9_sZy7
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww5_s10fv ww32_sZxs)
                     (timesFloat# ww7_s10fy ww34_sZxw))
                  (timesFloat# ww9_s10fB 0.0#) } in
          let {
            ww41_sZyZ
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv9_sZy7 0.0#) (timesFloat# ipv8_sZy8 0.0#))
                  ipv7_sZy9 } in
          let {
            ww42_sZyY
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv9_sZy7 0.0#) (timesFloat# ipv8_sZy8 ipv_sXkP))
                  (timesFloat# ipv7_sZy9 0.0#) } in
          let {
            ww43_sZyX
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ipv9_sZy7 ipv_sXkP) (timesFloat# ipv8_sZy8 0.0#))
                  (timesFloat# ipv7_sZy9 0.0#) } in
          let {
            ww44_sZyq
              = negateFloat# (divideFloat# (int2Float# x#_ajEP) 2.0#) } in
          V3
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ww43_sZyX (timesFloat# ww42_sZyY 0.0#))
                     (timesFloat# ww41_sZyZ 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ww43_sZyX 0.0#) ww42_sZyY)
                     (timesFloat# ww41_sZyZ 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ww43_sZyX ww44_sZyq)
                        (timesFloat# ww42_sZyY ww44_sZyq))
                     ww41_sZyZ)))
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ww40_sZz3 (timesFloat# ww39_sZz4 0.0#))
                     (timesFloat# ww38_sZz5 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ww40_sZz3 0.0#) ww39_sZz4)
                     (timesFloat# ww38_sZz5 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ww40_sZz3 ww44_sZyq)
                        (timesFloat# ww39_sZz4 ww44_sZyq))
                     ww38_sZz5)))
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ww37_sZz9 (timesFloat# ww36_sZza 0.0#))
                     (timesFloat# ww35_sZzb 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ww37_sZz9 0.0#) ww36_sZza)
                     (timesFloat# ww35_sZzb 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ww37_sZz9 ww44_sZyq)
                        (timesFloat# ww36_sZza ww44_sZyq))
                     ww35_sZzb)))
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          };
        Just focus_aVVJ ->
          case translateToPDCenter1_aVVC of { V3 a1_ajzt b1_ajzu c_ajzv ->
          case a1_ajzt of { V3 a2_s10g6 b2_s10g7 c1_s10g8 ->
          case a2_s10g6 of { F# x_s10gb ->
          case b2_s10g7 of { F# x1_s10ge ->
          case c1_s10g8 of { F# x2_s10gh ->
          case b1_ajzu of { V3 a3_s10gk b3_s10gl c2_s10gm ->
          case a3_s10gk of { F# x3_s10gp ->
          case b3_s10gl of { F# x4_s10gs ->
          case c2_s10gm of { F# x5_s10gv ->
          case c_ajzv of { V3 a4_s10gy b4_s10gz c3_s10gA ->
          case a4_s10gy of { F# x6_s10gD ->
          case b4_s10gz of { F# x7_s10gG ->
          case c3_s10gA of { F# x8_s10gJ ->
          case zoomFactor_aVVA of { F# ipv_sXpR ->
          case rotationFactor_aVVB of { F# y_aIAC ->
          case focus_aVVJ of { V2 a5_aIzh b_aIzi ->
          case a5_aIzh of { F# x9_s10gM ->
          case b_aIzi of { F# x10_s10gP ->
          let { ww_sZAs = negateFloat# x10_s10gP } in
          let { ww1_sZAq = negateFloat# x9_s10gM } in
          let {
            ww2_sZAj
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x6_s10gD 0.0#) (timesFloat# x7_s10gG 0.0#))
                  x8_s10gJ } in
          let {
            ww3_sZAi
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x6_s10gD 0.0#) (timesFloat# x7_s10gG ipv_sXpR))
                  (timesFloat# x8_s10gJ 0.0#) } in
          let {
            ww4_sZAh
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x6_s10gD ipv_sXpR) (timesFloat# x7_s10gG 0.0#))
                  (timesFloat# x8_s10gJ 0.0#) } in
          let {
            ipv1_sZAm
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww4_sZAh 0.0#) (timesFloat# ww3_sZAi 0.0#))
                  ww2_sZAj } in
          let { ww5_skyh = minusFloat# -1.5707964# y_aIAC } in
          let { ww6_sZzu = cosFloat# ww5_skyh } in
          let { ww7_sZzw = negateFloat# (sinFloat# ww5_skyh) } in
          let {
            ipv2_sZAl
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww4_sZAh ww7_sZzw) (timesFloat# ww3_sZAi ww6_sZzu))
                  (timesFloat# ww2_sZAj 0.0#) } in
          let { ww8_sZzy = sinFloat# ww5_skyh } in
          let {
            ipv3_sZAk
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww4_sZAh ww6_sZzu) (timesFloat# ww3_sZAi ww8_sZzy))
                  (timesFloat# ww2_sZAj 0.0#) } in
          let {
            ww9_sZAd
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x3_s10gp 0.0#) (timesFloat# x4_s10gs 0.0#))
                  x5_s10gv } in
          let {
            ww10_sZAc
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x3_s10gp 0.0#) (timesFloat# x4_s10gs ipv_sXpR))
                  (timesFloat# x5_s10gv 0.0#) } in
          let {
            ww11_sZAb
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x3_s10gp ipv_sXpR) (timesFloat# x4_s10gs 0.0#))
                  (timesFloat# x5_s10gv 0.0#) } in
          let {
            ipv4_sZAg
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww11_sZAb 0.0#) (timesFloat# ww10_sZAc 0.0#))
                  ww9_sZAd } in
          let {
            ipv5_sZAf
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww11_sZAb ww7_sZzw) (timesFloat# ww10_sZAc ww6_sZzu))
                  (timesFloat# ww9_sZAd 0.0#) } in
          let {
            ipv6_sZAe
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww11_sZAb ww6_sZzu) (timesFloat# ww10_sZAc ww8_sZzy))
                  (timesFloat# ww9_sZAd 0.0#) } in
          let {
            ww12_sZA7
              = plusFloat#
                  (plusFloat# (timesFloat# x_s10gb 0.0#) (timesFloat# x1_s10ge 0.0#))
                  x2_s10gh } in
          let {
            ww13_sZA6
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x_s10gb 0.0#) (timesFloat# x1_s10ge ipv_sXpR))
                  (timesFloat# x2_s10gh 0.0#) } in
          let {
            ww14_sZA5
              = plusFloat#
                  (plusFloat#
                     (timesFloat# x_s10gb ipv_sXpR) (timesFloat# x1_s10ge 0.0#))
                  (timesFloat# x2_s10gh 0.0#) } in
          let {
            ipv7_sZAa
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww14_sZA5 0.0#) (timesFloat# ww13_sZA6 0.0#))
                  ww12_sZA7 } in
          let {
            ipv8_sZA9
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww14_sZA5 ww7_sZzw) (timesFloat# ww13_sZA6 ww6_sZzu))
                  (timesFloat# ww12_sZA7 0.0#) } in
          let {
            ipv9_sZA8
              = plusFloat#
                  (plusFloat#
                     (timesFloat# ww14_sZA5 ww6_sZzu) (timesFloat# ww13_sZA6 ww8_sZzy))
                  (timesFloat# ww12_sZA7 0.0#) } in
          V3
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ipv9_sZA8 (timesFloat# ipv8_sZA9 0.0#))
                     (timesFloat# ipv7_sZAa 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ipv9_sZA8 0.0#) ipv8_sZA9)
                     (timesFloat# ipv7_sZAa 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ipv9_sZA8 ww1_sZAq) (timesFloat# ipv8_sZA9 ww_sZAs))
                     ipv7_sZAa)))
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ipv6_sZAe (timesFloat# ipv5_sZAf 0.0#))
                     (timesFloat# ipv4_sZAg 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ipv6_sZAe 0.0#) ipv5_sZAf)
                     (timesFloat# ipv4_sZAg 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ipv6_sZAe ww1_sZAq) (timesFloat# ipv5_sZAf ww_sZAs))
                     ipv4_sZAg)))
            (V3
               (F#
                  (plusFloat#
                     (plusFloat# ipv3_sZAk (timesFloat# ipv2_sZAl 0.0#))
                     (timesFloat# ipv1_sZAm 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat# (timesFloat# ipv3_sZAk 0.0#) ipv2_sZAl)
                     (timesFloat# ipv1_sZAm 0.0#)))
               (F#
                  (plusFloat#
                     (plusFloat#
                        (timesFloat# ipv3_sZAk ww1_sZAq) (timesFloat# ipv2_sZAl ww_sZAs))
                     ipv1_sZAm)))
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
          }
      }

-- RHS size: {terms: 46, types: 16, coercions: 5, joins: 0/0}
centerScreenOnWorldGrid
  = \ w_sZit w1_sZiu w2_sZiv ->
      case w_sZit `cast` <Co:1> of { I32# ww1_sZiy ->
      case w1_sZiu `cast` <Co:1> of { I32# ww3_sZiC ->
      case w2_sZiv `cast` <Co:1> of { I32# ww5_sZiG ->
      case divideFloat# (int2Float# ww5_sZiG) (int2Float# ww1_sZiy)
      of wild2_aICV
      { __DEFAULT ->
      gridT
        ((I32# ww1_sZiy) `cast` <Co:2>)
        (F# (timesFloat# wild2_aICV 0.95#))
        centerScreenOnWorldGrid2
        Nothing
        (V3
           (V3
              centerScreenOnWorldGrid_dt
              centerScreenOnWorldGrid2
              (F# (divideFloat# (int2Float# ww3_sZiC) 2.0#)))
           (V3
              centerScreenOnWorldGrid2
              centerScreenOnWorldGrid_dt
              (F# (divideFloat# (int2Float# ww5_sZiG) 2.0#)))
           centerScreenOnWorldGrid1)
      }
      }
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
drawGraphicDebug'8 = I32# 10#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
drawGraphicDebug'7 = F# 45.6#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
drawGraphicDebug'6 = F# 320.0#

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
drawGraphicDebug'5
  = V3
      centerScreenOnWorldGrid_dt
      centerScreenOnWorldGrid2
      drawGraphicDebug'6

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
drawGraphicDebug'4 = F# 240.0#

-- RHS size: {terms: 4, types: 1, coercions: 0, joins: 0/0}
drawGraphicDebug'3
  = V3
      centerScreenOnWorldGrid2
      centerScreenOnWorldGrid_dt
      drawGraphicDebug'4

-- RHS size: {terms: 4, types: 2, coercions: 0, joins: 0/0}
drawGraphicDebug'2
  = V3 drawGraphicDebug'5 drawGraphicDebug'3 centerScreenOnWorldGrid1

-- RHS size: {terms: 6, types: 2, coercions: 2, joins: 0/0}
drawGraphicDebug'1
  = gridT
      (drawGraphicDebug'8 `cast` <Co:2>)
      drawGraphicDebug'7
      centerScreenOnWorldGrid2
      Nothing
      drawGraphicDebug'2

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
dt_r10RN = I32# 50#

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
lvl3_r10RO = V2 (dt_r10RN `cast` <Co:2>) (dt_r10RN `cast` <Co:2>)

-- RHS size: {terms: 2, types: 3, coercions: 4, joins: 0/0}
lvl4_r10RP = Just (lvl3_r10RO `cast` <Co:4>)

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
yellow1 = W8# 255##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
lvl5_r10RQ = V4 yellow1 yellow1 yellow1 yellow1

-- RHS size: {terms: 167, types: 49, coercions: 0, joins: 0/0}
pdToWorldT
  = \ w_sZiM ->
      case w_sZiM of { V3 ww1_sZiP ww2_sZj8 ww3_sZjr ->
      case ww1_sZiP of { V3 ww5_s10h5 ww6_s10h6 ww7_s10h7 ->
      case ww5_s10h5 of { F# ww9_s10ha ->
      case ww6_s10h6 of { F# ww11_s10hd ->
      case ww7_s10h7 of { F# ww13_s10hg ->
      case ww2_sZj8 of { V3 ww15_s10hj ww16_s10hk ww17_s10hl ->
      case ww15_s10hj of { F# ww19_s10ho ->
      case ww16_s10hk of { F# ww21_s10hr ->
      case ww17_s10hl of { F# ww23_s10hu ->
      case ww3_sZjr of { V3 ww25_s10hx ww26_s10hy ww27_s10hz ->
      case ww25_s10hx of { F# ww29_s10hC ->
      case ww26_s10hy of { F# ww31_s10hF ->
      case ww27_s10hz of { F# ww33_s10hI ->
      case divideFloat#
             1.0#
             (plusFloat#
                (minusFloat#
                   (timesFloat#
                      ww9_s10ha
                      (minusFloat#
                         (timesFloat# ww21_s10hr ww33_s10hI)
                         (timesFloat# ww23_s10hu ww31_s10hF)))
                   (timesFloat#
                      ww19_s10ho
                      (minusFloat#
                         (timesFloat# ww11_s10hd ww33_s10hI)
                         (timesFloat# ww13_s10hg ww31_s10hF))))
                (timesFloat#
                   ww29_s10hC
                   (minusFloat#
                      (timesFloat# ww11_s10hd ww23_s10hu)
                      (timesFloat# ww13_s10hg ww21_s10hr))))
      of wild2_aICV
      { __DEFAULT ->
      V3
        (V3
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww21_s10hr ww33_s10hI)
                    (timesFloat# ww23_s10hu ww31_s10hF))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww13_s10hg ww31_s10hF)
                    (timesFloat# ww11_s10hd ww33_s10hI))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww11_s10hd ww23_s10hu)
                    (timesFloat# ww13_s10hg ww21_s10hr)))))
        (V3
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww23_s10hu ww29_s10hC)
                    (timesFloat# ww19_s10ho ww33_s10hI))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww9_s10ha ww33_s10hI)
                    (timesFloat# ww13_s10hg ww29_s10hC))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww13_s10hg ww19_s10ho)
                    (timesFloat# ww9_s10ha ww23_s10hu)))))
        (V3
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww19_s10ho ww31_s10hF)
                    (timesFloat# ww21_s10hr ww29_s10hC))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww11_s10hd ww29_s10hC)
                    (timesFloat# ww9_s10ha ww31_s10hF))))
           (F#
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww9_s10ha ww21_s10hr)
                    (timesFloat# ww11_s10hd ww19_s10ho)))))
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 152, types: 56, coercions: 3, joins: 0/0}
pdToWorldPos
  = \ t_aVW3 ds_dWwX ->
      case t_aVW3 of { V3 ww1_sZiP ww2_sZj8 ww3_sZjr ->
      case ww1_sZiP of { V3 ww5_s10hL ww6_s10hM ww7_s10hN ->
      case ww5_s10hL of { F# ww9_s10hQ ->
      case ww6_s10hM of { F# ww11_s10hT ->
      case ww7_s10hN of { F# ww13_s10hW ->
      case ww2_sZj8 of { V3 ww15_s10hZ ww16_s10i0 ww17_s10i1 ->
      case ww15_s10hZ of { F# ww19_s10i4 ->
      case ww16_s10i0 of { F# ww21_s10i7 ->
      case ww17_s10i1 of { F# ww23_s10ia ->
      case ww3_sZjr of { V3 ww25_s10id ww26_s10ie ww27_s10if ->
      case ww25_s10id of { F# ww29_s10ii ->
      case ww26_s10ie of { F# ww31_s10il ->
      case ww27_s10if of { F# ww33_s10io ->
      case divideFloat#
             1.0#
             (plusFloat#
                (minusFloat#
                   (timesFloat#
                      ww9_s10hQ
                      (minusFloat#
                         (timesFloat# ww21_s10i7 ww33_s10io)
                         (timesFloat# ww23_s10ia ww31_s10il)))
                   (timesFloat#
                      ww19_s10i4
                      (minusFloat#
                         (timesFloat# ww11_s10hT ww33_s10io)
                         (timesFloat# ww13_s10hW ww31_s10il))))
                (timesFloat#
                   ww29_s10ii
                   (minusFloat#
                      (timesFloat# ww11_s10hT ww23_s10ia)
                      (timesFloat# ww13_s10hW ww21_s10i7))))
      of wild2_aICV
      { __DEFAULT ->
      case ds_dWwX `cast` <Co:3> of { V2 x_aaBC y_aaBD ->
      case x_aaBC of { F# y1_s10ir ->
      case y_aaBD of { F# y2_s10iu ->
      V2
        (F#
           (plusFloat#
              (plusFloat#
                 (timesFloat#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww21_s10i7 ww33_s10io)
                          (timesFloat# ww23_s10ia ww31_s10il)))
                    y1_s10ir)
                 (timesFloat#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww13_s10hW ww31_s10il)
                          (timesFloat# ww11_s10hT ww33_s10io)))
                    y2_s10iu))
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww11_s10hT ww23_s10ia)
                    (timesFloat# ww13_s10hW ww21_s10i7)))))
        (F#
           (plusFloat#
              (plusFloat#
                 (timesFloat#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww23_s10ia ww29_s10ii)
                          (timesFloat# ww19_s10i4 ww33_s10io)))
                    y1_s10ir)
                 (timesFloat#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww9_s10hQ ww33_s10io)
                          (timesFloat# ww13_s10hW ww29_s10ii)))
                    y2_s10iu))
              (timesFloat#
                 wild2_aICV
                 (minusFloat#
                    (timesFloat# ww13_s10hW ww19_s10i4)
                    (timesFloat# ww9_s10hQ ww23_s10ia)))))
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
pdToGridPos1 = 1

-- RHS size: {terms: 263, types: 104, coercions: 3, joins: 2/2}
pdToGridPos_$spdToGridPos
  = \ eta_B2 eta1_B1 ->
      case eta_B2 of { V3 ww1_sZiP ww2_sZj8 ww3_sZjr ->
      case ww1_sZiP of { V3 ww5_s10ix ww6_s10iy ww7_s10iz ->
      case ww5_s10ix of { F# ww9_s10iC ->
      case ww6_s10iy of { F# ww11_s10iF ->
      case ww7_s10iz of { F# ww13_s10iI ->
      case ww2_sZj8 of { V3 ww15_s10iL ww16_s10iM ww17_s10iN ->
      case ww15_s10iL of { F# ww19_s10iQ ->
      case ww16_s10iM of { F# ww21_s10iT ->
      case ww17_s10iN of { F# ww23_s10iW ->
      case ww3_sZjr of { V3 ww25_s10iZ ww26_s10j0 ww27_s10j1 ->
      case ww25_s10iZ of { F# ww29_s10j4 ->
      case ww26_s10j0 of { F# ww31_s10j7 ->
      case ww27_s10j1 of { F# ww33_s10ja ->
      case divideFloat#
             1.0#
             (plusFloat#
                (minusFloat#
                   (timesFloat#
                      ww9_s10iC
                      (minusFloat#
                         (timesFloat# ww21_s10iT ww33_s10ja)
                         (timesFloat# ww23_s10iW ww31_s10j7)))
                   (timesFloat#
                      ww19_s10iQ
                      (minusFloat#
                         (timesFloat# ww11_s10iF ww33_s10ja)
                         (timesFloat# ww13_s10iI ww31_s10j7))))
                (timesFloat#
                   ww29_s10j4
                   (minusFloat#
                      (timesFloat# ww11_s10iF ww23_s10iW)
                      (timesFloat# ww13_s10iI ww21_s10iT))))
      of wild2_aICV
      { __DEFAULT ->
      case eta1_B1 `cast` <Co:3> of { V2 x_aaBC y_aaBD ->
      case x_aaBC of { F# y1_s10jd ->
      case y_aaBD of { F# y2_s10jg ->
      case $w$cproperFraction1
             $fIntegralInteger
             (plusFloat#
                (plusFloat#
                   (timesFloat#
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww21_s10iT ww33_s10ja)
                            (timesFloat# ww23_s10iW ww31_s10j7)))
                      y1_s10jd)
                   (timesFloat#
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww13_s10iI ww31_s10j7)
                            (timesFloat# ww11_s10iF ww33_s10ja)))
                      y2_s10jg))
                (timesFloat#
                   wild2_aICV
                   (minusFloat#
                      (timesFloat# ww11_s10iF ww23_s10iW)
                      (timesFloat# ww13_s10iI ww21_s10iT))))
      of
      { (# ww35_ajIj, ww36_ajIk #) ->
      case ww36_ajIk of { F# x1_ajIo ->
      join {
        $j_sXUF dt1_XdV0
          = case $w$cproperFraction1
                   $fIntegralInteger
                   (plusFloat#
                      (plusFloat#
                         (timesFloat#
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww23_s10iW ww29_s10j4)
                                  (timesFloat# ww19_s10iQ ww33_s10ja)))
                            y1_s10jd)
                         (timesFloat#
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww9_s10iC ww33_s10ja)
                                  (timesFloat# ww13_s10iI ww29_s10j4)))
                            y2_s10jg))
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww13_s10iI ww19_s10iQ)
                            (timesFloat# ww9_s10iC ww23_s10iW))))
            of
            { (# ww38_XjMk, ww39_XjMm #) ->
            case ww39_XjMm of { F# x2_XjMu ->
            join {
              $j1_sXUB dt2_XdV5
                = case $w$cproperFraction1
                         $fIntegralInteger
                         (plusFloat#
                            (plusFloat#
                               (timesFloat#
                                  (timesFloat#
                                     wild2_aICV
                                     (minusFloat#
                                        (timesFloat# ww19_s10iQ ww31_s10j7)
                                        (timesFloat# ww21_s10iT ww29_s10j4)))
                                  y1_s10jd)
                               (timesFloat#
                                  (timesFloat#
                                     wild2_aICV
                                     (minusFloat#
                                        (timesFloat# ww11_s10iF ww29_s10j4)
                                        (timesFloat# ww9_s10iC ww31_s10j7)))
                                  y2_s10jg))
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww9_s10iC ww21_s10iT)
                                  (timesFloat# ww11_s10iF ww19_s10iQ))))
                  of
                  { (# ww41_XjMA, ww42_XjMC #) ->
                  case ww42_XjMC of { F# x3_XjMK ->
                  case ltFloat# x3_XjMK 0.0# of {
                    __DEFAULT ->
                      case ww41_XjMA of { __DEFAULT -> V2 dt1_XdV0 dt2_XdV5 };
                    1# ->
                      case minusInteger ww41_XjMA pdToGridPos1 of { __DEFAULT ->
                      V2 dt1_XdV0 dt2_XdV5
                      }
                  }
                  }
                  } } in
            case ltFloat# x2_XjMu 0.0# of {
              __DEFAULT ->
                case ww38_XjMk of dt2_XdV5 { __DEFAULT -> jump $j1_sXUB dt2_XdV5 };
              1# ->
                case minusInteger ww38_XjMk pdToGridPos1 of dt2_XdV5 { __DEFAULT ->
                jump $j1_sXUB dt2_XdV5
                }
            }
            }
            } } in
      case ltFloat# x1_ajIo 0.0# of {
        __DEFAULT ->
          case ww35_ajIj of dt1_XdV0 { __DEFAULT -> jump $j_sXUF dt1_XdV0 };
        1# ->
          case minusInteger ww35_ajIj pdToGridPos1 of dt1_XdV0 { __DEFAULT ->
          jump $j_sXUF dt1_XdV0
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 289, types: 192, coercions: 3, joins: 2/2}
pdToGridPos
  = \ @ a_aW6M $dIntegral_aWdA eta_B2 eta1_B1 ->
      case eta_B2 of { V3 ww1_sZiP ww2_sZj8 ww3_sZjr ->
      case ww1_sZiP of { V3 ww5_s10jm ww6_s10jn ww7_s10jo ->
      case ww5_s10jm of { F# ww9_s10jr ->
      case ww6_s10jn of { F# ww11_s10ju ->
      case ww7_s10jo of { F# ww13_s10jx ->
      case ww2_sZj8 of { V3 ww15_s10jA ww16_s10jB ww17_s10jC ->
      case ww15_s10jA of { F# ww19_s10jF ->
      case ww16_s10jB of { F# ww21_s10jI ->
      case ww17_s10jC of { F# ww23_s10jL ->
      case ww3_sZjr of { V3 ww25_s10jO ww26_s10jP ww27_s10jQ ->
      case ww25_s10jO of { F# ww29_s10jT ->
      case ww26_s10jP of { F# ww31_s10jW ->
      case ww27_s10jQ of { F# ww33_s10jZ ->
      case divideFloat#
             1.0#
             (plusFloat#
                (minusFloat#
                   (timesFloat#
                      ww9_s10jr
                      (minusFloat#
                         (timesFloat# ww21_s10jI ww33_s10jZ)
                         (timesFloat# ww23_s10jL ww31_s10jW)))
                   (timesFloat#
                      ww19_s10jF
                      (minusFloat#
                         (timesFloat# ww11_s10ju ww33_s10jZ)
                         (timesFloat# ww13_s10jx ww31_s10jW))))
                (timesFloat#
                   ww29_s10jT
                   (minusFloat#
                      (timesFloat# ww11_s10ju ww23_s10jL)
                      (timesFloat# ww13_s10jx ww21_s10jI))))
      of wild2_aICV
      { __DEFAULT ->
      case eta1_B1 `cast` <Co:3> of { V2 x_aaBC y_aaBD ->
      case x_aaBC of { F# y1_s10k2 ->
      case y_aaBD of { F# y2_s10k5 ->
      case $w$cproperFraction1
             $dIntegral_aWdA
             (plusFloat#
                (plusFloat#
                   (timesFloat#
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww21_s10jI ww33_s10jZ)
                            (timesFloat# ww23_s10jL ww31_s10jW)))
                      y1_s10k2)
                   (timesFloat#
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww13_s10jx ww31_s10jW)
                            (timesFloat# ww11_s10ju ww33_s10jZ)))
                      y2_s10k5))
                (timesFloat#
                   wild2_aICV
                   (minusFloat#
                      (timesFloat# ww11_s10ju ww23_s10jL)
                      (timesFloat# ww13_s10jx ww21_s10jI))))
      of
      { (# ww35_ajIj, ww36_ajIk #) ->
      case ww36_ajIk of { F# x1_ajIo ->
      join {
        $j_sXV8 dt1_XdV5
          = case $w$cproperFraction1
                   $dIntegral_aWdA
                   (plusFloat#
                      (plusFloat#
                         (timesFloat#
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww23_s10jL ww29_s10jT)
                                  (timesFloat# ww19_s10jF ww33_s10jZ)))
                            y1_s10k2)
                         (timesFloat#
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww9_s10jr ww33_s10jZ)
                                  (timesFloat# ww13_s10jx ww29_s10jT)))
                            y2_s10k5))
                      (timesFloat#
                         wild2_aICV
                         (minusFloat#
                            (timesFloat# ww13_s10jx ww19_s10jF)
                            (timesFloat# ww9_s10jr ww23_s10jL))))
            of
            { (# ww38_XjMs, ww39_XjMu #) ->
            case ww39_XjMu of { F# x2_XjMC ->
            join {
              $j1_sXV6 dt2_XdVa
                = case $w$cproperFraction1
                         $dIntegral_aWdA
                         (plusFloat#
                            (plusFloat#
                               (timesFloat#
                                  (timesFloat#
                                     wild2_aICV
                                     (minusFloat#
                                        (timesFloat# ww19_s10jF ww31_s10jW)
                                        (timesFloat# ww21_s10jI ww29_s10jT)))
                                  y1_s10k2)
                               (timesFloat#
                                  (timesFloat#
                                     wild2_aICV
                                     (minusFloat#
                                        (timesFloat# ww11_s10ju ww29_s10jT)
                                        (timesFloat# ww9_s10jr ww31_s10jW)))
                                  y2_s10k5))
                            (timesFloat#
                               wild2_aICV
                               (minusFloat#
                                  (timesFloat# ww9_s10jr ww21_s10jI)
                                  (timesFloat# ww11_s10ju ww19_s10jF))))
                  of
                  { (# ww41_XjMK, ww42_XjMM #) ->
                  case ww42_XjMM of { F# x3_XjMU ->
                  case ltFloat# x3_XjMU 0.0# of {
                    __DEFAULT ->
                      case ww41_XjMK of { __DEFAULT -> V2 dt1_XdV5 dt2_XdVa };
                    1# ->
                      case $p1Integral $dIntegral_aWdA of
                      { C:Real ww44_sZmp ww45_sZmA ww46_sZmB ->
                      case ww44_sZmp of
                      { C:Num ww48_sZms ww49_sZmt ww50_sZmu ww51_sZmv ww52_sZmw ww53_sZmx
                              ww54_sZmy ->
                      case ww49_sZmt ww41_XjMK (ww54_sZmy pdToGridPos1) of { __DEFAULT ->
                      V2 dt1_XdV5 dt2_XdVa
                      }
                      }
                      }
                  }
                  }
                  } } in
            case ltFloat# x2_XjMC 0.0# of {
              __DEFAULT ->
                case ww38_XjMs of dt2_XdVa { __DEFAULT -> jump $j1_sXV6 dt2_XdVa };
              1# ->
                case $p1Integral $dIntegral_aWdA of
                { C:Real ww41_sZmQ ww42_sZn1 ww43_sZn2 ->
                case ww41_sZmQ of
                { C:Num ww45_sZmT ww46_sZmU ww47_sZmV ww48_sZmW ww49_sZmX ww50_sZmY
                        ww51_sZmZ ->
                case ww46_sZmU ww38_XjMs (ww51_sZmZ pdToGridPos1) of dt2_XdVa
                { __DEFAULT ->
                jump $j1_sXV6 dt2_XdVa
                }
                }
                }
            }
            }
            } } in
      case ltFloat# x1_ajIo 0.0# of {
        __DEFAULT ->
          case ww35_ajIj of dt1_XdV5 { __DEFAULT -> jump $j_sXV8 dt1_XdV5 };
        1# ->
          case $p1Integral $dIntegral_aWdA of
          { C:Real ww38_sZnh ww39_sZns ww40_sZnt ->
          case ww38_sZnh of
          { C:Num ww42_sZnk ww43_sZnl ww44_sZnm ww45_sZnn ww46_sZno ww47_sZnp
                  ww48_sZnq ->
          case ww43_sZnl ww35_ajIj (ww48_sZnq pdToGridPos1) of dt1_XdV5
          { __DEFAULT ->
          jump $j_sXV8 dt1_XdV5
          }
          }
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

Rec {
-- RHS size: {terms: 255, types: 209, coercions: 15, joins: 4/10}
$wouter_r10RR
  = \ ww_sZpM ww1_sZpQ w_sZpH ww2_sZpU w1_sZpJ ->
      let { newlen_s10lq = +# 2# (*# 2# ww1_sZpQ) } in
      let {
        $wrealloc_sZpu
          = \ w2_sZpn ww3_sZps w3_sZpp ->
              case <# newlen_s10lq 0# of {
                __DEFAULT ->
                  case andI# newlen_s10lq 4611686018427387904# of {
                    __DEFAULT -> case array_size_error of wild_00 { };
                    0# ->
                      case newByteArray# (uncheckedIShiftL# newlen_s10lq 1#) w3_sZpp of
                      { (# ipv5_aVsP, ipv6_aVsQ #) ->
                      case <=# ww3_sZps 0# of {
                        __DEFAULT ->
                          case {__pkg_ccall text-1.2.5.0 forall s.
                          MutableByteArray# s
                          -> Word#
                          -> MutableByteArray# s
                          -> Word#
                          -> Word#
                          -> State# RealWorld
                          -> (# State# RealWorld #)}_aVsU
                                 ipv6_aVsQ 0## ww_sZpM 0## (int2Word# ww3_sZps) ipv5_aVsP
                          of
                          { (# ds3_aVsX #) ->
                          $wouter_r10RR
                            ipv6_aVsQ (-# newlen_s10lq 1#) w2_sZpn ww3_sZps ds3_aVsX
                          };
                        1# ->
                          $wouter_r10RR
                            ipv6_aVsQ (-# newlen_s10lq 1#) w2_sZpn ww3_sZps ipv5_aVsP
                      }
                      }
                  };
                1# -> case array_size_error of wild_00 { }
              } } in
      let {
        realloc_sYzJ
          = \ w2_sZpn w3_sZpo w4_sZpp ->
              case w3_sZpo of { I# ww4_sZps ->
              $wrealloc_sZpu w2_sZpn ww4_sZps w4_sZpp
              } } in
      let { realloc1_aVsz = realloc_sYzJ `cast` <Co:9> } in
      join {
        exit_X31 ww3_sZpC w2_sZpz
          = case unsafeFreezeByteArray# ww_sZpM w2_sZpz of
            { (# ipv5_aVtj, ipv6_aVtk #) ->
            case ww3_sZpC of wild3_aVtm {
              __DEFAULT -> (# ipv5_aVtj, Text ipv6_aVtk 0# wild3_aVtm #);
              0# ->
                case empty of { Array dt2_aVtq ->
                (# ipv5_aVtj, Text dt2_aVtq 0# 0# #)
                }
            }
            } } in
      join {
        exit1_X39 ww3_sZpC w2_sZpz wild_aVvs
          = ((realloc1_aVsz wild_aVvs (I# ww3_sZpC)) `cast` <Co:3>)
              w2_sZpz } in
      join {
        exit2_X3a ww3_sZpC w2_sZpz wild_aVvs
          = ((realloc1_aVsz wild_aVvs (I# ww3_sZpC)) `cast` <Co:3>)
              w2_sZpz } in
      joinrec {
        $wencode_sZpE w2_sZpx ww3_sZpC w3_sZpz
          = case w2_sZpx of wild_aVvs {
              [] -> jump exit_X31 ww3_sZpC w3_sZpz;
              : x_aVvv xs_aVvw ->
                case x_aVvv of { C# ipv_sYr7 ->
                case xs_aVvw of dt2_XVtj { __DEFAULT ->
                case andI# (ord# ipv_sYr7) 2095104# of {
                  __DEFAULT ->
                    case <# ww1_sZpQ (+# ww3_sZpC 1#) of {
                      __DEFAULT ->
                        let { x1_aVtD = ord# ipv_sYr7 } in
                        case <# x1_aVtD 65536# of {
                          __DEFAULT ->
                            let { x#1_aVtH = -# x1_aVtD 65536# } in
                            case writeWord16Array#
                                   ww_sZpM
                                   ww3_sZpC
                                   (narrow16Word#
                                      (int2Word# (+# (uncheckedIShiftRA# x#1_aVtH 10#) 55296#)))
                                   w3_sZpz
                            of s2#_aVtI
                            { __DEFAULT ->
                            case writeWord16Array#
                                   ww_sZpM
                                   (+# ww3_sZpC 1#)
                                   (narrow16Word# (int2Word# (+# (andI# x#1_aVtH 1023#) 56320#)))
                                   s2#_aVtI
                            of s2#1_aVtJ
                            { __DEFAULT ->
                            jump $wencode_sZpE dt2_XVtj (+# ww3_sZpC 2#) s2#1_aVtJ
                            }
                            };
                          1# ->
                            case writeWord16Array#
                                   ww_sZpM ww3_sZpC (narrow16Word# (int2Word# x1_aVtD)) w3_sZpz
                            of s2#_aVtK
                            { __DEFAULT ->
                            jump $wencode_sZpE dt2_XVtj (+# ww3_sZpC 1#) s2#_aVtK
                            }
                        };
                      1# -> jump exit1_X39 ww3_sZpC w3_sZpz wild_aVvs
                    };
                  55296# ->
                    case <# ww1_sZpQ (+# ww3_sZpC 1#) of {
                      __DEFAULT ->
                        case writeWord16Array# ww_sZpM ww3_sZpC 65533## w3_sZpz of s2#_aVtK
                        { __DEFAULT ->
                        jump $wencode_sZpE dt2_XVtj (+# ww3_sZpC 1#) s2#_aVtK
                        };
                      1# -> jump exit2_X3a ww3_sZpC w3_sZpz wild_aVvs
                    }
                }
                }
                }
            }; } in
      jump $wencode_sZpE w_sZpH ww2_sZpU w1_sZpJ
end Rec }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl6_r10RS = "  $$  "#

-- RHS size: {terms: 328, types: 246, coercions: 9, joins: 0/7}
$wdrawMouseLoc
  = \ @ m_sZpX ww_sZqb ww1_sZqm ww2_sZqo w_sZpZ w1_sZq0 w2_sZq1 ->
      let {
        lvl9_sX4P
          = case w2_sZq1 of { V3 ww4_sZiP ww5_sZj8 ww6_sZjr ->
            case ww4_sZiP of { V3 ww8_s10kb ww9_s10kc ww10_s10kd ->
            case ww8_s10kb of { F# ww12_s10kg ->
            case ww9_s10kc of { F# ww14_s10kj ->
            case ww10_s10kd of { F# ww16_s10km ->
            case ww5_sZj8 of { V3 ww18_s10kp ww19_s10kq ww20_s10kr ->
            case ww18_s10kp of { F# ww22_s10ku ->
            case ww19_s10kq of { F# ww24_s10kx ->
            case ww20_s10kr of { F# ww26_s10kA ->
            case ww6_sZjr of { V3 ww28_s10kD ww29_s10kE ww30_s10kF ->
            case ww28_s10kD of { F# ww32_s10kI ->
            case ww29_s10kE of { F# ww34_s10kL ->
            case ww30_s10kF of { F# ww36_s10kO ->
            case divideFloat#
                   1.0#
                   (plusFloat#
                      (minusFloat#
                         (timesFloat#
                            ww12_s10kg
                            (minusFloat#
                               (timesFloat# ww24_s10kx ww36_s10kO)
                               (timesFloat# ww26_s10kA ww34_s10kL)))
                         (timesFloat#
                            ww22_s10ku
                            (minusFloat#
                               (timesFloat# ww14_s10kj ww36_s10kO)
                               (timesFloat# ww16_s10km ww34_s10kL))))
                      (timesFloat#
                         ww32_s10kI
                         (minusFloat#
                            (timesFloat# ww14_s10kj ww26_s10kA)
                            (timesFloat# ww16_s10km ww24_s10kx))))
            of wild2_aICV
            { __DEFAULT ->
            V3
              (V3
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww24_s10kx ww36_s10kO)
                          (timesFloat# ww26_s10kA ww34_s10kL))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww16_s10km ww34_s10kL)
                          (timesFloat# ww14_s10kj ww36_s10kO))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww14_s10kj ww26_s10kA)
                          (timesFloat# ww16_s10km ww24_s10kx)))))
              (V3
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww26_s10kA ww32_s10kI)
                          (timesFloat# ww22_s10ku ww36_s10kO))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww12_s10kg ww36_s10kO)
                          (timesFloat# ww16_s10km ww32_s10kI))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww16_s10km ww22_s10ku)
                          (timesFloat# ww12_s10kg ww26_s10kA)))))
              (V3
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww22_s10ku ww34_s10kL)
                          (timesFloat# ww24_s10kx ww32_s10kI))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww14_s10kj ww32_s10kI)
                          (timesFloat# ww12_s10kg ww34_s10kL))))
                 (F#
                    (timesFloat#
                       wild2_aICV
                       (minusFloat#
                          (timesFloat# ww12_s10kg ww24_s10kx)
                          (timesFloat# ww14_s10kj ww22_s10ku)))))
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            } } in
      let { lvl10_sX4I = reader ww2_sZqo cSurface } in
      let { lvl11_sX4J = reader ww2_sZqo cFont } in
      ww_sZqb
        (getMouseAbsoluteLoc w_sZpZ)
        (\ mloc_aVUV ->
           let {
             lvl12_sX55
               = case lvl9_sX4P of { V3 a1_ajzt b1_ajzu c_ajzv ->
                 case a1_ajzt of { V3 a2_s10kR b2_s10kS c1_s10kT ->
                 case a2_s10kR of { F# x_s10l2 ->
                 case b2_s10kS of { F# x1_s10l5 ->
                 case c1_s10kT of { F# x2_s10l8 ->
                 case b1_ajzu of { V3 a3_s10lb b3_s10lc c2_s10ld ->
                 case a3_s10lb of { F# x3_s10lg ->
                 case b3_s10lc of { F# x4_s10lj ->
                 case c2_s10ld of { F# x5_s10lm ->
                 case mloc_aVUV `cast` <Co:3> of { V2 a4_aIzD b4_aIzE ->
                 case a4_aIzD `cast` <Co:1> of { I32# x#_s10kW ->
                 case b4_aIzE `cast` <Co:1> of { I32# x#1_s10kZ ->
                 case runRW#
                        (\ s1_aVrR ->
                           case newByteArray# 10# s1_aVrR of { (# ipv_aVsp, ipv1_aVsq #) ->
                           $wouter_r10RR
                             ipv1_aVsq
                             4#
                             (++
                                (unpackAppendCString#
                                   $fShowV1
                                   (let { d_sXxE = int2Float# x#_s10kW } in
                                    let { e_sXxF = int2Float# x#1_s10kZ } in
                                    $w$sshowSignedFloat1
                                      $fShowFloat2
                                      $fReadV3
                                      (plusFloat#
                                         (plusFloat#
                                            (timesFloat# x_s10l2 d_sXxE)
                                            (timesFloat# x1_s10l5 e_sXxF))
                                         x2_s10l8)
                                      (: showSpace1
                                         ($w$sshowSignedFloat1
                                            $fShowFloat2
                                            $fReadV3
                                            (plusFloat#
                                               (plusFloat#
                                                  (timesFloat# x3_s10lg d_sXxE)
                                                  (timesFloat# x4_s10lj e_sXxF))
                                               x5_s10lm)
                                            []))))
                                (unpackAppendCString#
                                   lvl6_r10RS
                                   (case pdToGridPos_$spdToGridPos
                                           w2_sZq1
                                           ((V2
                                               (F# (int2Float# x#_s10kW))
                                               (F# (int2Float# x#1_s10kZ)))
                                            `cast` <Co:4>)
                                    of
                                    { V2 ww4_ammo ww5_ammp ->
                                    unpackAppendCString#
                                      $fShowV1
                                      (case $w$cshowsPrec4
                                              11#
                                              ww4_ammo
                                              (: showSpace1
                                                 (case $w$cshowsPrec4 11# ww5_ammp [] of
                                                  { (# ww7_aXjk, ww8_aXjl #) ->
                                                  : ww7_aXjk ww8_aXjl
                                                  }))
                                       of
                                       { (# ww7_aXjk, ww8_aXjl #) ->
                                       : ww7_aXjk ww8_aXjl
                                       })
                                    })))
                             0#
                             ipv_aVsp
                           })
                 of
                 { (# ipv_aVu0, ipv1_aVu1 #) ->
                 ipv1_aVu1
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 }
                 } } in
           ww_sZqb
             lvl10_sX4I
             (\ targetSurface_aVUW ->
                let {
                  lvl13_sX5a
                    = \ textSurface_aVV2 ->
                        ww1_sZqm
                          textSurface_aVV2 Nothing targetSurface_aVUW lvl4_r10RP } in
                ww_sZqb
                  lvl11_sX4J
                  (\ font_aVUX ->
                     ww_sZqb
                       (renderSolidText w1_sZq0 font_aVUX lvl5_r10RQ lvl12_sX55)
                       lvl13_sX5a)))

-- RHS size: {terms: 21, types: 101, coercions: 0, joins: 0/0}
drawMouseLoc
  = \ @ m_sZpX w_sZpY w1_sZpZ w2_sZq0 w3_sZq1 ->
      case w_sZpY of { (ww1_sZq4, ww2_sZqo) ->
      case ww1_sZq4 of
      { C:SDLRenderer ww4_sZq7 ww5_sZqf ww6_sZqg ww7_sZqh ww8_sZqi
                      ww9_sZqj ww10_sZqk ww11_sZql ww12_sZqm ->
      case ww4_sZq7 of
      { C:Monad ww14_sZqa ww15_sZqb ww16_sZqc ww17_sZqd ->
      $wdrawMouseLoc ww15_sZqb ww12_sZqm ww2_sZqo w1_sZpZ w2_sZq0 w3_sZq1
      }
      }
      }

-- RHS size: {terms: 169, types: 116, coercions: 14, joins: 1/2}
pointToScreenSpace
  = \ t_aVW1 eta_B1 ->
      case t_aVW1 of { V3 a1_ajzt b1_ajzu c_ajzv ->
      case a1_ajzt of { V3 a2_s10lu b2_s10lv c1_s10lw ->
      case a2_s10lu of { F# x_s10lz ->
      case b2_s10lv of { F# x1_s10lF ->
      case c1_s10lw of { F# x2_s10lL ->
      case b1_ajzu of { V3 a3_s10lO b3_s10lP c2_s10lQ ->
      case a3_s10lO of { F# x3_s10lT ->
      case b3_s10lP of { F# x4_s10lW ->
      case c2_s10lQ of { F# x5_s10lZ ->
      case c_ajzv of { V3 a4_s10m2 b4_s10m3 c3_s10m4 ->
      case a4_s10m2 of { F# x6_s10m7 ->
      case b4_s10m3 of { F# x7_s10ma ->
      case c3_s10m4 of { F# x8_s10md ->
      case eta_B1 of { V2 x9_aaBC y_aaBD ->
      case x9_aaBC of { F# y1_s10lC ->
      case y_aaBD of { F# y2_s10lI ->
      case $w$cproperFraction1
             $fIntegralCInt
             (plusFloat#
                (plusFloat#
                   (timesFloat# x_s10lz y1_s10lC) (timesFloat# x1_s10lF y2_s10lI))
                x2_s10lL)
      of
      { (# ww3_ajIj, ww4_ajIk #) ->
      case ww4_ajIk of { F# x10_ajIo ->
      join {
        $j_sXW0 ipv_sXfb nt_sXf9
          = case $w$cproperFraction1
                   $fIntegralCInt
                   (plusFloat#
                      (plusFloat#
                         (timesFloat# x3_s10lT y1_s10lC) (timesFloat# x4_s10lW y2_s10lI))
                      x5_s10lZ)
            of
            { (# ww5_XjMq, ww6_XjMs #) ->
            case ww6_XjMs of { F# x11_XjMA ->
            case ltFloat# x11_XjMA 0.0# of {
              __DEFAULT ->
                case ww5_XjMq `cast` <Co:1> of nt1_sXfd { I32# ipv1_sXff ->
                case $w$cproperFraction1
                       $fIntegralCInt
                       (plusFloat#
                          (plusFloat#
                             (timesFloat# x6_s10m7 y1_s10lC) (timesFloat# x7_s10ma y2_s10lI))
                          x8_s10md)
                of
                { (# ww8_XjMH, ww9_XjMJ #) ->
                case ww9_XjMJ of { F# x12_XjMR ->
                case ww8_XjMH `cast` <Co:1> of { I32# ipv2_sXfj ->
                V2 (nt_sXf9 `cast` <Co:2>) (nt1_sXfd `cast` <Co:2>)
                }
                }
                }
                };
              1# ->
                case ww5_XjMq `cast` <Co:1> of { I32# x#_akbm ->
                case $w$cproperFraction1
                       $fIntegralCInt
                       (plusFloat#
                          (plusFloat#
                             (timesFloat# x6_s10m7 y1_s10lC) (timesFloat# x7_s10ma y2_s10lI))
                          x8_s10md)
                of
                { (# ww8_XjMH, ww9_XjMJ #) ->
                case ww9_XjMJ of { F# x12_XjMR ->
                case ww8_XjMH `cast` <Co:1> of { I32# ipv1_sXfj ->
                V2
                  (nt_sXf9 `cast` <Co:2>)
                  ((I32# (narrow32Int# (-# x#_akbm 1#))) `cast` <Co:2>)
                }
                }
                }
                }
            }
            }
            } } in
      case ltFloat# x10_ajIo 0.0# of {
        __DEFAULT ->
          case ww3_ajIj `cast` <Co:1> of nt_sXf9 { I32# ipv_sXfb ->
          jump $j_sXW0 ipv_sXfb nt_sXf9
          };
        1# ->
          case ww3_ajIj `cast` <Co:1> of { I32# x#_akbm ->
          let { ipv_sXfb = narrow32Int# (-# x#_akbm 1#) } in
          jump $j_sXW0 ipv_sXfb (I32# ipv_sXfb)
          }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }
      }

Rec {
-- RHS size: {terms: 169, types: 186, coercions: 4, joins: 0/1}
evalGraphic'
  = \ t_aVV7 ds_dWAS ->
      case ds_dWAS of {
        Prim co_aWjE l_aVV8 ->
          EvaldP @~ <Co:2> (applyAffineTransformFloor t_aVV7 l_aVV8);
        GroupPrim co_aWjI label_aVVa gs_aVVb ->
          EvaldGP @~ <Co:2> label_aVVa (map (evalGraphic' t_aVV7) gs_aVVb);
        AffineT t'_aVVd s_aVVe ->
          evalGraphic'
            (case t_aVV7 of { V3 a1_ajzt b1_ajzu c_ajzv ->
             case a1_ajzt of { V3 ww1_s10mW ww2_s10mX ww3_s10mY ->
             case ww1_s10mW of { F# ww5_s10n1 ->
             case ww2_s10mX of { F# ww7_s10n4 ->
             case ww3_s10mY of { F# ww9_s10n7 ->
             case b1_ajzu of { V3 ww11_s10na ww12_s10nb ww13_s10nc ->
             case ww11_s10na of { F# ww15_s10nf ->
             case ww12_s10nb of { F# ww17_s10ni ->
             case ww13_s10nc of { F# ww19_s10nl ->
             case c_ajzv of { V3 ww21_s10no ww22_s10np ww23_s10nq ->
             case ww21_s10no of { F# ww25_s10nt ->
             case ww22_s10np of { F# ww27_s10nw ->
             case ww23_s10nq of { F# ww29_s10nz ->
             let {
               $wf_sZs7
                 = \ ww30_sZrR ww31_sZrW ww32_sZs1 ->
                     case t'_aVVd of { V3 d_ajNQ e_ajNR f_ajNS ->
                     case d_ajNQ of { V3 a2_s10mg b2_s10mh c1_s10mi ->
                     case a2_s10mg of { F# y_s10ml ->
                     case b2_s10mh of { F# y1_s10mo ->
                     case c1_s10mi of { F# y2_s10mr ->
                     case e_ajNR of { V3 a3_s10mu b3_s10mv c2_s10mw ->
                     case a3_s10mu of { F# y3_s10mz ->
                     case b3_s10mv of { F# y4_s10mC ->
                     case c2_s10mw of { F# y5_s10mF ->
                     case f_ajNS of { V3 a4_s10mI b4_s10mJ c3_s10mK ->
                     case a4_s10mI of { F# y6_s10mN ->
                     case b4_s10mJ of { F# y7_s10mQ ->
                     case c3_s10mK of { F# y8_s10mT ->
                     (# F#
                          (plusFloat#
                             (plusFloat#
                                (timesFloat# ww30_sZrR y_s10ml) (timesFloat# ww31_sZrW y3_s10mz))
                             (timesFloat# ww32_sZs1 y6_s10mN)),
                        F#
                          (plusFloat#
                             (plusFloat#
                                (timesFloat# ww30_sZrR y1_s10mo) (timesFloat# ww31_sZrW y4_s10mC))
                             (timesFloat# ww32_sZs1 y7_s10mQ)),
                        F#
                          (plusFloat#
                             (plusFloat#
                                (timesFloat# ww30_sZrR y2_s10mr) (timesFloat# ww31_sZrW y5_s10mF))
                             (timesFloat# ww32_sZs1 y8_s10mT)) #)
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     }
                     } } in
             case $wf_sZs7 ww5_s10n1 ww7_s10n4 ww9_s10n7 of
             { (# ww31_sZwU, ww32_sZwV, ww33_sZwW #) ->
             case $wf_sZs7 ww15_s10nf ww17_s10ni ww19_s10nl of
             { (# ww35_XZAH, ww36_XZAJ, ww37_XZAL #) ->
             case $wf_sZs7 ww25_s10nt ww27_s10nw ww29_s10nz of
             { (# ww39_XZBd, ww40_XZBf, ww41_XZBh #) ->
             V3
               (V3 ww31_sZwU ww32_sZwV ww33_sZwW)
               (V3 ww35_XZAH ww36_XZAJ ww37_XZAL)
               (V3 ww39_XZBd ww40_XZBf ww41_XZBh)
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             }
             })
            s_aVVe
      }
end Rec }

-- RHS size: {terms: 11, types: 11, coercions: 0, joins: 0/0}
evalGraphic
  = \ ds_dWBl ->
      case ds_dWBl of wild_X1F {
        __DEFAULT -> evalGraphic' m22AffineIdD wild_X1F;
        AffineT t_aVV4 s_aVV5 -> evalGraphic' t_aVV4 s_aVV5
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
black1 = W8# 0##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
red
  = V4
      $fBoundedWord8_$cmaxBound black1 black1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
blue
  = V4
      black1 black1 $fBoundedWord8_$cmaxBound $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
black = V4 black1 black1 black1 black1

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
yellow = V4 yellow1 yellow1 black1 $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
backgroundColor1 = W8# 34##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
backgroundColor
  = V4
      backgroundColor1
      backgroundColor1
      backgroundColor1
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 12, types: 28, coercions: 0, joins: 0/0}
$wfillBackground'
  = \ @ m_sZst ww_sZsE ww1_sZsJ ww2_sZsR ->
      ww_sZsE
        (reader ww2_sZsR cSurface)
        (\ surface_aVUF -> ww1_sZsJ surface_aVUF backgroundColor)

-- RHS size: {terms: 15, types: 96, coercions: 0, joins: 0/0}
fillBackground'
  = \ @ m_sZst w_sZsu ->
      case w_sZsu of { (ww1_sZsx, ww2_sZsR) ->
      case ww1_sZsx of
      { C:SDLRenderer ww4_sZsA ww5_sZsI ww6_sZsJ ww7_sZsK ww8_sZsL
                      ww9_sZsM ww10_sZsN ww11_sZsO ww12_sZsP ->
      case ww4_sZsA of
      { C:Monad ww14_sZsD ww15_sZsE ww16_sZsF ww17_sZsG ->
      $wfillBackground' ww15_sZsE ww6_sZsJ ww2_sZsR
      }
      }
      }

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
doorTileColor2 = W8# 102##

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
doorTileColor1 = W8# 51##

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
filledTileColor
  = V4
      doorTileColor1
      doorTileColor1
      doorTileColor2
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
doorTileColor
  = V4
      doorTileColor2
      doorTileColor1
      doorTileColor2
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 9, types: 2, coercions: 0, joins: 0/0}
wallTypeToColor
  = \ ds_dWJ3 ->
      case ds_dWJ3 of {
        EW -> backgroundColor;
        FW -> filledTileColor;
        DW -> doorTileColor
      }

-- RHS size: {terms: 5, types: 1, coercions: 0, joins: 0/0}
white
  = V4
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound
      $fBoundedWord8_$cmaxBound

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'C:Renderer3 = "'C:Renderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'C:Renderer2 = TrNameS $tc'C:Renderer3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tcRenderer3 = "Renderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tcRenderer2 = TrNameS $tcRenderer3

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep_r10RT = KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_r10RU = : $krep_r10RT []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep2_r10RV = KindRepTyConApp $tcMonad $krep1_r10RU

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep3_r10RW = KindRepTyConApp $tcConstraint []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tcRenderer1 = KindRepFun krep$*Arr* $krep3_r10RW

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r10RX = KindRepTyConApp $tc() []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep5_r10RY = KindRepApp $krep_r10RT $krep4_r10RX

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r10RZ = KindRepTyConApp $tcVars []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r10S0 = KindRepFun $krep6_r10RZ $krep5_r10RY

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8_r10S1 = KindRepTyConApp $tcFloat []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep9_r10S2 = : $krep8_r10S1 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r10S3 = KindRepTyConApp $tcShape $krep9_r10S2

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep11_r10S4 = : $krep10_r10S3 []

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep12_r10S5 = KindRepTyConApp $tcGraphic $krep11_r10S4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep13_r10S6 = KindRepFun $krep12_r10S5 $krep5_r10RY

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Effect.Renderer"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcRenderer
  = TyCon
      5132063920324431367##
      8906645813527476853##
      $trModule
      $tcRenderer2
      0#
      $tcRenderer1

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep14_r10S7 = KindRepTyConApp $tcRenderer $krep1_r10RU

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep15_r10S8 = KindRepFun $krep13_r10S6 $krep14_r10S7

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep16_r10S9 = KindRepFun $krep7_r10S0 $krep15_r10S8

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep17_r10Sa = KindRepFun $krep5_r10RY $krep16_r10S9

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep18_r10Sb = KindRepFun $krep5_r10RY $krep17_r10Sa

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep19_r10Sc = KindRepFun $krep5_r10RY $krep18_r10Sb

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'C:Renderer1 = KindRepFun $krep2_r10RV $krep19_r10Sc

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'C:Renderer
  = TyCon
      6313225450511814981##
      17869842097422571589##
      $trModule
      $tc'C:Renderer2
      1#
      $tc'C:Renderer1

-- RHS size: {terms: 16, types: 24, coercions: 0, joins: 0/0}
blastFmap4Tupple
  = \ @ t_sZsU @ d_sZsV w_sZsW w1_sZsX ->
      case w1_sZsX of { (ww1_sZt0, ww2_sZt1, ww3_sZt2, ww4_sZt3) ->
      (w_sZsW ww1_sZt0, w_sZsW ww2_sZt1, w_sZsW ww3_sZt2,
       w_sZsW ww4_sZt3)
      }

-- RHS size: {terms: 14, types: 20, coercions: 0, joins: 0/0}
blastFmap3Tupple
  = \ @ t_aWek @ c_aWel f_aVVS ds_dWxi ->
      case ds_dWxi of { (a_aVVT, b_aVVU, c1_aVVV) ->
      (f_aVVS a_aVVT, f_aVVS b_aVVU, f_aVVS c1_aVVV)
      }

-- RHS size: {terms: 12, types: 16, coercions: 0, joins: 0/0}
blastFmapPair
  = \ @ t_aWen @ b_aWeo f_aVVP ds_dWxo ->
      case ds_dWxo of { (a_aVVQ, b1_aVVR) ->
      (f_aVVP a_aVVQ, f_aVVP b1_aVVR)
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl7_r10Sd
  = "src\\Obelisk\\Effect\\Renderer.hs:(165,1)-(169,117)|function drawGraphic"#

-- RHS size: {terms: 3, types: 7, coercions: 0, joins: 0/0}
lvl8_r10Se = \ @ m_aWiq -> patError lvl7_r10Sd

Rec {
-- RHS size: {terms: 93, types: 235, coercions: 0, joins: 0/4}
drawGraphic
  = \ @ m_aWiq $d(%,%)_aWis eta_B1 ->
      case eta_B1 of {
        AffineT ipv_sWJD ipv1_sWJE -> lvl8_r10Se;
        EvaldP co_aWiI ds_dWAN ->
          case $p1(%,%) $d(%,%)_aWis of
          { C:SDLRenderer ww1_sZtb ww2_sZtj ww3_sZtk ww4_sZtl ww5_sZtm
                          ww6_sZtn ww7_sZto ww8_sZtp ww9_sZtq ->
          case ww1_sZtb of
          { C:Monad ww11_sZte ww12_sZtf ww13_sZtg ww14_sZth ->
          case ds_dWAN of {
            Line start_aVVg end_aVVh color_aVVi ->
              ww12_sZtf
                (reader ($p2(%,%) $d(%,%)_aWis) cRenderer)
                (\ sr_aVVj -> ww5_sZtm sr_aVVj start_aVVg end_aVVh color_aVVi);
            Circle center_aVVk radius_aVVl color_aVVm ->
              ww12_sZtf
                (reader ($p2(%,%) $d(%,%)_aWis) cRenderer)
                (\ sr_aVVn -> ww7_sZto sr_aVVn center_aVVk radius_aVVl color_aVVm);
            FillTriangle v0_aVVo v1_aVVp v2_aVVq color_aVVr ->
              ww12_sZtf
                (reader ($p2(%,%) $d(%,%)_aWis) cRenderer)
                (\ sr_aVVs -> ww6_sZtn sr_aVVs v0_aVVo v1_aVVp v2_aVVq color_aVVr);
            FillCircle center_aVVt radius_aVVu color_aVVv ->
              ww12_sZtf
                (reader ($p2(%,%) $d(%,%)_aWis) cRenderer)
                (\ sr_aVVw -> ww8_sZtp sr_aVVw center_aVVt radius_aVVu color_aVVv)
          }
          }
          };
        EvaldGP co_aWit ds_dWAM evald_xs_aVVf ->
          let { $dSDLRenderer_sWVp = $p1(%,%) $d(%,%)_aWis } in
          let { w_aXcy = $p1SDLRenderer $dSDLRenderer_sWVp } in
          let { z_a9mH = return w_aXcy () } in
          letrec {
            go_a9mI
              = \ ds1_a9mJ ->
                  case ds1_a9mJ of {
                    [] -> z_a9mH;
                    : y_a9mO ys_a9mP ->
                      >> w_aXcy (drawGraphic $d(%,%)_aWis y_a9mO) (go_a9mI ys_a9mP)
                  }; } in
          go_a9mI evald_xs_aVVf
      }
end Rec }

-- RHS size: {terms: 11, types: 16, coercions: 0, joins: 0/0}
drawGraphicDebug'
  = \ @ m_aWnN _ $d(%,%)_aWnQ _ _ g_aVUG ->
      drawGraphic $d(%,%)_aWnQ (evalGraphic' drawGraphicDebug'1 g_aVUG)

-- RHS size: {terms: 11, types: 27, coercions: 0, joins: 0/0}
$wdrawScreen'
  = \ @ m_sZtP ww_sZu0 ww1_sZu4 ww2_sZud ->
      ww_sZu0
        (reader ww2_sZud cWindow) (\ window_aVUE -> ww1_sZu4 window_aVUE)

-- RHS size: {terms: 15, types: 96, coercions: 0, joins: 0/0}
drawScreen'
  = \ @ m_sZtP w_sZtQ ->
      case w_sZtQ of { (ww1_sZtT, ww2_sZud) ->
      case ww1_sZtT of
      { C:SDLRenderer ww4_sZtW ww5_sZu4 ww6_sZu5 ww7_sZu6 ww8_sZu7
                      ww9_sZu8 ww10_sZu9 ww11_sZua ww12_sZub ->
      case ww4_sZtW of
      { C:Monad ww14_sZtZ ww15_sZu0 ww16_sZu1 ww17_sZu2 ->
      $wdrawScreen' ww15_sZu0 ww5_sZu4 ww2_sZud
      }
      }
      }

-- RHS size: {terms: 11, types: 27, coercions: 0, joins: 0/0}
$wclearScreen'
  = \ @ m_sZuz ww_sZuK ww1_sZuQ ww2_sZuX ->
      ww_sZuK
        (reader ww2_sZuX cRenderer)
        (\ renderer_aVUD -> ww1_sZuQ renderer_aVUD)

-- RHS size: {terms: 15, types: 96, coercions: 0, joins: 0/0}
clearScreen'
  = \ @ m_sZuz w_sZuA ->
      case w_sZuA of { (ww1_sZuD, ww2_sZuX) ->
      case ww1_sZuD of
      { C:SDLRenderer ww4_sZuG ww5_sZuO ww6_sZuP ww7_sZuQ ww8_sZuR
                      ww9_sZuS ww10_sZuT ww11_sZuU ww12_sZuV ->
      case ww4_sZuG of
      { C:Monad ww14_sZuJ ww15_sZuK ww16_sZuL ww17_sZuM ->
      $wclearScreen' ww15_sZuK ww7_sZuQ ww2_sZuX
      }
      }
      }

Rec {
-- RHS size: {terms: 238, types: 289, coercions: 0, joins: 2/2}
$s$wsplitS
  = \ w1_aWX2 w2_aWX3 ->
      case w2_aWX3 of {
        Bin dt1_aWX6 y_aWX7 l_aWX8 r_aWX9 ->
          case y_aWX7 of wild1_s10p7 { V2 b1_s10p8 b2_s10p9 ->
          case b1_s10p8 of { I# y#_s10pf ->
          case b2_s10p9 of { I# y#1_s10pl ->
          case w1_aWX2 of wild2_aIEJ { V2 a1_aIEL a2_aIEM ->
          case a1_aIEL of { I# x#_s10pc ->
          case a2_aIEM of { I# x#1_s10pi ->
          join {
            $j_sX99
              = case $s$wsplitS wild2_aIEJ l_aWX8 of
                { (# ww1_aWXg, ww2_aWXh #) ->
                case ww2_aWXh of wild7_aWXj {
                  Bin ipv_aWXl ipv1_aWXm ipv2_aWXn ipv3_aWXo ->
                    case r_aWX9 of wild8_aWXq {
                      Bin ipv4_aWXs ipv5_aWXt ipv6_aWXu ipv7_aWXv ->
                        case <# (*# 3# ipv_aWXl) ipv4_aWXs of {
                          __DEFAULT ->
                            case <# (*# 3# ipv4_aWXs) ipv_aWXl of {
                              __DEFAULT ->
                                (# ww1_aWXg,
                                   Bin
                                     (+# (+# ipv_aWXl ipv4_aWXs) 1#)
                                     wild1_s10p7
                                     wild7_aWXj
                                     wild8_aWXq #);
                              1# ->
                                case balanceR
                                       ipv1_aWXm
                                       ipv2_aWXn
                                       (link_$slink2
                                          ipv4_aWXs
                                          ipv5_aWXt
                                          ipv6_aWXu
                                          ipv7_aWXv
                                          ipv3_aWXo
                                          wild1_s10p7)
                                of dt2_aWXz
                                { __DEFAULT ->
                                (# ww1_aWXg, dt2_aWXz #)
                                }
                            };
                          1# ->
                            case balanceL
                                   ipv5_aWXt
                                   (link_$slink1
                                      ipv6_aWXu ipv_aWXl ipv1_aWXm ipv2_aWXn ipv3_aWXo wild1_s10p7)
                                   ipv7_aWXv
                            of dt2_aWXA
                            { __DEFAULT ->
                            (# ww1_aWXg, dt2_aWXA #)
                            }
                        };
                      Tip ->
                        case link_$sinsertMax
                               ipv_aWXl ipv1_aWXm ipv2_aWXn ipv3_aWXo wild1_s10p7
                        of dt2_aWXD
                        { __DEFAULT ->
                        (# ww1_aWXg, dt2_aWXD #)
                        }
                    };
                  Tip ->
                    case insertMin wild1_s10p7 r_aWX9 of dt2_aWXG { __DEFAULT ->
                    (# ww1_aWXg, dt2_aWXG #)
                    }
                }
                } } in
          case <# x#_s10pc y#_s10pf of {
            __DEFAULT ->
              join {
                $j1_sX9a
                  = case $s$wsplitS wild2_aIEJ r_aWX9 of
                    { (# ww1_aWXN, ww2_aWXO #) ->
                    case l_aWX8 of wild7_aWXQ {
                      Bin ipv_aWXS ipv1_aWXT ipv2_aWXU ipv3_aWXV ->
                        case ww1_aWXN of wild8_aWXX {
                          Bin ipv4_aWXZ ipv5_aWY0 ipv6_aWY1 ipv7_aWY2 ->
                            case <# (*# 3# ipv_aWXS) ipv4_aWXZ of {
                              __DEFAULT ->
                                case <# (*# 3# ipv4_aWXZ) ipv_aWXS of {
                                  __DEFAULT ->
                                    (# Bin
                                         (+# (+# ipv_aWXS ipv4_aWXZ) 1#)
                                         wild1_s10p7
                                         wild7_aWXQ
                                         wild8_aWXX,
                                       ww2_aWXO #);
                                  1# ->
                                    case balanceR
                                           ipv1_aWXT
                                           ipv2_aWXU
                                           (link_$slink2
                                              ipv4_aWXZ
                                              ipv5_aWY0
                                              ipv6_aWY1
                                              ipv7_aWY2
                                              ipv3_aWXV
                                              wild1_s10p7)
                                    of dt2_aWY6
                                    { __DEFAULT ->
                                    (# dt2_aWY6, ww2_aWXO #)
                                    }
                                };
                              1# ->
                                case balanceL
                                       ipv5_aWY0
                                       (link_$slink1
                                          ipv6_aWY1
                                          ipv_aWXS
                                          ipv1_aWXT
                                          ipv2_aWXU
                                          ipv3_aWXV
                                          wild1_s10p7)
                                       ipv7_aWY2
                                of dt2_aWY7
                                { __DEFAULT ->
                                (# dt2_aWY7, ww2_aWXO #)
                                }
                            };
                          Tip ->
                            case link_$sinsertMax
                                   ipv_aWXS ipv1_aWXT ipv2_aWXU ipv3_aWXV wild1_s10p7
                            of dt2_aWYa
                            { __DEFAULT ->
                            (# dt2_aWYa, ww2_aWXO #)
                            }
                        };
                      Tip ->
                        case insertMin wild1_s10p7 ww1_aWXN of dt2_aWYd { __DEFAULT ->
                        (# dt2_aWYd, ww2_aWXO #)
                        }
                    }
                    } } in
              case ==# x#_s10pc y#_s10pf of {
                __DEFAULT -> jump $j1_sX9a;
                1# ->
                  case <# x#1_s10pi y#1_s10pl of {
                    __DEFAULT ->
                      case ==# x#1_s10pi y#1_s10pl of {
                        __DEFAULT -> jump $j1_sX9a;
                        1# -> (# l_aWX8, r_aWX9 #)
                      };
                    1# -> jump $j_sX99
                  }
              };
            1# -> jump $j_sX99
          }
          }
          }
          }
          }
          }
          };
        Tip -> (# Tip, Tip #)
      }
end Rec }

Rec {
-- RHS size: {terms: 108, types: 78, coercions: 0, joins: 2/2}
$w$sgo4
  = \ w_sZvp ww_sZvx ww1_sZvC w1_sZvr ->
      case w1_sZvr of wild_aIOn {
        Bin dt1_aIOp y_aIOq l_aIOr r_aIOs ->
          case y_aIOq of wild1_s10pn { V2 b1_s10po b2_s10pp ->
          case b1_s10po of { I# y#_s10ps ->
          case b2_s10pp of { I# y#1_s10pv ->
          join {
            $j_sX8j
              = case $w$sgo4 w_sZvp ww_sZvx ww1_sZvC l_aIOr of l'_aIOx
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aIOx l_aIOr of {
                  __DEFAULT -> balanceL wild1_s10pn l'_aIOx r_aIOs;
                  1# -> wild_aIOn
                }
                } } in
          case <# ww_sZvx y#_s10ps of {
            __DEFAULT ->
              join {
                $j1_sX8l
                  = case $w$sgo4 w_sZvp ww_sZvx ww1_sZvC r_aIOs of r'_aIOF
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aIOF r_aIOs of {
                      __DEFAULT -> balanceR wild1_s10pn l_aIOr r'_aIOF;
                      1# -> wild_aIOn
                    }
                    } } in
              case ==# ww_sZvx y#_s10ps of {
                __DEFAULT -> jump $j1_sX8l;
                1# ->
                  case <# ww1_sZvC y#1_s10pv of {
                    __DEFAULT ->
                      case ==# ww1_sZvC y#1_s10pv of {
                        __DEFAULT -> jump $j1_sX8l;
                        1# ->
                          case lazy w_sZvp of wild2_aIOB { V2 ipv_sX89 ipv1_sX8a ->
                          case reallyUnsafePtrEquality# w_sZvp wild1_s10pn of {
                            __DEFAULT -> Bin dt1_aIOp wild2_aIOB l_aIOr r_aIOs;
                            1# -> wild_aIOn
                          }
                          }
                      };
                    1# -> jump $j_sX8j
                  }
              };
            1# -> jump $j_sX8j
          }
          }
          }
          };
        Tip ->
          case lazy w_sZvp of dt1_XIms { V2 ipv_sX8t ipv1_sX8u ->
          Bin 1# dt1_XIms Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 93, types: 67, coercions: 0, joins: 2/2}
$w$sgo1
  = \ w_sZvG ww_sZvO ww1_sZvT w1_sZvI ->
      case w1_sZvI of wild_aWWE {
        Bin dt1_aWWG y_aWWH l_aWWI r_aWWJ ->
          case y_aWWH of wild1_s10pD { V2 b1_s10pE b2_s10pF ->
          case b1_s10pE of { I# y#_s10pI ->
          case b2_s10pF of { I# y#1_s10pL ->
          join {
            $j_sX7G
              = case $w$sgo1 w_sZvG ww_sZvO ww1_sZvT l_aWWI of l'_aWWO
                { __DEFAULT ->
                case reallyUnsafePtrEquality# l'_aWWO l_aWWI of {
                  __DEFAULT -> balanceL wild1_s10pD l'_aWWO r_aWWJ;
                  1# -> wild_aWWE
                }
                } } in
          case <# ww_sZvO y#_s10pI of {
            __DEFAULT ->
              join {
                $j1_sX7H
                  = case $w$sgo1 w_sZvG ww_sZvO ww1_sZvT r_aWWJ of r'_aWWU
                    { __DEFAULT ->
                    case reallyUnsafePtrEquality# r'_aWWU r_aWWJ of {
                      __DEFAULT -> balanceR wild1_s10pD l_aWWI r'_aWWU;
                      1# -> wild_aWWE
                    }
                    } } in
              case ==# ww_sZvO y#_s10pI of {
                __DEFAULT -> jump $j1_sX7H;
                1# ->
                  case <# ww1_sZvT y#1_s10pL of {
                    __DEFAULT ->
                      case ==# ww1_sZvT y#1_s10pL of {
                        __DEFAULT -> jump $j1_sX7H;
                        1# -> wild_aWWE
                      };
                    1# -> jump $j_sX7G
                  }
              };
            1# -> jump $j_sX7G
          }
          }
          }
          };
        Tip ->
          case lazy w_sZvG of dt1_XIms { V2 ipv_sX7P ipv1_sX7Q ->
          Bin 1# dt1_XIms Tip Tip
          }
      }
end Rec }

Rec {
-- RHS size: {terms: 84, types: 81, coercions: 0, joins: 0/0}
$sunion
  = \ t1_aWU2 ds_aWU3 ->
      case ds_aWU3 of wild_aWU4 {
        Bin dt1_aWU6 x_aWU7 ds1_aWU8 ds2_aWU9 ->
          case x_aWU7 of ww_s10q3 { V2 ww1_s10q4 ww2_s10q5 ->
          case ww1_s10q4 of { I# ww4_s10q8 ->
          case ww2_s10q5 of { I# ww6_s10qb ->
          case dt1_aWU6 of {
            __DEFAULT ->
              case t1_aWU2 of wild1_aWUc {
                Bin dt2_aWUe x1_aWUf ds4_aWUg ds5_aWUh ->
                  case x1_aWUf of ww7_s10pT { V2 ww8_s10pU ww9_s10pV ->
                  case ww8_s10pU of { I# ww11_s10pY ->
                  case ww9_s10pV of { I# ww13_s10q1 ->
                  case dt2_aWUe of {
                    __DEFAULT ->
                      case $s$wsplitS ww7_s10pT wild_aWU4 of
                      { (# ww15_aWWq, ww16_aWWr #) ->
                      case $sunion ds5_aWUh ww16_aWWr of r1r2_aWV0 { __DEFAULT ->
                      case $sunion ds4_aWUg ww15_aWWq of l1l2_aWV1 { __DEFAULT ->
                      case reallyUnsafePtrEquality# l1l2_aWV1 ds4_aWUg of {
                        __DEFAULT -> link ww7_s10pT l1l2_aWV1 r1r2_aWV0;
                        1# ->
                          case reallyUnsafePtrEquality# r1r2_aWV0 ds5_aWUh of {
                            __DEFAULT -> link ww7_s10pT l1l2_aWV1 r1r2_aWV0;
                            1# -> wild1_aWUc
                          }
                      }
                      }
                      }
                      };
                    1# -> $w$sgo4 ww7_s10pT ww11_s10pY ww13_s10q1 wild_aWU4
                  }
                  }
                  }
                  };
                Tip -> wild_aWU4
              };
            1# -> $w$sgo1 ww_s10q3 ww4_s10q8 ww6_s10qb t1_aWU2
          }
          }
          }
          };
        Tip -> t1_aWU2
      }
end Rec }

-- RHS size: {terms: 218, types: 415, coercions: 16, joins: 1/25}
$wdrawDebug'
  = \ @ m_sZw8 ww_sZwk ww1_sZwl ww2_sZwm w_sZwa w1_sZwd ->
      let { $dMonadReader_sWTT = $p2(%,%) w_sZwa } in
      let { lvl9_sX5d = reader $dMonadReader_sWTT cScreenHeight } in
      let { lvl10_sX5k = ww2_sZwm () } in
      let {
        w2_sRx9
          = case w1_sZwd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
            ds1_dEke
            } } in
      let {
        lvl11_sXYS
          = case $wworldGridTilesGraphic
                   (case w1_sZwd of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
                    ds2_dEkk
                    })
                   (let {
                      g_sWTY
                        = case w1_sZwd of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
                          case ds2_dEkk of { WorldTiles ds7_dEkB ds8_dEkC ->
                          case ds8_dEkC `cast` <Co:1> of { I32# x#_ajEP -> I# x#_ajEP }
                          }
                          } } in
                    let {
                      g1_sWTX
                        = case w1_sZwd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
                          case ds1_dEke of { PVars ds7_dEkE ds8_dEkF ds9_dEkG -> ds7_dEkE }
                          } } in
                    joinrec {
                      go_a9mI ds_a9mJ eta_X41
                        = case ds_a9mJ of {
                            [] -> eta_X41;
                            : y_a9mO ys_a9mP ->
                              jump go_a9mI
                                ys_a9mP
                                ($sunion
                                   eta_X41
                                   (visitedPositions w1_sZwd (shootRay' g_sWTY g1_sWTX y_a9mO)))
                          }; } in
                    jump go_a9mI (rayHeads (lvl_r10RK `cast` <Co:2>) w2_sRx9) Tip)
            of
            { (# ww4_sRzI, ww5_sRzJ, ww6_sRzK #) ->
            GroupPrim @~ <Co:2> ww5_sRzJ ww6_sRzK
            } } in
      let {
        ws_sWTR
          = case w1_sZwd of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
            case ds2_dEkk of { WorldTiles ds7_dEkB ds8_dEkC -> ds8_dEkC }
            } } in
      let {
        lvl12_sXYT
          = case $wworldGridGraphic ws_sWTR of
            { (# ww4_sRza, ww5_sRzb, ww6_sRzc #) ->
            GroupPrim @~ <Co:2> ww5_sRzb ww6_sRzc
            } } in
      let {
        lvl13_sYew
          = case w1_sZwd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
            case ds1_dEke of { PVars ds7_dEkE ds8_dEkF ds9_dEkG ->
            case ds7_dEkE of { V2 a1_aIzh b_aIzi ->
            V3
              (V3 centerScreenOnWorldGrid_dt centerScreenOnWorldGrid2 a1_aIzh)
              (V3 centerScreenOnWorldGrid2 centerScreenOnWorldGrid_dt b_aIzi)
              centerScreenOnWorldGrid1
            }
            }
            } } in
      let { lvl14_sY6D = AffineT lvl13_sYew playerCircleGraphic1 } in
      let {
        lvl15_sY6E
          = case $wcameraPlaneGraphic w2_sRx9 of
            { (# ww4_sRzs, ww5_sRzt, ww6_sRzu #) ->
            GroupPrim @~ <Co:2> ww5_sRzt ww6_sRzu
            } } in
      let {
        lvl16_sY6F
          = case $wplayerArrowGraphic w2_sRx9 of
            { (# ww4_sRzi, ww5_sRzj #) ->
            AffineT ww4_sRzi ww5_sRzj
            } } in
      let { lvl17_sY6G = : lvl16_sY6F [] } in
      let { lvl18_sY6H = : lvl15_sY6E lvl17_sY6G } in
      let { lvl19_sY6I = : lvl14_sY6D lvl18_sY6H } in
      let {
        lvl20_sXYU = GroupPrim @~ <Co:2> playerGraphic1 lvl19_sY6I } in
      let {
        lvl21_sXYV
          = map
              midlineRaycastIntersectionsGraphic1
              (shootRay'
                 (case w1_sZwd of { Vars ds1_dEkj ds2_dEkk ds3_dEkl ds4_dEkm ->
                  case ds2_dEkk of { WorldTiles ds7_dEkB ds8_dEkC ->
                  case ds8_dEkC `cast` <Co:1> of { I32# x#_ajEP -> I# x#_ajEP }
                  }
                  })
                 (case w1_sZwd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
                  case ds1_dEke of { PVars ds7_dEkE ds8_dEkF ds9_dEkG -> ds7_dEkE }
                  })
                 (case w1_sZwd of { Vars ds1_dEke ds2_dEkf ds3_dEkg ds4_dEkh ->
                  case ds1_dEke of { PVars ds7_dEkI ds8_dEkJ ds9_dEkK -> ds8_dEkJ }
                  })) } in
      let {
        lvl22_sXYW
          = GroupPrim
              @~ <Co:2> midlineRaycastIntersectionsGraphic3 lvl21_sXYV } in
      let { lvl23_sXYX = : lvl22_sXYW [] } in
      let { lvl24_sXYY = : lvl20_sXYU lvl23_sXYX } in
      let { lvl25_sXYZ = : lvl12_sXYT lvl24_sXYY } in
      let { lvl26_sXrX = : lvl11_sXYS lvl25_sXYZ } in
      let { lvl27_sX5j = GroupPrim @~ <Co:2> lvl2_r10RM lvl26_sXrX } in
      ww_sZwk
        (reader $dMonadReader_sWTT cScreenWidth)
        (\ screenWidth_aVUK ->
           ww_sZwk
             lvl9_sX5d
             (\ screenHeight_aVUL ->
                ww1_sZwl
                  (drawGraphic
                     w_sZwa
                     (evalGraphic'
                        (centerScreenOnWorldGrid
                           ws_sWTR screenWidth_aVUK screenHeight_aVUL)
                        lvl27_sX5j))
                  lvl10_sX5k))

-- RHS size: {terms: 18, types: 58, coercions: 0, joins: 0/0}
drawDebug'
  = \ @ m_sZw8 w_sZw9 w1_sZwa _ _ w4_sZwd ->
      case w_sZw9 of { C:Debug ww1_sZwg ww2_sZwo ww3_sZwp ->
      case ww1_sZwg of { C:Monad ww5_sZwj ww6_sZwk ww7_sZwl ww8_sZwm ->
      $wdrawDebug' ww6_sZwk ww7_sZwl ww8_sZwm w1_sZwa w4_sZwd
      }
      }


------ Local rules for imported ids --------
"SPEC pdToGridPos @ Integer"
    forall $dIntegral_sWVi.
      pdToGridPos $dIntegral_sWVi
      = pdToGridPos_$spdToGridPos
"SPEC/Obelisk.Effect.Renderer $wsplitS @ (V2 Int)" [2]
    forall w_sWYh. $wsplitS w_sWYh = $s$wsplitS
"SPEC/Obelisk.Effect.Renderer union @ (V2 Int)"
    forall $dOrd_sWWh. union $dOrd_sWWh = $sunion


[16 of 17] Compiling Obelisk.Runner   ( src\Obelisk\Runner.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk\Runner.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 491, types: 702, coercions: 0, joins: 1/19}

Rec {
-- RHS size: {terms: 57, types: 75, coercions: 0, joins: 0/5}
$wgrenderLoop
  = \ @ m_s140S
      ww_s1415
      ww1_s1416
      ww2_s1417
      w_s140W
      w1_s140Y
      w2_s140Z ->
      ww2_s1417
        (updateInput w_s140W)
        (ww2_s1417
           (clearScreen w1_s140Y)
           (ww2_s1417
              (fillBackground w1_s140Y)
              (let { lvl6_s13MB = drawGraphicDebug w1_s140Y w2_s140Z } in
               let { lvl7_s13MC = drawScreen w1_s140Y } in
               let { lvl8_s13MD = fillBackground w1_s140Y } in
               let {
                 lvl9_s13ME
                   = $wgrenderLoop
                       ww_s1415 ww1_s1416 ww2_s1417 w_s140W w1_s140Y w2_s140Z } in
               let { lvl10_s13MF = pure ww_s1415 () } in
               ww1_s1416
                 (getInput w_s140W)
                 (\ input_a13fa ->
                    ww2_s1417
                      lvl6_s13MB
                      (ww2_s1417
                         lvl7_s13MC
                         (ww2_s1417
                            lvl8_s13MD
                            (case input_a13fa of { Input ds1_d9k5 ds2_d9k6 ds3_d9k7 ds4_d9k8 ->
                             case ds3_d9k7 of {
                               False -> lvl9_s13ME;
                               True -> lvl10_s13MF
                             }
                             })))))))
end Rec }

-- RHS size: {terms: 21, types: 73, coercions: 0, joins: 0/0}
grenderLoop
  = \ @ m_s140S w_s140T _ _ w3_s140W _ w5_s140Y w6_s140Z ->
      case w_s140T of
      { C:MonadReader ww1_s1412 ww2_s141a ww3_s141b ww4_s141d ->
      case ww1_s1412 of
      { C:Monad ww6_s1415 ww7_s1416 ww8_s1417 ww9_s1418 ->
      $wgrenderLoop
        ww6_s1415 ww7_s1416 ww8_s1417 w3_s140W w5_s140Y w6_s140Z
      }
      }

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl_r148p = F# (cosFloat# 5.0e-2#)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl1_r148q = F# (negateFloat# (sinFloat# 5.0e-2#))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl2_r148r = F# (sinFloat# 5.0e-2#)

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl3_r148s = F# (cosFloat# -5.0e-2#)

-- RHS size: {terms: 4, types: 0, coercions: 0, joins: 0/0}
lvl4_r148t = F# (negateFloat# (sinFloat# -5.0e-2#))

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
lvl5_r148u = F# (sinFloat# -5.0e-2#)

Rec {
-- RHS size: {terms: 346, types: 349, coercions: 0, joins: 1/14}
$wmainLoop
  = \ @ m_s141n
      ww_s141z
      ww1_s141A
      ww2_s141B
      ww3_s141C
      w_s141p
      w1_s141q
      w2_s141r
      w3_s141s
      w4_s141t ->
      ww2_s141B
        (updateInput w2_s141r)
        (ww2_s141B
           (clearScreen w4_s141t)
           (ww2_s141B
              (fillBackground w4_s141t)
              (let { lvl6_s13MQ = get w_s141p } in
               let { lvl7_s13MP = getTime w1_s141q } in
               let { lvl8_s13MS = drawScreen w4_s141t } in
               let { lvl9_s13MT = fillBackground w4_s141t } in
               let {
                 lvl10_s13MU
                   = $wmainLoop
                       ww_s141z
                       ww1_s141A
                       ww2_s141B
                       ww3_s141C
                       w_s141p
                       w1_s141q
                       w2_s141r
                       w3_s141s
                       w4_s141t } in
               let { lvl11_s13MR = ww3_s141C () } in
               let { lvl12_s13MV = pure ww_s141z () } in
               ww1_s141A
                 (getInput w2_s141r)
                 (\ input_a13gx ->
                    let {
                      lvl13_s13MY
                        = let {
                            lvl14_s13MX
                              = let {
                                  lvl15_s13MW
                                    = ww2_s141B
                                        lvl8_s13MS
                                        (ww2_s141B
                                           lvl9_s13MT
                                           (case input_a13gx of
                                            { Input ds1_d9k5 ds2_d9k6 ds3_d9k7 ds4_d9k8 ->
                                            case ds3_d9k7 of {
                                              False -> lvl10_s13MU;
                                              True -> lvl12_s13MV
                                            }
                                            })) } in
                                ww1_s141A
                                  lvl6_s13MQ
                                  (\ gs_a13i6 ->
                                     ww2_s141B
                                       (case input_a13gx of
                                        { Input ds1_d9ka ds2_d9kb ds3_d9kc ds4_d9kd ->
                                        case ds4_d9kd of {
                                          False -> lvl11_s13MR;
                                          True -> printGS w3_s141s gs_a13i6
                                        }
                                        })
                                       (ww2_s141B (drawDebug w4_s141t gs_a13i6) lvl15_s13MW)) } in
                          ww1_s141A lvl7_s13MP (\ _ -> lvl14_s13MX) } in
                    ww1_s141A
                      lvl6_s13MQ
                      (\ old_gs_a13gy ->
                         ww2_s141B
                           (let {
                              ds_s13M0
                                = case input_a13gx of
                                  { Input ds1_d9jV ds2_d9jW ds3_d9jX ds4_d9jY ->
                                  join {
                                    $j_s13Rs
                                      = case ds2_d9jW of {
                                          False ->
                                            (case old_gs_a13gy of
                                             { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                             case ds7_dEke of
                                             { PVars ds11_dEkI ds12_dEkJ ds13_dEkK ->
                                             ds12_dEkJ
                                             }
                                             },
                                             case old_gs_a13gy of
                                             { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                             case ds7_dEke of
                                             { PVars ds11_dEkM ds12_dEkN ds13_dEkO ->
                                             ds13_dEkO
                                             }
                                             });
                                          True ->
                                            case ds1_d9jV of {
                                              False ->
                                                (case old_gs_a13gy of
                                                 { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                                 case ds7_dEke of
                                                 { PVars ds11_dEkI ds12_dEkJ ds13_dEkK ->
                                                 case ds12_dEkJ of { V2 a1_aIzD b1_aIzE ->
                                                 case a1_aIzD of { F# x_s145d ->
                                                 case b1_aIzE of { F# x1_s145g ->
                                                 case lvl3_r148s of { F# y_ajNn ->
                                                 case lvl4_r148t of { F# y1_XjPP ->
                                                 case lvl5_r148u of { F# y2_XjQ7 ->
                                                 V2
                                                   (F#
                                                      (plusFloat#
                                                         (timesFloat# x_s145d y_ajNn)
                                                         (timesFloat# x1_s145g y2_XjQ7)))
                                                   (F#
                                                      (plusFloat#
                                                         (timesFloat# x_s145d y1_XjPP)
                                                         (timesFloat# x1_s145g y_ajNn)))
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 },
                                                 case old_gs_a13gy of
                                                 { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                                 case ds7_dEke of
                                                 { PVars ds11_dEkM ds12_dEkN ds13_dEkO ->
                                                 case ds13_dEkO of { V2 a1_aIzD b1_aIzE ->
                                                 case a1_aIzD of { F# x_s145j ->
                                                 case b1_aIzE of { F# x1_s145m ->
                                                 case lvl3_r148s of { F# y_ajNn ->
                                                 case lvl4_r148t of { F# y1_XjPP ->
                                                 case lvl5_r148u of { F# y2_XjQ7 ->
                                                 V2
                                                   (F#
                                                      (plusFloat#
                                                         (timesFloat# x_s145j y_ajNn)
                                                         (timesFloat# x1_s145m y2_XjQ7)))
                                                   (F#
                                                      (plusFloat#
                                                         (timesFloat# x_s145j y1_XjPP)
                                                         (timesFloat# x1_s145m y_ajNn)))
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 }
                                                 });
                                              True ->
                                                (case old_gs_a13gy of
                                                 { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                                 case ds7_dEke of
                                                 { PVars ds11_dEkI ds12_dEkJ ds13_dEkK ->
                                                 ds12_dEkJ
                                                 }
                                                 },
                                                 case old_gs_a13gy of
                                                 { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                                 case ds7_dEke of
                                                 { PVars ds11_dEkM ds12_dEkN ds13_dEkO ->
                                                 ds13_dEkO
                                                 }
                                                 })
                                            }
                                        } } in
                                  case ds1_d9jV of {
                                    False -> jump $j_s13Rs;
                                    True ->
                                      case ds2_d9jW of {
                                        False ->
                                          (case old_gs_a13gy of
                                           { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                           case ds7_dEke of { PVars ds11_dEkI ds12_dEkJ ds13_dEkK ->
                                           case ds12_dEkJ of { V2 a1_aIzD b1_aIzE ->
                                           case a1_aIzD of { F# x_s145p ->
                                           case b1_aIzE of { F# x1_s145s ->
                                           case lvl_r148p of { F# y_ajNn ->
                                           case lvl1_r148q of { F# y1_XjPM ->
                                           case lvl2_r148r of { F# y2_XjQ4 ->
                                           V2
                                             (F#
                                                (plusFloat#
                                                   (timesFloat# x_s145p y_ajNn)
                                                   (timesFloat# x1_s145s y2_XjQ4)))
                                             (F#
                                                (plusFloat#
                                                   (timesFloat# x_s145p y1_XjPM)
                                                   (timesFloat# x1_s145s y_ajNn)))
                                           }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           },
                                           case old_gs_a13gy of
                                           { Vars ds7_dEke ds8_dEkf ds9_dEkg ds10_dEkh ->
                                           case ds7_dEke of { PVars ds11_dEkM ds12_dEkN ds13_dEkO ->
                                           case ds13_dEkO of { V2 a1_aIzD b1_aIzE ->
                                           case a1_aIzD of { F# x_s145v ->
                                           case b1_aIzE of { F# x1_s145y ->
                                           case lvl_r148p of { F# y_ajNn ->
                                           case lvl1_r148q of { F# y1_XjPM ->
                                           case lvl2_r148r of { F# y2_XjQ4 ->
                                           V2
                                             (F#
                                                (plusFloat#
                                                   (timesFloat# x_s145v y_ajNn)
                                                   (timesFloat# x1_s145y y2_XjQ4)))
                                             (F#
                                                (plusFloat#
                                                   (timesFloat# x_s145v y1_XjPM)
                                                   (timesFloat# x1_s145y y_ajNn)))
                                           }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           }
                                           });
                                        True -> jump $j_s13Rs
                                      }
                                  }
                                  } } in
                            let {
                              rotated_dir_s13LZ
                                = case ds_s13M0 of { (rotated_dir1_a13kY, rotated_cplane_a13l0) ->
                                  rotated_dir1_a13kY
                                  } } in
                            let {
                              rotated_cplane_s13LY
                                = case ds_s13M0 of { (rotated_dir1_a13kY, rotated_cplane1_a13l0) ->
                                  rotated_cplane1_a13l0
                                  } } in
                            state
                              w_s141p
                              (\ s1_aUbW ->
                                 ((),
                                  case s1_aUbW of { Vars ds1_dElh ds2_dEli ds3_dElj ds4_dElk ->
                                  Vars
                                    (case ds1_dElh of { PVars ds5_d13Bs ds6_d13Bt ds7_d13Bu ->
                                     PVars ds5_d13Bs rotated_dir_s13LZ rotated_cplane_s13LY
                                     })
                                    ds2_dEli
                                    ds3_dElj
                                    ds4_dElk
                                  })))
                           lvl13_s13MY)))))
end Rec }

-- RHS size: {terms: 23, types: 70, coercions: 0, joins: 0/0}
mainLoop
  = \ @ m_s141n
      w_s141o
      w1_s141p
      w2_s141q
      w3_s141r
      w4_s141s
      w5_s141t ->
      case w_s141o of
      { C:MonadReader ww1_s141w ww2_s141E ww3_s141F ww4_s141G ->
      case ww1_s141w of
      { C:Monad ww6_s141z ww7_s141A ww8_s141B ww9_s141C ->
      $wmainLoop
        ww6_s141z
        ww7_s141A
        ww8_s141B
        ww9_s141C
        w1_s141p
        w2_s141q
        w3_s141r
        w4_s141s
        w5_s141t
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk.Runner"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1



[17 of 17] Compiling Obelisk          ( src\Obelisk.hs, C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\build\Obelisk.o )

==================== Tidy Core ====================
Result size of Tidy Core
  = {terms: 1,528, types: 2,986, coercions: 1,886, joins: 8/23}

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
main8 = "resources/arial.ttf"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
main7 = unpackCString# main8

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initialScreenHeight1 = I32# 480#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
initialScreenWidth1 = I32# 640#

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
lvl_r19kn
  = V2
      (initialScreenWidth1 `cast` <Co:2>)
      (initialScreenHeight1 `cast` <Co:2>)

-- RHS size: {terms: 10, types: 0, coercions: 0, joins: 0/0}
lvl1_r19ko
  = WindowConfig
      True
      False
      False
      Windowed
      NoGraphicsContext
      Wherever
      False
      lvl_r19kn
      True

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
lvl2_r19kp = "Graphic Renderer Test"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
lvl3_r19kq = unpackCString# lvl2_r19kp

-- RHS size: {terms: 17, types: 35, coercions: 17, joins: 0/0}
runObelisk1
  = \ @ a_a14UB config_a14Ok v_a14Ol ds_d15Cl s_XTEk ->
      case (((((ds_d15Cl `cast` <Co:9>) config_a14Ok) `cast` <Co:4>)
               v_a14Ol)
            `cast` <Co:4>)
             s_XTEk
      of
      { (# ipv_aTu8, ipv1_aTu9 #) ->
      (# ipv_aTu8,
         case ipv1_aTu9 of { (a1_a15Cv, ds2_a15Cw) -> a1_a15Cv } #)
      }

-- RHS size: {terms: 1, types: 0, coercions: 13, joins: 0/0}
runObelisk = runObelisk1 `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$tc'Obelisk3 = "'Obelisk"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$tc'Obelisk2 = TrNameS $tc'Obelisk3

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule2 = "Obelisk"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule1 = TrNameS $trModule2

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep_r19kr = KindRepTyConApp $tcIO []

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep1_r19ks = : $krep_r19kr []

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$krep2_r19kt = KindRepVar 0#

-- RHS size: {terms: 3, types: 2, coercions: 0, joins: 0/0}
$krep3_r19ku = : $krep2_r19kt []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep4_r19kv = KindRepTyConApp $tcConfig []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep5_r19kw = KindRepTyConApp $tcVars []

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep6_r19kx = : $krep5_r19kw $krep1_r19ks

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep7_r19ky = KindRepTyConApp $tcStateT $krep6_r19kx

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep8_r19kz = : $krep7_r19ky $krep3_r19ku

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$krep9_r19kA = : $krep4_r19kv $krep8_r19kz

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep10_r19kB = KindRepTyConApp $tcReaderT $krep9_r19kA

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
$trModule4 = "obelisk-0.1.0.0-inplace"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
$trModule3 = TrNameS $trModule4

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$trModule = Module $trModule3 $trModule1

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tcObelisk
  = TyCon
      11006391559692241826##
      14141519176276061980##
      $trModule
      $trModule1
      0#
      krep$*Arr*

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$krep11_r19kC = KindRepTyConApp $tcObelisk $krep3_r19ku

-- RHS size: {terms: 3, types: 0, coercions: 0, joins: 0/0}
$tc'Obelisk1 = KindRepFun $krep10_r19kB $krep11_r19kC

-- RHS size: {terms: 7, types: 0, coercions: 0, joins: 0/0}
$tc'Obelisk
  = TyCon
      15133489742191043565##
      10467560362188096492##
      $trModule
      $tc'Obelisk2
      1#
      $tc'Obelisk1

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
initialScreenHeight = initialScreenHeight1 `cast` <Co:2>

-- RHS size: {terms: 1, types: 0, coercions: 2, joins: 0/0}
initialScreenWidth = initialScreenWidth1 `cast` <Co:2>

-- RHS size: {terms: 13, types: 22, coercions: 0, joins: 0/0}
$fMonadThrowObelisk1
  = \ @ e_a15lt @ a_a15lu $dException_a15lw eta_B4 _ _ eta3_B1 ->
      case raiseIO# (toException $dException_a15lw eta_B4) eta3_B1
      of wild_00 {
      }

-- RHS size: {terms: 28, types: 40, coercions: 41, joins: 0/1}
$fMonadCatchObelisk1
  = \ @ e_a15uC
      @ a_a15uD
      $dException_a15uF
      ds_a15Sg
      c_a15Sh
      r1_a15Si ->
      let { m1_s1624 = (ds_a15Sg `cast` <Co:6>) r1_a15Si } in
      (\ s1_a15SQ eta_a15T7 ->
         catch#
           (((m1_s1624 `cast` <Co:4>) s1_a15SQ) `cast` <Co:4>)
           (\ e1_a15T8 ->
              case fromException $dException_a15uF e1_a15T8 of {
                Nothing -> raiseIO# e1_a15T8;
                Just e'_a15Td ->
                  (((((c_a15Sh e'_a15Td) `cast` <Co:6>) r1_a15Si) `cast` <Co:4>)
                     s1_a15SQ)
                  `cast` <Co:4>
              })
           eta_a15T7)
      `cast` <Co:13>

-- RHS size: {terms: 16, types: 21, coercions: 0, joins: 0/0}
$fHasInputObelisk2
  = \ input_aTDc _ eta1_X45 eta2_X89 ->
      (# eta2_X89,
         ((),
          case eta1_X45 of { Vars ds_dUbY ds1_dUbZ ds2_dUc0 ds3_dUc1 ->
          Vars ds_dUbY ds1_dUbZ ds2_dUc0 input_aTDc
          }) #)

-- RHS size: {terms: 11, types: 20, coercions: 0, joins: 0/0}
$fHasInputObelisk1
  = \ _ eta_B2 eta1_B1 ->
      (# eta1_B1,
         (case eta_B2 of { Vars ds1_dEkt ds2_dEku ds3_dEkv ds4_dEkw ->
          ds4_dEkw
          },
          eta_B2) #)

-- RHS size: {terms: 1, types: 0, coercions: 27, joins: 0/0}
$sgetInput' = $fHasInputObelisk1 `cast` <Co:27>

-- RHS size: {terms: 9, types: 19, coercions: 0, joins: 0/0}
$fMonadStateObelisk1
  = \ @ a_a15k2 eta_X1624 _ eta2_X45 eta3_X89 ->
      (# eta3_X89, eta_X1624 eta2_X45 #)

-- RHS size: {terms: 9, types: 16, coercions: 0, joins: 0/0}
$fMonadStateObelisk2
  = \ eta_a15XN _ _ eta3_B1 -> (# eta3_B1, ((), eta_a15XN) #)

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
$fMonadStateObelisk3
  = \ _ x_a15XH s_XTD4 -> (# s_XTD4, (x_a15XH, x_a15XH) #)

-- RHS size: {terms: 14, types: 22, coercions: 13, joins: 0/1}
$sreader_r19kD
  = \ @ r_X15Xx @ a_X15Xz f_a15Xx x_a15Xz ->
      let { eta_X162T = f_a15Xx x_a15Xz } in
      (\ eta1_X162W s_XTLO -> (# s_XTLO, (eta_X162T, eta1_X162W) #))
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 16, joins: 0/0}
$fMonadReaderObelisk_$sreader = $sreader_r19kD `cast` <Co:16>

-- RHS size: {terms: 8, types: 15, coercions: 0, joins: 0/0}
$fMonadReaderObelisk1
  = \ eta_X15X9 eta1_X15Xb s_XTBt ->
      (# s_XTBt, (eta_X15X9, eta1_X15Xb) #)

-- RHS size: {terms: 15, types: 38, coercions: 12, joins: 0/0}
$fSDLInputObelisk1
  = \ _ eta_X30 eta1_X5Z ->
      case ((allocaBytesAligned
               $fStorableBool7
               $fStorableBool7
               (getAbsoluteMouseLocation2 `cast` <Co:8>))
            `cast` <Co:4>)
             eta1_X5Z
      of
      { (# ipv_aTu8, ipv1_aTu9 #) ->
      (# ipv_aTu8, (ipv1_aTu9, eta_X30) #)
      }

-- RHS size: {terms: 14, types: 26, coercions: 0, joins: 0/0}
$fSDLInputObelisk2
  = \ _ eta_X2T eta1_X5L ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 State# RealWorld
                             -> (# State# RealWorld, Word# #)}_aTsC
             eta1_X5L
      of
      { (# ds1_aTsF, ds2_aTsG #) ->
      (# ds1_aTsF, (W32# (narrow32Word# ds2_aTsG), eta_X2T) #)
      }

-- RHS size: {terms: 12, types: 26, coercions: 0, joins: 0/0}
$fSDLInputObelisk3
  = \ _ eta_X2M eta1_X5x ->
      case checkQuitSignal'1 eta1_X5x of { (# ipv_aTu8, ipv1_aTu9 #) ->
      (# ipv_aTu8, (ipv1_aTu9, eta_X2M) #)
      }

-- RHS size: {terms: 19, types: 37, coercions: 27, joins: 0/0}
$fSDLInputObelisk4
  = \ _ eta_B2 eta1_X2F ->
      case (($wpollEvents
               $fApplicativeIO
               ($fMonadIO1 `cast` <Co:16>)
               ($fApplicativeIO4 `cast` <Co:8>)
               (\ @ a_aTsi -> id))
            `cast` <Co:3>)
             eta1_X2F
      of
      { (# ipv_aTsf, ipv1_aTsg #) ->
      (# ipv_aTsf, (map eventPayload ipv1_aTsg, eta_B2) #)
      }

-- RHS size: {terms: 37, types: 52, coercions: 27, joins: 0/0}
$w$cupdateInput
  = \ w_s18Ks w1_s18Kt ->
      case (($wpollEvents
               $fApplicativeIO
               ($fMonadIO1 `cast` <Co:16>)
               ($fApplicativeIO4 `cast` <Co:8>)
               (\ @ a_aTsi -> id))
            `cast` <Co:3>)
             w1_s18Kt
      of
      { (# ipv_aTsf, ipv1_aTsg #) ->
      (# ipv_aTsf,
         ((),
          case w_s18Ks of { Vars ds1_dUbY ds2_dUbZ ds3_dUc0 ds4_dUc1 ->
          Vars
            ds1_dUbY
            ds2_dUbZ
            ds3_dUc0
            (case $wstepControl
                    (map eventPayload ipv1_aTsg) False False False False
             of
             { (# ww3_sUgq, ww4_sUgr, ww5_sUgs, ww6_sUgt #) ->
             Input ww3_sUgq ww4_sUgr ww5_sUgs ww6_sUgt
             })
          }) #)
      }

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fHasInputObelisk3
  = \ _ w1_s18Ks w2_s18Kt -> $w$cupdateInput w1_s18Ks w2_s18Kt

-- RHS size: {terms: 1, types: 0, coercions: 27, joins: 0/0}
$supdateInput' = $fHasInputObelisk3 `cast` <Co:27>

-- RHS size: {terms: 22, types: 33, coercions: 25, joins: 0/1}
$fDebugObelisk1
  = \ @ a_a15w4 $dShow_a15w6 eta_X2B ->
      let { m1_s17J7 = show $dShow_a15w6 eta_X2B } in
      (\ _ eta1_B2 eta2_B1 ->
         case ((hPutStr' stdout m1_s17J7 True) `cast` <Co:2>) eta2_B1 of
         { (# ipv_aTu8, ipv1_aTu9 #) ->
         (# ipv_aTu8, (ipv1_aTu9, eta1_B2) #)
         })
      `cast` <Co:23>

-- RHS size: {terms: 27, types: 34, coercions: 25, joins: 0/1}
$fDebugObelisk2
  = \ eta_B1 ->
      let {
        m1_s17J5
          = case eta_B1 of { Vars ww3_sFuF ww4_sFuG ww5_sFuH ww6_sFuI ->
            $w$cshowsPrec1 0# ww3_sFuF ww4_sFuG ww5_sFuH ww6_sFuI []
            } } in
      (\ _ eta1_B2 eta2_X31 ->
         case ((hPutStr' stdout m1_s17J5 True) `cast` <Co:2>) eta2_X31 of
         { (# ipv_aTu8, ipv1_aTu9 #) ->
         (# ipv_aTu8, (ipv1_aTu9, eta1_B2) #)
         })
      `cast` <Co:23>

-- RHS size: {terms: 33, types: 52, coercions: 1, joins: 0/0}
$fSDLRendererObelisk1
  = \ w1_sVy3 _ eta1_B2 eta2_X3 ->
      case w1_sVy3 `cast` <Co:1> of { Ptr ds10_aUGj ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aUGi
             ds10_aUGj eta2_X3
      of
      { (# ds12_aUGn, ds13_aUGo #) ->
      case <# (narrow32Int# ds13_aUGo) 0# of {
        __DEFAULT -> (# ds12_aUGn, ((), eta1_B2) #);
        1# ->
          case clearRenderer'1 ds12_aUGn of { (# ipv_XTyo, ipv1_XTyq #) ->
          (# ipv_XTyo, ((), eta1_B2) #)
          }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 29, joins: 0/0}
$sclearRenderer' = $fSDLRendererObelisk1 `cast` <Co:29>

-- RHS size: {terms: 33, types: 52, coercions: 1, joins: 0/0}
$fSDLRendererObelisk2
  = \ w1_sVx1 _ eta1_B2 eta2_B1 ->
      case w1_sVx1 `cast` <Co:1> of { Ptr ds8_aVkY ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aVkX
             ds8_aVkY eta2_B1
      of
      { (# ds10_aVl2, ds11_aVl3 #) ->
      case <# (narrow32Int# ds11_aVl3) 0# of {
        __DEFAULT -> (# ds10_aVl2, ((), eta1_B2) #);
        1# ->
          case updateWindowSurface1 ds10_aVl2 of
          { (# ipv_aVly, ipv1_aVlz #) ->
          (# ipv_aVly, ((), eta1_B2) #)
          }
      }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 29, joins: 0/0}
$supdateWindowSurface' = $fSDLRendererObelisk2 `cast` <Co:29>

-- RHS size: {terms: 29, types: 49, coercions: 0, joins: 0/0}
$w$cdrawScreen
  = \ ww_s18KL w_s18KE w1_s18KF ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aVkX
             ww_s18KL w1_s18KF
      of
      { (# ds10_aVl2, ds11_aVl3 #) ->
      case <# (narrow32Int# ds11_aVl3) 0# of {
        __DEFAULT -> (# ds10_aVl2, ((), w_s18KE) #);
        1# ->
          case updateWindowSurface1 ds10_aVl2 of
          { (# ipv_aVly, ipv1_aVlz #) ->
          (# ipv_aVly, ((), w_s18KE) #)
          }
      }
      }

-- RHS size: {terms: 13, types: 13, coercions: 1, joins: 0/0}
$fRendererObelisk3
  = \ w_s18KD w1_s18KE w2_s18KF ->
      case w_s18KD of
      { Config ww1_s18KI ww2_s18KN ww3_s18KO ww4_s18KP ww5_s18KQ
               ww6_s18KR ->
      case ww1_s18KI `cast` <Co:1> of { Ptr ww8_s18KL ->
      $w$cdrawScreen ww8_s18KL w1_s18KE w2_s18KF
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 27, joins: 0/0}
$sdrawScreen' = $fRendererObelisk3 `cast` <Co:27>

-- RHS size: {terms: 29, types: 49, coercions: 0, joins: 0/0}
$w$cclearScreen
  = \ ww_s18Lk w_s18Lc w1_s18Ld ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aUGi
             ww_s18Lk w1_s18Ld
      of
      { (# ds12_aUGn, ds13_aUGo #) ->
      case <# (narrow32Int# ds13_aUGo) 0# of {
        __DEFAULT -> (# ds12_aUGn, ((), w_s18Lc) #);
        1# ->
          case clearRenderer'1 ds12_aUGn of { (# ipv_XTyA, ipv1_XTyC #) ->
          (# ipv_XTyA, ((), w_s18Lc) #)
          }
      }
      }

-- RHS size: {terms: 13, types: 13, coercions: 1, joins: 0/0}
$fRendererObelisk4
  = \ w_s18Lb w1_s18Lc w2_s18Ld ->
      case w_s18Lb of
      { Config ww1_s18Lg ww2_s18Lh ww3_s18Lm ww4_s18Ln ww5_s18Lo
               ww6_s18Lp ->
      case ww2_s18Lh `cast` <Co:1> of { Ptr ww8_s18Lk ->
      $w$cclearScreen ww8_s18Lk w1_s18Lc w2_s18Ld
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 27, joins: 0/0}
$sclearScreen' = $fRendererObelisk4 `cast` <Co:27>

-- RHS size: {terms: 10, types: 18, coercions: 0, joins: 0/0}
$fApplicativeObelisk1
  = \ @ a_a15h3 eta_X15Zo _ eta2_B2 eta3_B1 ->
      (# eta3_B1, (eta_X15Zo, eta2_B2) #)

-- RHS size: {terms: 25, types: 50, coercions: 41, joins: 0/2}
$s$fApplicativeReaderT_$c*>_r19kE
  = \ @ r_X15VY @ a_a15VY @ b_a15VZ u_a15W0 v_a15W1 r1_a15W2 ->
      let { m1_a17ul = (u_a15W0 `cast` <Co:6>) r1_a15W2 } in
      let { k_a17um = (v_a15W1 `cast` <Co:6>) r1_a15W2 } in
      (\ s1_a17un s_XTAN ->
         case (((m1_a17ul `cast` <Co:4>) s1_a17un) `cast` <Co:4>) s_XTAN of
         { (# ipv_aTu8, ipv1_aTu9 #) ->
         (((k_a17um `cast` <Co:4>)
             (case ipv1_aTu9 of { (a1_a17ur, s'_a17us) -> s'_a17us }))
          `cast` <Co:4>)
           ipv_aTu8
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 30, joins: 0/0}
$fApplicativeObelisk_$s$fApplicativeReaderT_$c*>
  = $s$fApplicativeReaderT_$c*>_r19kE `cast` <Co:30>

-- RHS size: {terms: 27, types: 52, coercions: 41, joins: 0/1}
$s$fMonadReaderT_$c>>=_r19kF
  = \ @ r_X15Ws @ a_a15Ws @ b_a15Wt m1_a15Wu k_a15Wv r1_a15Ww ->
      let { m2_a17tJ = (m1_a15Wu `cast` <Co:6>) r1_a15Ww } in
      (\ s1_a17tL s_XTAB ->
         case (((m2_a17tJ `cast` <Co:4>) s1_a17tL) `cast` <Co:4>) s_XTAB of
         { (# ipv_aTu8, ipv1_aTu9 #) ->
         ((((((k_a15Wv
                 (case ipv1_aTu9 of { (a1_a17tP, s'_a17tQ) -> a1_a17tP }))
              `cast` <Co:6>)
               r1_a15Ww)
            `cast` <Co:4>)
             (case ipv1_aTu9 of { (a1_a17tU, s'_a17tV) -> s'_a17tV }))
          `cast` <Co:4>)
           ipv_aTu8
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 31, joins: 0/0}
$fMonadObelisk_$s$fMonadReaderT_$c>>=
  = $s$fMonadReaderT_$c>>=_r19kF `cast` <Co:31>

-- RHS size: {terms: 38, types: 86, coercions: 41, joins: 0/2}
$s$fApplicativeReaderT_$c<*_r19kG
  = \ @ r_X15Wd @ a_a15Wd @ b_a15We u_a15Wf v_a15Wg r1_a15Wh ->
      let { w3_X17B2 = (u_a15Wf `cast` <Co:6>) r1_a15Wh } in
      let { w4_X17B5 = (v_a15Wg `cast` <Co:6>) r1_a15Wh } in
      (\ w5_X17B8 s_XTAC ->
         case (((w3_X17B2 `cast` <Co:4>) w5_X17B8) `cast` <Co:4>) s_XTAC of
         { (# ipv_aTsf, ipv1_aTsg #) ->
         case (((w4_X17B5 `cast` <Co:4>)
                  (case ipv1_aTsg of { (a1_a17wH, s'_a17wI) -> s'_a17wI }))
               `cast` <Co:4>)
                ipv_aTsf
         of
         { (# ipv2_XTAT, ipv3_XTAV #) ->
         (# ipv2_XTAT,
            (case ipv1_aTsg of { (a1_a17wC, s'_a17wD) -> a1_a17wC },
             case ipv3_XTAV of { (x_a17x3, s''_a17x4) -> s''_a17x4 }) #)
         }
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 30, joins: 0/0}
$fApplicativeObelisk_$s$fApplicativeReaderT_$c<*
  = $s$fApplicativeReaderT_$c<*_r19kG `cast` <Co:30>

-- RHS size: {terms: 45, types: 96, coercions: 41, joins: 0/2}
$s$fApplicativeReaderT_$cliftA2_r19kH
  = \ @ r_X15VG
      @ a_a15VG
      @ b_a15VH
      @ c_a15VI
      f_a15VJ
      x_a15VK
      y_a15VL
      r1_a15VM ->
      let { w3_X17AO = (x_a15VK `cast` <Co:6>) r1_a15VM } in
      let { w4_X17AR = (y_a15VL `cast` <Co:6>) r1_a15VM } in
      (\ w5_X17AU s_XTAo ->
         case (((w3_X17AO `cast` <Co:4>) w5_X17AU) `cast` <Co:4>) s_XTAo of
         { (# ipv_aTsf, ipv1_aTsg #) ->
         case (((w4_X17AR `cast` <Co:4>)
                  (case ipv1_aTsg of { (a1_a17wH, s'_a17wI) -> s'_a17wI }))
               `cast` <Co:4>)
                ipv_aTsf
         of
         { (# ipv2_XTAF, ipv3_XTAH #) ->
         (# ipv2_XTAF,
            (f_a15VJ
               (case ipv1_aTsg of { (a1_a17wC, s'_a17wD) -> a1_a17wC })
               (case ipv3_XTAH of { (x1_a17wY, s''_a17wZ) -> x1_a17wY }),
             case ipv3_XTAH of { (x1_a17x3, s''_a17x4) -> s''_a17x4 }) #)
         }
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 37, joins: 0/0}
$fApplicativeObelisk_$s$fApplicativeReaderT_$cliftA2
  = $s$fApplicativeReaderT_$cliftA2_r19kH `cast` <Co:37>

-- RHS size: {terms: 42, types: 99, coercions: 44, joins: 0/2}
$s$fApplicativeReaderT_$c<*>_r19kI
  = \ @ r_X15Vr @ a_a15Vr @ b_a15Vs f_a15Vt v_a15Vu r1_a15Vv ->
      let { ds_a17v5 = (f_a15Vt `cast` <Co:7>) r1_a15Vv } in
      let { ds1_a17v6 = (v_a15Vu `cast` <Co:6>) r1_a15Vv } in
      (\ s1_a17v7 s_XTA3 ->
         case (((ds_a17v5 `cast` <Co:5>) s1_a17v7) `cast` <Co:5>) s_XTA3 of
         { (# ipv_aTu8, ipv1_aTu9 #) ->
         case (((ds1_a17v6 `cast` <Co:4>)
                  (case ipv1_aTu9 of { (f1_a17vb, s'_a17vc) -> s'_a17vc }))
               `cast` <Co:4>)
                ipv_aTu8
         of
         { (# ipv2_XTyM, ipv3_XTyO #) ->
         (# ipv2_XTyM,
            (case ipv1_aTu9 of { (f1_a17vh, s'_a17vi) ->
             f1_a17vh (case ipv3_XTyO of { (x_a17vm, s''_a17vn) -> x_a17vm })
             },
             case ipv3_XTyO of { (x_a17vr, s''_a17vs) -> s''_a17vs }) #)
         }
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 31, joins: 0/0}
$fApplicativeObelisk_$s$fApplicativeReaderT_$c<*>
  = $s$fApplicativeReaderT_$c<*>_r19kI `cast` <Co:31>

-- RHS size: {terms: 24, types: 52, coercions: 27, joins: 0/1}
$s$fFunctorReaderT_$c<$_r19kJ
  = \ @ r_X15UM @ a_a15UM @ b_a15UN x_a15UO v_a15UP eta_B1 ->
      let { eta1_X17BA = (v_a15UP `cast` <Co:6>) eta_B1 } in
      (\ eta2_X17BD s_XTy9 ->
         case (((eta1_X17BA `cast` <Co:4>) eta2_X17BD) `cast` <Co:4>) s_XTy9
         of
         { (# ipv_aTsf, ipv1_aTsg #) ->
         (# ipv_aTsf,
            (x_a15UO,
             case ipv1_aTsg of { (a1_a17vL, s'_a17vM) -> s'_a17vM }) #)
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 25, joins: 0/0}
$fFunctorObelisk_$s$fFunctorReaderT_$c<$
  = $s$fFunctorReaderT_$c<$_r19kJ `cast` <Co:25>

-- RHS size: {terms: 28, types: 58, coercions: 27, joins: 0/1}
$s$fFunctorReaderT_$cfmap_r19kK
  = \ @ r_X15Ux @ a_a15Ux @ b_a15Uy f_a15Uz eta_B2 eta1_B1 ->
      let { m1_a17vU = (eta_B2 `cast` <Co:6>) eta1_B1 } in
      (\ s1_a17vV s_aTsc ->
         case (((m1_a17vU `cast` <Co:4>) s1_a17vV) `cast` <Co:4>) s_aTsc of
         { (# ipv_aTsf, ipv1_aTsg #) ->
         (# ipv_aTsf,
            (f_a15Uz (case ipv1_aTsg of { (a1_a17vZ, s'_a17w0) -> a1_a17vZ }),
             case ipv1_aTsg of { (a1_a17w4, s'_a17w5) -> s'_a17w5 }) #)
         })
      `cast` <Co:13>

-- RHS size: {terms: 1, types: 0, coercions: 26, joins: 0/0}
$fFunctorObelisk_$s$fFunctorReaderT_$cfmap
  = $s$fFunctorReaderT_$cfmap_r19kK `cast` <Co:26>

-- RHS size: {terms: 3, types: 3, coercions: 31, joins: 0/0}
$fFunctorObelisk
  = C:Functor
      ($fFunctorObelisk_$s$fFunctorReaderT_$cfmap `cast` <Co:16>)
      ($fFunctorObelisk_$s$fFunctorReaderT_$c<$ `cast` <Co:15>)

-- RHS size: {terms: 7, types: 5, coercions: 108, joins: 0/0}
$fApplicativeObelisk
  = C:Applicative
      $fFunctorObelisk
      ($fApplicativeObelisk1 `cast` <Co:32>)
      ($fApplicativeObelisk_$s$fApplicativeReaderT_$c<*> `cast` <Co:18>)
      ($fApplicativeObelisk_$s$fApplicativeReaderT_$cliftA2
       `cast` <Co:24>)
      ($fApplicativeObelisk_$s$fApplicativeReaderT_$c*> `cast` <Co:17>)
      ($fApplicativeObelisk_$s$fApplicativeReaderT_$c<* `cast` <Co:17>)

-- RHS size: {terms: 5, types: 3, coercions: 68, joins: 0/0}
$fMonadObelisk
  = C:Monad
      $fApplicativeObelisk
      ($fMonadObelisk_$s$fMonadReaderT_$c>>= `cast` <Co:19>)
      ($fApplicativeObelisk_$s$fApplicativeReaderT_$c*> `cast` <Co:17>)
      ($fApplicativeObelisk1 `cast` <Co:32>)

-- RHS size: {terms: 4, types: 1, coercions: 16, joins: 0/0}
$fDebugObelisk
  = C:Debug
      $fMonadObelisk
      ($fDebugObelisk2 `cast` <Co:5>)
      ($fDebugObelisk1 `cast` <Co:11>)

-- RHS size: {terms: 6, types: 1, coercions: 120, joins: 0/0}
$fSDLInputObelisk
  = C:SDLInput
      $fMonadObelisk
      ($fSDLInputObelisk4 `cast` <Co:31>)
      ($fSDLInputObelisk3 `cast` <Co:27>)
      ($fSDLInputObelisk2 `cast` <Co:27>)
      ($fSDLInputObelisk1 `cast` <Co:35>)

-- RHS size: {terms: 5, types: 8, coercions: 49, joins: 0/0}
$fMonadReaderObelisk
  = C:MonadReader
      $fMonadObelisk
      ($fMonadReaderObelisk1 `cast` <Co:27>)
      (withReaderT `cast` <Co:13>)
      ($fMonadReaderObelisk_$sreader `cast` <Co:9>)

-- RHS size: {terms: 5, types: 2, coercions: 91, joins: 0/0}
$fMonadStateObelisk
  = C:MonadState
      $fMonadObelisk
      ($fMonadStateObelisk3 `cast` <Co:27>)
      ($fMonadStateObelisk2 `cast` <Co:29>)
      ($fMonadStateObelisk1 `cast` <Co:35>)

-- RHS size: {terms: 5, types: 1, coercions: 29, joins: 0/0}
$fHasInputObelisk
  = C:HasInput
      $fMonadObelisk
      $supdateInput'
      ($fHasInputObelisk2 `cast` <Co:29>)
      $sgetInput'

-- RHS size: {terms: 3, types: 1, coercions: 38, joins: 0/0}
$fMonadThrowObelisk
  = C:MonadThrow $fMonadObelisk ($fMonadThrowObelisk1 `cast` <Co:38>)

-- RHS size: {terms: 3, types: 1, coercions: 30, joins: 0/0}
$fMonadCatchObelisk
  = C:MonadCatch
      $fMonadThrowObelisk ($fMonadCatchObelisk1 `cast` <Co:30>)

-- RHS size: {terms: 14, types: 30, coercions: 2, joins: 0/0}
$fMonadIOObelisk1
  = \ @ a_a15kO x_X15W0 _ eta_X4y eta1_B1 ->
      case (x_X15W0 `cast` <Co:2>) eta1_B1 of
      { (# ipv_aTu8, ipv1_aTu9 #) ->
      (# ipv_aTu8, (ipv1_aTu9, eta_X4y) #)
      }

-- RHS size: {terms: 3, types: 1, coercions: 33, joins: 0/0}
$fMonadIOObelisk
  = C:MonadIO $fMonadObelisk ($fMonadIOObelisk1 `cast` <Co:33>)

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fSDLRendererObelisk_$cfillCircle = fillCircle $fMonadIOObelisk

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fSDLRendererObelisk_$ccircle = circle $fMonadIOObelisk

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fSDLRendererObelisk_$cfillTriangle = fillTriangle $fMonadIOObelisk

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fSDLRendererObelisk_$cdrawLine = line $fMonadIOObelisk

-- RHS size: {terms: 2, types: 1, coercions: 0, joins: 0/0}
$fSDLFontObelisk_$crenderSolidText = solid $fMonadIOObelisk

-- RHS size: {terms: 3, types: 1, coercions: 0, joins: 0/0}
$fSDLFontObelisk
  = C:SDLFont $fMonadObelisk $fSDLFontObelisk_$crenderSolidText

-- RHS size: {terms: 16, types: 22, coercions: 33, joins: 0/0}
$fSDLRendererObelisk_$csurfaceBlit
  = \ w1_aUAk w2_aUAl w3_aUAm w4_aUAn ->
      case w1_aUAk of { Surface ww4_aUAv ww5_aUAw ->
      case w3_aUAm of { Surface ww7_aUAD ww8_aUAE ->
      $wsurfaceBlit
        ($fMonadIOObelisk1 `cast` <Co:33>)
        ww4_aUAv
        w2_aUAl
        ww7_aUAD
        w4_aUAn
      }
      }

-- RHS size: {terms: 13, types: 9, coercions: 33, joins: 0/0}
$w$csurfaceFillScreenRect
  = \ ww_s18Mp ww1_s18Mx ww2_s18MC ww3_s18MH ww4_s18MM ->
      $wsurfaceFillRect
        ($fMonadIOObelisk1 `cast` <Co:33>)
        ww_s18Mp
        Nothing
        ww1_s18Mx
        ww2_s18MC
        ww3_s18MH
        ww4_s18MM

-- RHS size: {terms: 26, types: 21, coercions: 0, joins: 0/0}
$fSDLRendererObelisk_$csurfaceFillScreenRect
  = \ w_s18Ml w1_s18Mm ->
      case w_s18Ml of { Surface ww1_s18Mp ww2_s18Mq ->
      case w1_s18Mm of { V4 ww4_s18Mu ww5_s18Mz ww6_s18ME ww7_s18MJ ->
      case ww4_s18Mu of { W8# ww9_s1981 ->
      case ww5_s18Mz of { W8# ww11_s1984 ->
      case ww6_s18ME of { W8# ww13_s1987 ->
      case ww7_s18MJ of { W8# ww15_s198a ->
      $w$csurfaceFillScreenRect
        ww1_s18Mp ww9_s1981 ww11_s1984 ww13_s1987 ww15_s198a
      }
      }
      }
      }
      }
      }

-- RHS size: {terms: 10, types: 1, coercions: 0, joins: 0/0}
$fSDLRendererObelisk
  = C:SDLRenderer
      $fMonadObelisk
      $supdateWindowSurface'
      $fSDLRendererObelisk_$csurfaceFillScreenRect
      $sclearRenderer'
      $fSDLRendererObelisk_$cdrawLine
      $fSDLRendererObelisk_$cfillTriangle
      $fSDLRendererObelisk_$ccircle
      $fSDLRendererObelisk_$cfillCircle
      $fSDLRendererObelisk_$csurfaceBlit

-- RHS size: {terms: 3, types: 5, coercions: 0, joins: 0/0}
$fRendererObelisk1 = ($fSDLRendererObelisk, $fMonadReaderObelisk)

-- RHS size: {terms: 6, types: 4, coercions: 0, joins: 0/0}
$fRendererObelisk_$cdrawGraphicDebug
  = \ g_aVUG ->
      drawGraphic
        $fRendererObelisk1 (evalGraphic' drawGraphicDebug'1 g_aVUG)

-- RHS size: {terms: 7, types: 4, coercions: 68, joins: 0/0}
$fRendererObelisk_$cdrawDebug
  = \ w4_sZwd ->
      $wdrawDebug'
        ($fMonadObelisk_$s$fMonadReaderT_$c>>= `cast` <Co:19>)
        ($fApplicativeObelisk_$s$fApplicativeReaderT_$c*> `cast` <Co:17>)
        ($fApplicativeObelisk1 `cast` <Co:32>)
        $fRendererObelisk1
        w4_sZwd

-- RHS size: {terms: 20, types: 20, coercions: 50, joins: 0/0}
$fRendererObelisk2
  = \ r1_a15Ww eta_B2 eta1_B1 ->
      case r1_a15Ww of wild_Xq
      { Config ds1_d6u4 ds2_d6u5 ds3_d6u6 ds4_d6u7 ds5_d6u8 ds6_d6u9 ->
      case ds3_d6u6 of { Surface ww1_s18Mp ww2_s18Mq ->
      (((((($wsurfaceFillRect
              ($fMonadIOObelisk1 `cast` <Co:33>)
              ww1_s18Mp
              Nothing
              34##
              34##
              34##
              255##)
           `cast` <Co:9>)
            wild_Xq)
         `cast` <Co:4>)
          eta_B2)
       `cast` <Co:4>)
        eta1_B1
      }
      }

-- RHS size: {terms: 7, types: 1, coercions: 27, joins: 0/0}
$fRendererObelisk
  = C:Renderer
      $fMonadObelisk
      $sclearScreen'
      $sdrawScreen'
      ($fRendererObelisk2 `cast` <Co:27>)
      $fRendererObelisk_$cdrawDebug
      $fRendererObelisk_$cdrawGraphicDebug

-- RHS size: {terms: 1, types: 0, coercions: 0, joins: 0/0}
main5 = "World Debug Window"#

-- RHS size: {terms: 2, types: 0, coercions: 0, joins: 0/0}
main4 = unpackCString# main5

-- RHS size: {terms: 3, types: 1, coercions: 4, joins: 0/0}
main3
  = V2
      (initialScreenWidth1 `cast` <Co:2>)
      (initialScreenHeight1 `cast` <Co:2>)

-- RHS size: {terms: 10, types: 0, coercions: 0, joins: 0/0}
main2
  = WindowConfig
      True
      False
      False
      Windowed
      NoGraphicsContext
      Wherever
      False
      main3
      True

-- RHS size: {terms: 15, types: 25, coercions: 0, joins: 0/0}
main6
  = \ y_a168A eta_a168B ->
      case y_a168A of { Ptr ds2_a168F ->
      case {__pkg_ccall_GC sdl2-ttf-2.1.2 Addr#
                               -> Int# -> State# RealWorld -> (# State# RealWorld, Addr# #)}_a168J
             ds2_a168F 16# eta_a168B
      of
      { (# ds5_a168O, ds6_a168P #) ->
      (# ds5_a168O, Ptr ds6_a168P #)
      }
      }

-- RHS size: {terms: 156, types: 237, coercions: 106, joins: 3/3}
$w$j1
  = \ w_s18MZ ->
      case ((noinline getForeignEncoding) `cast` <Co:2>) w_s18MZ of
      { (# ipv_a168s, ipv1_a168t #) ->
      case charIsRepresentable3
             ipv1_a168t main7 (main6 `cast` <Co:6>) ipv_a168s
      of
      { (# ipv2_XTFL, ipv3_XTFN #) ->
      case ipv3_XTFN of wild_a168S { Ptr a2_a168U ->
      join {
        $w$j2_s18MY w1_s18MW
          = case (($wcreateWindow (\ @ a_aTsi -> id) main4 main2)
                  `cast` <Co:2>)
                   w1_s18MW
            of
            { (# ipv4_XTyz, ipv5_XTyB #) ->
            case ipv5_XTyB `cast` <Co:1> of ds_a15Yq { Ptr ds4_a15Yu ->
            case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15Yt
                   ds4_a15Yu ipv4_XTyz
            of
            { (# ds5_a15Yy #) ->
            case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Addr# #)}_a163i
                   ds4_a15Yu ds5_a15Yy
            of
            { (# ds10_a163n, ds11_a163o #) ->
            join {
              $w$j3_s18MV w2_s18MT
                = case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aVkX
                         ds4_a15Yu w2_s18MT
                  of
                  { (# ds6_aVl2, ds7_aVl3 #) ->
                  join {
                    $w$j4_s18MS w3_s18MQ
                      = case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Addr# #)}_a162r
                               ds11_a163o w3_s18MQ
                        of
                        { (# ds9_a162w, ds8_a162x #) ->
                        case eqAddr# ds8_a162x __NULL of {
                          __DEFAULT ->
                            case (((((($wmainLoop
                                         $fApplicativeObelisk
                                         ($fMonadObelisk_$s$fMonadReaderT_$c>>= `cast` <Co:19>)
                                         ($fApplicativeObelisk_$s$fApplicativeReaderT_$c*>
                                          `cast` <Co:17>)
                                         ($fApplicativeObelisk1 `cast` <Co:32>)
                                         $fMonadStateObelisk
                                         $fSDLInputObelisk
                                         $fHasInputObelisk
                                         $fDebugObelisk
                                         $fRendererObelisk)
                                      `cast` <Co:9>)
                                       (Config
                                          (ds_a15Yq `cast` <Co:2>)
                                          ((Ptr ds8_a162x) `cast` <Co:2>)
                                          (Surface (Ptr ds11_a163o) Nothing)
                                          (initialScreenWidth1 `cast` <Co:2>)
                                          (initialScreenHeight1 `cast` <Co:2>)
                                          (wild_a168S `cast` <Co:2>)))
                                    `cast` <Co:4>)
                                     initVars)
                                  `cast` <Co:4>)
                                   ds9_a162w
                            of
                            { (# ipv6_XTz1, ipv7_XTz3 #) ->
                            case {__pkg_ccall_GC sdl2-ttf-2.1.2 Addr#
                               -> State# RealWorld -> (# State# RealWorld #)}_a15JX
                                   a2_a168U ipv6_XTz1
                            of
                            { (# ds13_a15K2 #) ->
                            case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15YT
                                   ds11_a163o ds13_a15K2
                            of
                            { (# ds14_a15YY #) ->
                            case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15Z9
                                   ds4_a15Yu ds14_a15YY
                            of
                            { (# ds15_a15Ze #) ->
                            case {__pkg_ccall_GC sdl2-2.5.3.0 State# RealWorld
                             -> (# State# RealWorld #)}_a15Zm
                                   ds15_a15Ze
                            of
                            { (# ds16_a15Zp #) ->
                            (# ds16_a15Zp, () #)
                            }
                            }
                            }
                            }
                            };
                          1# ->
                            case getError1 ds9_a162w of { (# ipv6_a162C, ipv7_a162D #) ->
                            createSoftwareRenderer1 ipv7_a162D ipv6_a162C
                            }
                        }
                        } } in
                  case <# (narrow32Int# ds7_aVl3) 0# of {
                    __DEFAULT -> jump $w$j4_s18MS ds6_aVl2;
                    1# ->
                      case updateWindowSurface1 ds6_aVl2 of
                      { (# ipv6_XVyA, ipv7_XVyC #) ->
                      jump $w$j4_s18MS ipv6_XVyA
                      }
                  }
                  } } in
            case eqAddr# ds11_a163o __NULL of {
              __DEFAULT -> jump $w$j3_s18MV ds10_a163n;
              1# ->
                case getWindowSurface1 ds10_a163n of
                { (# ipv6_XVy6, ipv7_XVy8 #) ->
                jump $w$j3_s18MV ipv6_XVy6
                }
            }
            }
            }
            }
            } } in
      case eqAddr# a2_a168U __NULL of {
        __DEFAULT -> jump $w$j2_s18MY ipv2_XTFL;
        1# ->
          case load1 ipv2_XTFL of { (# ipv4_XVxl, ipv5_XVxn #) ->
          jump $w$j2_s18MY ipv4_XVxl
          }
      }
      }
      }
      }

-- RHS size: {terms: 31, types: 37, coercions: 0, joins: 0/0}
$w$j
  = \ w_s18N2 ->
      case {__pkg_ccall_GC sdl2-ttf-2.1.2 State# RealWorld
                               -> (# State# RealWorld, Int# #)}_a17Ej
             w_s18N2
      of
      { (# ds1_a17Em, ds2_a17En #) ->
      case narrow32Int# ds2_a17En of {
        __DEFAULT ->
          case {__pkg_ccall_GC sdl2-ttf-2.1.2 State# RealWorld
                               -> (# State# RealWorld, Int# #)}_a17E4
                 ds1_a17Em
          of
          { (# ds4_a17E7, ds5_a17E8 #) ->
          case <# (narrow32Int# ds5_a17E8) 0# of {
            __DEFAULT -> $w$j1 ds4_a17E7;
            1# ->
              case initialize3 ds4_a17E7 of { (# ipv_XVwM, ipv1_XVwO #) ->
              $w$j1 ipv_XVwM
              }
          }
          };
        1# -> $w$j1 ds1_a17Em
      }
      }

-- RHS size: {terms: 21, types: 25, coercions: 0, joins: 0/0}
main1
  = \ s_XVvK ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Word#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_a17s6
             32## s_XVvK
      of
      { (# ds3_a17sb, ds4_a17sc #) ->
      case <# (narrow32Int# ds4_a17sc) 0# of {
        __DEFAULT -> $w$j ds3_a17sb;
        1# ->
          case initialize1 ds3_a17sb of { (# ipv_aVly, ipv1_aVlz #) ->
          $w$j ipv_aVly
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 3, joins: 0/0}
main = main1 `cast` <Co:3>

-- RHS size: {terms: 208, types: 322, coercions: 74, joins: 5/5}
grender1
  = \ g_a14Oc s_XVpF ->
      case {__pkg_ccall_GC sdl2-2.5.3.0 Word#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_a17s6
             32## s_XVpF
      of
      { (# ds3_a17sb, ds4_a17sc #) ->
      join {
        $w$j2_s18Nk w_s18Ni
          = case {__pkg_ccall_GC sdl2-ttf-2.1.2 State# RealWorld
                               -> (# State# RealWorld, Int# #)}_a17Ej
                   w_s18Ni
            of
            { (# ds1_a17Em, ds2_a17En #) ->
            join {
              $w$j3_s18Nh w1_s18Nf
                = case ((noinline getForeignEncoding) `cast` <Co:2>) w1_s18Nf of
                  { (# ipv_a168s, ipv1_a168t #) ->
                  case charIsRepresentable3
                         ipv1_a168t main7 (main6 `cast` <Co:6>) ipv_a168s
                  of
                  { (# ipv2_XTFX, ipv3_XTFZ #) ->
                  case ipv3_XTFZ of wild2_a168S { Ptr a2_a168U ->
                  join {
                    $w$j4_s18Ne w2_s18Nc
                      = case (($wcreateWindow (\ @ a_aTsi -> id) lvl3_r19kq lvl1_r19ko)
                              `cast` <Co:2>)
                               w2_s18Nc
                        of
                        { (# ipv4_XTyD, ipv5_XTyF #) ->
                        case ipv5_XTyF `cast` <Co:1> of ds_a15Yq { Ptr ds10_a15Yu ->
                        case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15Yt
                               ds10_a15Yu ipv4_XTyD
                        of
                        { (# ds11_a15Yy #) ->
                        case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Addr# #)}_a163i
                               ds10_a15Yu ds11_a15Yy
                        of
                        { (# ds12_a163n, ds13_a163o #) ->
                        join {
                          $w$j5_s18Nb w3_s18N9
                            = case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Int# #)}_aVkX
                                     ds10_a15Yu w3_s18N9
                              of
                              { (# ds14_aVl2, ds15_aVl3 #) ->
                              join {
                                $w$j6_s18N8 w4_s18N6
                                  = case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld, Addr# #)}_a162r
                                           ds13_a163o w4_s18N6
                                    of
                                    { (# ds16_a162w, ds17_a162x #) ->
                                    case eqAddr# ds17_a162x __NULL of {
                                      __DEFAULT ->
                                        case (((((($wgrenderLoop
                                                     $fApplicativeObelisk
                                                     ($fMonadObelisk_$s$fMonadReaderT_$c>>=
                                                      `cast` <Co:19>)
                                                     ($fApplicativeObelisk_$s$fApplicativeReaderT_$c*>
                                                      `cast` <Co:17>)
                                                     $fHasInputObelisk
                                                     $fRendererObelisk
                                                     g_a14Oc)
                                                  `cast` <Co:9>)
                                                   (Config
                                                      (ds_a15Yq `cast` <Co:2>)
                                                      ((Ptr ds17_a162x) `cast` <Co:2>)
                                                      (Surface (Ptr ds13_a163o) Nothing)
                                                      (initialScreenWidth1 `cast` <Co:2>)
                                                      (initialScreenHeight1 `cast` <Co:2>)
                                                      (wild2_a168S `cast` <Co:2>)))
                                                `cast` <Co:4>)
                                                 initVars)
                                              `cast` <Co:4>)
                                               ds16_a162w
                                        of
                                        { (# ipv6_XTz5, ipv7_XTz7 #) ->
                                        case {__pkg_ccall_GC sdl2-ttf-2.1.2 Addr#
                               -> State# RealWorld -> (# State# RealWorld #)}_a15JX
                                               a2_a168U ipv6_XTz5
                                        of
                                        { (# ds19_a15K2 #) ->
                                        case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15YT
                                               ds13_a163o ds19_a15K2
                                        of
                                        { (# ds20_a15YY #) ->
                                        case {__pkg_ccall_GC sdl2-2.5.3.0 Addr#
                             -> State# RealWorld -> (# State# RealWorld #)}_a15Z9
                                               ds10_a15Yu ds20_a15YY
                                        of
                                        { (# ds21_a15Ze #) ->
                                        case {__pkg_ccall_GC sdl2-2.5.3.0 State# RealWorld
                             -> (# State# RealWorld #)}_a15Zm
                                               ds21_a15Ze
                                        of
                                        { (# ds22_a15Zp #) ->
                                        (# ds22_a15Zp, () #)
                                        }
                                        }
                                        }
                                        }
                                        };
                                      1# ->
                                        case getError1 ds16_a162w of
                                        { (# ipv6_a162C, ipv7_a162D #) ->
                                        createSoftwareRenderer1 ipv7_a162D ipv6_a162C
                                        }
                                    }
                                    } } in
                              case <# (narrow32Int# ds15_aVl3) 0# of {
                                __DEFAULT -> jump $w$j6_s18N8 ds14_aVl2;
                                1# ->
                                  case updateWindowSurface1 ds14_aVl2 of
                                  { (# ipv6_XVyM, ipv7_XVyO #) ->
                                  jump $w$j6_s18N8 ipv6_XVyM
                                  }
                              }
                              } } in
                        case eqAddr# ds13_a163o __NULL of {
                          __DEFAULT -> jump $w$j5_s18Nb ds12_a163n;
                          1# ->
                            case getWindowSurface1 ds12_a163n of
                            { (# ipv6_XVyi, ipv7_XVyk #) ->
                            jump $w$j5_s18Nb ipv6_XVyi
                            }
                        }
                        }
                        }
                        }
                        } } in
                  case eqAddr# a2_a168U __NULL of {
                    __DEFAULT -> jump $w$j4_s18Ne ipv2_XTFX;
                    1# ->
                      case load1 ipv2_XTFX of { (# ipv4_XVxx, ipv5_XVxz #) ->
                      jump $w$j4_s18Ne ipv4_XVxx
                      }
                  }
                  }
                  }
                  } } in
            case narrow32Int# ds2_a17En of {
              __DEFAULT ->
                case {__pkg_ccall_GC sdl2-ttf-2.1.2 State# RealWorld
                               -> (# State# RealWorld, Int# #)}_a17E4
                       ds1_a17Em
                of
                { (# ds7_a17E7, ds8_a17E8 #) ->
                case <# (narrow32Int# ds8_a17E8) 0# of {
                  __DEFAULT -> jump $w$j3_s18Nh ds7_a17E7;
                  1# ->
                    case initialize3 ds7_a17E7 of { (# ipv_XVwY, ipv1_XVx0 #) ->
                    jump $w$j3_s18Nh ipv_XVwY
                    }
                }
                };
              1# -> jump $w$j3_s18Nh ds1_a17Em
            }
            } } in
      case <# (narrow32Int# ds4_a17sc) 0# of {
        __DEFAULT -> jump $w$j2_s18Nk ds3_a17sb;
        1# ->
          case initialize1 ds3_a17sb of { (# ipv_aVly, ipv1_aVlz #) ->
          jump $w$j2_s18Nk ipv_aVly
          }
      }
      }

-- RHS size: {terms: 1, types: 0, coercions: 7, joins: 0/0}
grender = grender1 `cast` <Co:7>


------ Local rules for imported ids --------
"SPEC/Obelisk updateInput' @ Obelisk" [2]
    forall w1_s17sy w_s17sx.
      updateInput' w_s17sx w1_s17sy
      = $supdateInput'
"SPEC/Obelisk getInput' @ Obelisk" [2]
    forall w_s17sD. getInput' w_s17sD = $sgetInput'
"SPEC/Obelisk drawScreen' @ Obelisk" [2]
    forall w_s17sY. drawScreen' w_s17sY = $sdrawScreen'
"SPEC/Obelisk clearScreen' @ Obelisk" [2]
    forall w_s17t6. clearScreen' w_s17t6 = $sclearScreen'
"SPEC/Obelisk reader @ (StateT Vars IO) _ _"
    forall @ r_a15Xu @ a_a15Xv $dMonad_s17te.
      reader $dMonad_s17te
      = $fMonadReaderObelisk_$sreader
"SPEC/Obelisk clearRenderer' @ Obelisk" [2]
    forall w_s17zF. clearRenderer' w_s17zF = $sclearRenderer'
"SPEC/Obelisk updateWindowSurface' @ Obelisk" [2]
    forall w_s17zM.
      updateWindowSurface' w_s17zM
      = $supdateWindowSurface'
"SPEC/Obelisk $fApplicativeReaderT_$c*> @ (StateT Vars IO) _"
    forall @ r_a15VW $dApplicative_s17zO.
      $fApplicativeReaderT_$c*> $dApplicative_s17zO
      = $fApplicativeObelisk_$s$fApplicativeReaderT_$c*>
"SPEC/Obelisk $fMonadReaderT_$c>>= @ (StateT Vars IO) _"
    forall @ r_a15Wq $dMonad_s17A3.
      $fMonadReaderT_$c>>= $dMonad_s17A3
      = $fMonadObelisk_$s$fMonadReaderT_$c>>=
"SPEC/Obelisk $fApplicativeReaderT_$c<* @ (StateT Vars IO) _"
    forall @ r_a15Wb $dApplicative_s17A5.
      $fApplicativeReaderT_$c<* $dApplicative_s17A5
      = $fApplicativeObelisk_$s$fApplicativeReaderT_$c<*
"SPEC/Obelisk $fApplicativeReaderT_$cliftA2 @ (StateT Vars IO) _"
    forall @ r_a15VE $dApplicative_s17A7.
      $fApplicativeReaderT_$cliftA2 $dApplicative_s17A7
      = $fApplicativeObelisk_$s$fApplicativeReaderT_$cliftA2
"SPEC/Obelisk $fApplicativeReaderT_$c<*> @ (StateT Vars IO) _"
    forall @ r_a15Vp $dApplicative_s17A9.
      $fApplicativeReaderT_$c<*> $dApplicative_s17A9
      = $fApplicativeObelisk_$s$fApplicativeReaderT_$c<*>
"SPEC/Obelisk $fFunctorReaderT_$c<$ @ (StateT Vars IO) _"
    forall @ r_a15UK $dFunctor_s17Ab.
      $fFunctorReaderT_$c<$ $dFunctor_s17Ab
      = $fFunctorObelisk_$s$fFunctorReaderT_$c<$
"SPEC/Obelisk $fFunctorReaderT_$cfmap @ (StateT Vars IO) _"
    forall @ r_a15Uv $dFunctor_s17Aj.
      $fFunctorReaderT_$cfmap $dFunctor_s17Aj
      = $fFunctorObelisk_$s$fFunctorReaderT_$cfmap


Configuring executable 'rayBench' for obelisk-0.1.0.0..
Configuring executable 'obelisk-exe' for obelisk-0.1.0.0..
Preprocessing executable 'obelisk-exe' for obelisk-0.1.0.0..
Building executable 'obelisk-exe' for obelisk-0.1.0.0..
Preprocessing executable 'rayBench' for obelisk-0.1.0.0..
Building executable 'rayBench' for obelisk-0.1.0.0..
Linking C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\x\obelisk-exe\build\obelisk-exe\obelisk-exe.exe ...
Linking C:\cygwin64\home\tcrar\dev\obelisk\dist-newstyle\build\x86_64-windows\ghc-8.8.4\obelisk-0.1.0.0\x\rayBench\build\rayBench\rayBench.exe ...
